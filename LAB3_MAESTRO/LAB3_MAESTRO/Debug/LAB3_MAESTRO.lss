
LAB3_MAESTRO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000025a  00800100  00000aae  00000b22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012b8  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000952  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000805  00000000  00000000  00002afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001fc  00000000  00000000  00003300  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000590  00000000  00000000  000034fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000072a  00000000  00000000  00003a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000041b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ea       	ldi	r30, 0xAE	; 174
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 35       	cpi	r26, 0x5A	; 90
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 c8 01 	call	0x390	; 0x390 <main>
  8e:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <display_leds_master>:
// Función para mostrar número en LEDs del maestro
// Bits 0-3: Puerto C (PC0-PC3)
// Bits 4-7: Puerto D (PD4-PD7)
void display_leds_master(uint8_t number) {
	// Limpiar los bits que vamos a usar
	PORTC &= 0xF0;  // Mantener bits altos de Puerto C
  96:	98 b1       	in	r25, 0x08	; 8
  98:	90 7f       	andi	r25, 0xF0	; 240
  9a:	98 b9       	out	0x08, r25	; 8
	PORTD &= 0x0F;  // Mantener bits bajos de Puerto D
  9c:	9b b1       	in	r25, 0x0b	; 11
  9e:	9f 70       	andi	r25, 0x0F	; 15
  a0:	9b b9       	out	0x0b, r25	; 11
	
	// Colocar bits 0-3 en Puerto C (PC0-PC3)
	PORTC |= (number & 0x0F);
  a2:	98 b1       	in	r25, 0x08	; 8
  a4:	28 2f       	mov	r18, r24
  a6:	2f 70       	andi	r18, 0x0F	; 15
  a8:	92 2b       	or	r25, r18
  aa:	98 b9       	out	0x08, r25	; 8
	
	// Colocar bits 4-7 en Puerto D (PD4-PD7)
	PORTD |= (number & 0xF0);
  ac:	9b b1       	in	r25, 0x0b	; 11
  ae:	80 7f       	andi	r24, 0xF0	; 240
  b0:	89 2b       	or	r24, r25
  b2:	8b b9       	out	0x0b, r24	; 11
  b4:	08 95       	ret

000000b6 <leds_init_master>:
}

// Función para inicializar LEDs del maestro
void leds_init_master(void) {
	// Configurar PC0-PC3 como salidas (parte baja de Puerto C)
	DDRC |= 0x0F;
  b6:	87 b1       	in	r24, 0x07	; 7
  b8:	8f 60       	ori	r24, 0x0F	; 15
  ba:	87 b9       	out	0x07, r24	; 7
	
	// Configurar PD4-PD7 como salidas (parte alta de Puerto D)
	DDRD |= 0xF0;
  bc:	8a b1       	in	r24, 0x0a	; 10
  be:	80 6f       	ori	r24, 0xF0	; 240
  c0:	8a b9       	out	0x0a, r24	; 10
	
	// Inicializar LEDs apagados
	PORTC &= 0xF0;  // Apagar PC0-PC3
  c2:	88 b1       	in	r24, 0x08	; 8
  c4:	80 7f       	andi	r24, 0xF0	; 240
  c6:	88 b9       	out	0x08, r24	; 8
	PORTD &= 0x0F;  // Apagar PD4-PD7
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	8b b9       	out	0x0b, r24	; 11
  ce:	08 95       	ret

000000d0 <show_menu>:
}

// Función para mostrar menú
void show_menu(void) {
	uart_string("\r\n=== MENU PRINCIPAL ===\r\n");
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
	uart_string("1. Modo LEDs (enviar numero 0-255)\r\n");
  d8:	8b e1       	ldi	r24, 0x1B	; 27
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
	uart_string("2. Modo Potenciometros (leer valores del esclavo)\r\n");
  e0:	80 e4       	ldi	r24, 0x40	; 64
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
	uart_string("Seleccione opcion (1 o 2): ");
  e8:	84 e7       	ldi	r24, 0x74	; 116
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
  f0:	08 95       	ret

000000f2 <read_three_digit_number>:
}

// Función para leer número de 3 dígitos con ceros
uint8_t read_three_digit_number(void) {
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	00 d0       	rcall	.+0      	; 0xfa <read_three_digit_number+0x8>
  fa:	00 d0       	rcall	.+0      	; 0xfc <read_three_digit_number+0xa>
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
	char buffer[4] = {0};
 100:	19 82       	std	Y+1, r1	; 0x01
 102:	1a 82       	std	Y+2, r1	; 0x02
 104:	1b 82       	std	Y+3, r1	; 0x03
 106:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t i;
	
	uart_string("Ingrese numero de 3 digitos (ej: 007, 123, 255): ");
 108:	80 e9       	ldi	r24, 0x90	; 144
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
	
	// Leer exactamente 3 dígitos
	for(i = 0; i < 3; i++) {
 110:	10 e0       	ldi	r17, 0x00	; 0
 112:	16 c0       	rjmp	.+44     	; 0x140 <read_three_digit_number+0x4e>
		while(!uart_data_available());
 114:	0e 94 21 02 	call	0x442	; 0x442 <uart_data_available>
 118:	88 23       	and	r24, r24
 11a:	e1 f3       	breq	.-8      	; 0x114 <read_three_digit_number+0x22>
		uint8_t c = uart_receive();
 11c:	0e 94 1a 02 	call	0x434	; 0x434 <uart_receive>
		
		if(c >= '0' && c <= '9') {
 120:	90 ed       	ldi	r25, 0xD0	; 208
 122:	98 0f       	add	r25, r24
 124:	9a 30       	cpi	r25, 0x0A	; 10
 126:	50 f4       	brcc	.+20     	; 0x13c <read_three_digit_number+0x4a>
			buffer[i] = c;
 128:	e1 e0       	ldi	r30, 0x01	; 1
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	ec 0f       	add	r30, r28
 12e:	fd 1f       	adc	r31, r29
 130:	e1 0f       	add	r30, r17
 132:	f1 1d       	adc	r31, r1
 134:	80 83       	st	Z, r24
			uart_transmit(c);  // Echo
 136:	0e 94 13 02 	call	0x426	; 0x426 <uart_transmit>
 13a:	01 c0       	rjmp	.+2      	; 0x13e <read_three_digit_number+0x4c>
			} else {
			i--;  // Si no es dígito, repetir
 13c:	11 50       	subi	r17, 0x01	; 1
	uint8_t i;
	
	uart_string("Ingrese numero de 3 digitos (ej: 007, 123, 255): ");
	
	// Leer exactamente 3 dígitos
	for(i = 0; i < 3; i++) {
 13e:	1f 5f       	subi	r17, 0xFF	; 255
 140:	13 30       	cpi	r17, 0x03	; 3
 142:	40 f3       	brcs	.-48     	; 0x114 <read_three_digit_number+0x22>
			} else {
			i--;  // Si no es dígito, repetir
		}
	}
	
	uart_string("\r\n");
 144:	8d eb       	ldi	r24, 0xBD	; 189
 146:	92 e0       	ldi	r25, 0x02	; 2
 148:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
	
	// Convertir a número
	uint16_t result = (buffer[0] - '0') * 100 + (buffer[1] - '0') * 10 + (buffer[2] - '0');
 14c:	49 81       	ldd	r20, Y+1	; 0x01
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	40 53       	subi	r20, 0x30	; 48
 152:	51 09       	sbc	r21, r1
 154:	24 e6       	ldi	r18, 0x64	; 100
 156:	24 9f       	mul	r18, r20
 158:	c0 01       	movw	r24, r0
 15a:	25 9f       	mul	r18, r21
 15c:	90 0d       	add	r25, r0
 15e:	11 24       	eor	r1, r1
 160:	4a 81       	ldd	r20, Y+2	; 0x02
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	9a 01       	movw	r18, r20
 166:	20 53       	subi	r18, 0x30	; 48
 168:	31 09       	sbc	r19, r1
 16a:	b9 01       	movw	r22, r18
 16c:	66 0f       	add	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	a9 01       	movw	r20, r18
 172:	44 0f       	add	r20, r20
 174:	55 1f       	adc	r21, r21
 176:	44 0f       	add	r20, r20
 178:	55 1f       	adc	r21, r21
 17a:	44 0f       	add	r20, r20
 17c:	55 1f       	adc	r21, r21
 17e:	9b 01       	movw	r18, r22
 180:	24 0f       	add	r18, r20
 182:	35 1f       	adc	r19, r21
 184:	28 0f       	add	r18, r24
 186:	39 1f       	adc	r19, r25
 188:	8b 81       	ldd	r24, Y+3	; 0x03
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	c0 97       	sbiw	r24, 0x30	; 48
 18e:	82 0f       	add	r24, r18
 190:	93 1f       	adc	r25, r19
	if(result > 255) result = 255;
 192:	8f 3f       	cpi	r24, 0xFF	; 255
 194:	91 05       	cpc	r25, r1
 196:	19 f0       	breq	.+6      	; 0x19e <read_three_digit_number+0xac>
 198:	10 f0       	brcs	.+4      	; 0x19e <read_three_digit_number+0xac>
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	90 e0       	ldi	r25, 0x00	; 0
	
	return (uint8_t)result;
}
 19e:	0f 90       	pop	r0
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	08 95       	ret

000001ae <led_mode>:

// Modo LEDs
void led_mode(void) {
 1ae:	cf 93       	push	r28
	uart_string("\r\n=== MODO LEDS ===\r\n");
 1b0:	82 ec       	ldi	r24, 0xC2	; 194
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
	
	while(1) {
		uint8_t number = read_three_digit_number();
 1b8:	0e 94 79 00 	call	0xf2	; 0xf2 <read_three_digit_number>
 1bc:	c8 2f       	mov	r28, r24
		
		// Mostrar en LEDs del maestro
		display_leds_master(number);
 1be:	0e 94 4b 00 	call	0x96	; 0x96 <display_leds_master>
		
		uart_string("Numero: ");
 1c2:	88 ed       	ldi	r24, 0xD8	; 216
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
		uart_print_number(number);
 1ca:	8c 2f       	mov	r24, r28
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 32 02 	call	0x464	; 0x464 <uart_print_number>
		uart_string(" - Enviando al esclavo...\r\n");
 1d2:	81 ee       	ldi	r24, 0xE1	; 225
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
		
		// Enviar al esclavo por SPI
		PORTB &= ~(1 << PORTB2);  // SS bajo
 1da:	85 b1       	in	r24, 0x05	; 5
 1dc:	8b 7f       	andi	r24, 0xFB	; 251
 1de:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	85 e3       	ldi	r24, 0x35	; 53
 1e2:	8a 95       	dec	r24
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <led_mode+0x34>
 1e6:	00 00       	nop
		_delay_us(10);
		spi_transceive(0x01);     // Comando: modo LED
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 01 02 	call	0x402	; 0x402 <spi_transceive>
 1ee:	85 e3       	ldi	r24, 0x35	; 53
 1f0:	8a 95       	dec	r24
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <led_mode+0x42>
 1f4:	00 00       	nop
		_delay_us(10);
		spi_transceive(number);   // Dato
 1f6:	8c 2f       	mov	r24, r28
 1f8:	0e 94 01 02 	call	0x402	; 0x402 <spi_transceive>
 1fc:	85 e3       	ldi	r24, 0x35	; 53
 1fe:	8a 95       	dec	r24
 200:	f1 f7       	brne	.-4      	; 0x1fe <led_mode+0x50>
 202:	00 00       	nop
		_delay_us(10);
		PORTB |= (1 << PORTB2);   // SS alto
 204:	85 b1       	in	r24, 0x05	; 5
 206:	84 60       	ori	r24, 0x04	; 4
 208:	85 b9       	out	0x05, r24	; 5
		
		uart_string("Enviado! Presione 'q' para volver al menu o cualquier tecla para continuar: ");
 20a:	8d ef       	ldi	r24, 0xFD	; 253
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
		
		while(!uart_data_available());
 212:	0e 94 21 02 	call	0x442	; 0x442 <uart_data_available>
 216:	88 23       	and	r24, r24
 218:	e1 f3       	breq	.-8      	; 0x212 <led_mode+0x64>
		uint8_t c = uart_receive();
 21a:	0e 94 1a 02 	call	0x434	; 0x434 <uart_receive>
 21e:	c8 2f       	mov	r28, r24
		uart_transmit(c);
 220:	0e 94 13 02 	call	0x426	; 0x426 <uart_transmit>
		uart_string("\r\n");
 224:	8d eb       	ldi	r24, 0xBD	; 189
 226:	92 e0       	ldi	r25, 0x02	; 2
 228:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
		
		if(c == 'q' || c == 'Q') break;
 22c:	c1 37       	cpi	r28, 0x71	; 113
 22e:	11 f0       	breq	.+4      	; 0x234 <led_mode+0x86>
 230:	c1 35       	cpi	r28, 0x51	; 81
 232:	11 f6       	brne	.-124    	; 0x1b8 <led_mode+0xa>
	}
}
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <potentiometer_mode>:

// Modo Potenciómetros
void potentiometer_mode(void) {
 238:	8f 92       	push	r8
 23a:	9f 92       	push	r9
 23c:	af 92       	push	r10
 23e:	bf 92       	push	r11
 240:	cf 92       	push	r12
 242:	df 92       	push	r13
 244:	ef 92       	push	r14
 246:	ff 92       	push	r15
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
	uart_string("\r\n=== MODO POTENCIOMETROS ===\r\n");
 250:	8a e4       	ldi	r24, 0x4A	; 74
 252:	92 e0       	ldi	r25, 0x02	; 2
 254:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
	uart_string("Leyendo valores cada 2 segundos...\r\n");
 258:	8a e6       	ldi	r24, 0x6A	; 106
 25a:	92 e0       	ldi	r25, 0x02	; 2
 25c:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
	uart_string("Presione cualquier tecla para volver al menu\r\n\r\n");
 260:	8f e8       	ldi	r24, 0x8F	; 143
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
	
	while(1) {
		// Solicitar lectura de potenciómetros al esclavo
		PORTB &= ~(1 << PORTB2);  // SS bajo
 268:	85 b1       	in	r24, 0x05	; 5
 26a:	8b 7f       	andi	r24, 0xFB	; 251
 26c:	85 b9       	out	0x05, r24	; 5
 26e:	25 e3       	ldi	r18, 0x35	; 53
 270:	2a 95       	dec	r18
 272:	f1 f7       	brne	.-4      	; 0x270 <potentiometer_mode+0x38>
 274:	00 00       	nop
		_delay_us(10);
		spi_transceive(0x02);     // Comando: leer potenciómetros
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	0e 94 01 02 	call	0x402	; 0x402 <spi_transceive>
 27c:	85 e3       	ldi	r24, 0x35	; 53
 27e:	8a 95       	dec	r24
 280:	f1 f7       	brne	.-4      	; 0x27e <potentiometer_mode+0x46>
 282:	00 00       	nop
		_delay_us(10);
		
		// Leer POT1 (2 bytes: high, low)
		uint8_t pot1_high = spi_transceive(0x00);
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 01 02 	call	0x402	; 0x402 <spi_transceive>
 28a:	08 2f       	mov	r16, r24
 28c:	95 e3       	ldi	r25, 0x35	; 53
 28e:	9a 95       	dec	r25
 290:	f1 f7       	brne	.-4      	; 0x28e <potentiometer_mode+0x56>
 292:	00 00       	nop
		_delay_us(10);
		uint8_t pot1_low = spi_transceive(0x00);
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	0e 94 01 02 	call	0x402	; 0x402 <spi_transceive>
 29a:	d8 2f       	mov	r29, r24
 29c:	25 e3       	ldi	r18, 0x35	; 53
 29e:	2a 95       	dec	r18
 2a0:	f1 f7       	brne	.-4      	; 0x29e <potentiometer_mode+0x66>
 2a2:	00 00       	nop
		_delay_us(10);
		
		// Leer POT2 (2 bytes: high, low)
		uint8_t pot2_high = spi_transceive(0x00);
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	0e 94 01 02 	call	0x402	; 0x402 <spi_transceive>
 2aa:	c8 2f       	mov	r28, r24
 2ac:	85 e3       	ldi	r24, 0x35	; 53
 2ae:	8a 95       	dec	r24
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <potentiometer_mode+0x76>
 2b2:	00 00       	nop
		_delay_us(10);
		uint8_t pot2_low = spi_transceive(0x00);
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	0e 94 01 02 	call	0x402	; 0x402 <spi_transceive>
 2ba:	95 e3       	ldi	r25, 0x35	; 53
 2bc:	9a 95       	dec	r25
 2be:	f1 f7       	brne	.-4      	; 0x2bc <potentiometer_mode+0x84>
 2c0:	00 00       	nop
		_delay_us(10);
		
		PORTB |= (1 << PORTB2);   // SS alto
 2c2:	95 b1       	in	r25, 0x05	; 5
 2c4:	94 60       	ori	r25, 0x04	; 4
 2c6:	95 b9       	out	0x05, r25	; 5
		
		// Reconstruir valores de 16 bits
		uint16_t pot1_value = (pot1_high << 8) | pot1_low;
 2c8:	10 e0       	ldi	r17, 0x00	; 0
 2ca:	10 2f       	mov	r17, r16
 2cc:	00 27       	eor	r16, r16
 2ce:	0d 2b       	or	r16, r29
		uint16_t pot2_value = (pot2_high << 8) | pot2_low;
 2d0:	d0 e0       	ldi	r29, 0x00	; 0
 2d2:	dc 2f       	mov	r29, r28
 2d4:	cc 27       	eor	r28, r28
 2d6:	c8 2b       	or	r28, r24
		
		// Convertir a voltaje (asumiendo 5V referencia, 10 bits ADC)
		uint16_t pot1_voltage = (pot1_value * 5000UL) / 1024;
 2d8:	98 01       	movw	r18, r16
 2da:	a8 e8       	ldi	r26, 0x88	; 136
 2dc:	b3 e1       	ldi	r27, 0x13	; 19
 2de:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__umulhisi3>
 2e2:	4b 01       	movw	r8, r22
 2e4:	5c 01       	movw	r10, r24
 2e6:	07 2e       	mov	r0, r23
 2e8:	7a e0       	ldi	r23, 0x0A	; 10
 2ea:	b6 94       	lsr	r11
 2ec:	a7 94       	ror	r10
 2ee:	97 94       	ror	r9
 2f0:	87 94       	ror	r8
 2f2:	7a 95       	dec	r23
 2f4:	d1 f7       	brne	.-12     	; 0x2ea <potentiometer_mode+0xb2>
 2f6:	70 2d       	mov	r23, r0
		uint16_t pot2_voltage = (pot2_value * 5000UL) / 1024;
 2f8:	9e 01       	movw	r18, r28
 2fa:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__umulhisi3>
 2fe:	6b 01       	movw	r12, r22
 300:	7c 01       	movw	r14, r24
 302:	0b 2e       	mov	r0, r27
 304:	ba e0       	ldi	r27, 0x0A	; 10
 306:	f6 94       	lsr	r15
 308:	e7 94       	ror	r14
 30a:	d7 94       	ror	r13
 30c:	c7 94       	ror	r12
 30e:	ba 95       	dec	r27
 310:	d1 f7       	brne	.-12     	; 0x306 <potentiometer_mode+0xce>
 312:	b0 2d       	mov	r27, r0
		
		// Mostrar resultados
		uart_string("POT1: ");
 314:	80 ec       	ldi	r24, 0xC0	; 192
 316:	92 e0       	ldi	r25, 0x02	; 2
 318:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
		uart_print_number(pot1_value);
 31c:	c8 01       	movw	r24, r16
 31e:	0e 94 32 02 	call	0x464	; 0x464 <uart_print_number>
		uart_string(" (");
 322:	87 ec       	ldi	r24, 0xC7	; 199
 324:	92 e0       	ldi	r25, 0x02	; 2
 326:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
		uart_print_number(pot1_voltage);
 32a:	c4 01       	movw	r24, r8
 32c:	0e 94 32 02 	call	0x464	; 0x464 <uart_print_number>
		uart_string("mV) | POT2: ");
 330:	8a ec       	ldi	r24, 0xCA	; 202
 332:	92 e0       	ldi	r25, 0x02	; 2
 334:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
		uart_print_number(pot2_value);
 338:	ce 01       	movw	r24, r28
 33a:	0e 94 32 02 	call	0x464	; 0x464 <uart_print_number>
		uart_string(" (");
 33e:	87 ec       	ldi	r24, 0xC7	; 199
 340:	92 e0       	ldi	r25, 0x02	; 2
 342:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
		uart_print_number(pot2_voltage);
 346:	c6 01       	movw	r24, r12
 348:	0e 94 32 02 	call	0x464	; 0x464 <uart_print_number>
		uart_string("mV)\r\n");
 34c:	87 ed       	ldi	r24, 0xD7	; 215
 34e:	92 e0       	ldi	r25, 0x02	; 2
 350:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
		
		// Verificar si hay tecla presionada
		if(uart_data_available()) {
 354:	0e 94 21 02 	call	0x442	; 0x442 <uart_data_available>
 358:	88 23       	and	r24, r24
 35a:	19 f0       	breq	.+6      	; 0x362 <potentiometer_mode+0x12a>
			uart_receive();  // Leer y descartar
 35c:	0e 94 1a 02 	call	0x434	; 0x434 <uart_receive>
			break;
		}
		
		_delay_ms(2000);  // Esperar 2 segundos
	}
}
 360:	0a c0       	rjmp	.+20     	; 0x376 <potentiometer_mode+0x13e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 362:	2f ef       	ldi	r18, 0xFF	; 255
 364:	87 ea       	ldi	r24, 0xA7	; 167
 366:	91 e6       	ldi	r25, 0x61	; 97
 368:	21 50       	subi	r18, 0x01	; 1
 36a:	80 40       	sbci	r24, 0x00	; 0
 36c:	90 40       	sbci	r25, 0x00	; 0
 36e:	e1 f7       	brne	.-8      	; 0x368 <potentiometer_mode+0x130>
 370:	00 c0       	rjmp	.+0      	; 0x372 <potentiometer_mode+0x13a>
 372:	00 00       	nop
 374:	79 cf       	rjmp	.-270    	; 0x268 <potentiometer_mode+0x30>
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	ff 90       	pop	r15
 380:	ef 90       	pop	r14
 382:	df 90       	pop	r13
 384:	cf 90       	pop	r12
 386:	bf 90       	pop	r11
 388:	af 90       	pop	r10
 38a:	9f 90       	pop	r9
 38c:	8f 90       	pop	r8
 38e:	08 95       	ret

00000390 <main>:

int main(void) {
	// Inicializar periféricos
	uart_init();
 390:	0e 94 07 02 	call	0x40e	; 0x40e <uart_init>
	spi_master_init();
 394:	0e 94 f5 01 	call	0x3ea	; 0x3ea <spi_master_init>
	leds_init_master();
 398:	0e 94 5b 00 	call	0xb6	; 0xb6 <leds_init_master>
	
	uart_string("=== LABORATORIO SPI - MAESTRO ===\r\n");
 39c:	8d ed       	ldi	r24, 0xDD	; 221
 39e:	92 e0       	ldi	r25, 0x02	; 2
 3a0:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
	uart_string("Sistema iniciado correctamente\r\n");
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	93 e0       	ldi	r25, 0x03	; 3
 3a8:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
	
	while(1) {
		show_menu();
 3ac:	0e 94 68 00 	call	0xd0	; 0xd0 <show_menu>
		
		// Esperar selección
		while(!uart_data_available());
 3b0:	0e 94 21 02 	call	0x442	; 0x442 <uart_data_available>
 3b4:	88 23       	and	r24, r24
 3b6:	e1 f3       	breq	.-8      	; 0x3b0 <main+0x20>
		uint8_t option = uart_receive();
 3b8:	0e 94 1a 02 	call	0x434	; 0x434 <uart_receive>
 3bc:	c8 2f       	mov	r28, r24
		uart_transmit(option);
 3be:	0e 94 13 02 	call	0x426	; 0x426 <uart_transmit>
		uart_string("\r\n");
 3c2:	8d eb       	ldi	r24, 0xBD	; 189
 3c4:	92 e0       	ldi	r25, 0x02	; 2
 3c6:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
		
		switch(option) {
 3ca:	c1 33       	cpi	r28, 0x31	; 49
 3cc:	19 f0       	breq	.+6      	; 0x3d4 <main+0x44>
 3ce:	c2 33       	cpi	r28, 0x32	; 50
 3d0:	21 f0       	breq	.+8      	; 0x3da <main+0x4a>
 3d2:	06 c0       	rjmp	.+12     	; 0x3e0 <main+0x50>
			case '1':
			led_mode();
 3d4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <led_mode>
			break;
 3d8:	e9 cf       	rjmp	.-46     	; 0x3ac <main+0x1c>
			case '2':
			potentiometer_mode();
 3da:	0e 94 1c 01 	call	0x238	; 0x238 <potentiometer_mode>
			break;
 3de:	e6 cf       	rjmp	.-52     	; 0x3ac <main+0x1c>
			default:
			uart_string("Opcion invalida. Intente de nuevo.\r\n");
 3e0:	82 e2       	ldi	r24, 0x22	; 34
 3e2:	93 e0       	ldi	r25, 0x03	; 3
 3e4:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
			break;
 3e8:	e1 cf       	rjmp	.-62     	; 0x3ac <main+0x1c>

000003ea <spi_master_init>:
	// Configurar pines: MISO como salida; MOSI, SCK, SS como entradas
	DDRB |= (1 << DDB4);                               // MISO
	DDRB &= ~((1 << DDB3) | (1 << DDB5) | (1 << DDB2)); // MOSI, SCK, SS
	
	// Configurar SPI: Habilitar, Slave
	SPCR = (1 << SPE);
 3ea:	84 b1       	in	r24, 0x04	; 4
 3ec:	8c 62       	ori	r24, 0x2C	; 44
 3ee:	84 b9       	out	0x04, r24	; 4
 3f0:	84 b1       	in	r24, 0x04	; 4
 3f2:	8f 7e       	andi	r24, 0xEF	; 239
 3f4:	84 b9       	out	0x04, r24	; 4
 3f6:	81 e5       	ldi	r24, 0x51	; 81
 3f8:	8c bd       	out	0x2c, r24	; 44
 3fa:	85 b1       	in	r24, 0x05	; 5
 3fc:	84 60       	ori	r24, 0x04	; 4
 3fe:	85 b9       	out	0x05, r24	; 5
 400:	08 95       	ret

00000402 <spi_transceive>:
}

uint8_t spi_transceive(uint8_t data) {
	SPDR = data;                        // Enviar dato
 402:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));      // Esperar a que termine
 404:	0d b4       	in	r0, 0x2d	; 45
 406:	07 fe       	sbrs	r0, 7
 408:	fd cf       	rjmp	.-6      	; 0x404 <spi_transceive+0x2>
	return SPDR;                        // Retornar dato recibido
 40a:	8e b5       	in	r24, 0x2e	; 46
}
 40c:	08 95       	ret

0000040e <uart_init>:
// Enviar voltaje formateado
void uart_print_voltage(uint16_t voltage_mv, const char* label) {
	char buffer[20];
	sprintf(buffer, "%s: %d.%02dV\r\n", label, voltage_mv/1000, (voltage_mv%1000)/10);
	uart_string(buffer);
}
 40e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 412:	87 e6       	ldi	r24, 0x67	; 103
 414:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 418:	88 e1       	ldi	r24, 0x18	; 24
 41a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 41e:	86 e0       	ldi	r24, 0x06	; 6
 420:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 424:	08 95       	ret

00000426 <uart_transmit>:
 426:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 42a:	95 ff       	sbrs	r25, 5
 42c:	fc cf       	rjmp	.-8      	; 0x426 <uart_transmit>
 42e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 432:	08 95       	ret

00000434 <uart_receive>:
 434:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 438:	88 23       	and	r24, r24
 43a:	e4 f7       	brge	.-8      	; 0x434 <uart_receive>
 43c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 440:	08 95       	ret

00000442 <uart_data_available>:
 442:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 446:	80 78       	andi	r24, 0x80	; 128
 448:	08 95       	ret

0000044a <uart_string>:
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	ec 01       	movw	r28, r24
 450:	03 c0       	rjmp	.+6      	; 0x458 <uart_string+0xe>
 452:	21 96       	adiw	r28, 0x01	; 1
 454:	0e 94 13 02 	call	0x426	; 0x426 <uart_transmit>
 458:	88 81       	ld	r24, Y
 45a:	81 11       	cpse	r24, r1
 45c:	fa cf       	rjmp	.-12     	; 0x452 <uart_string+0x8>
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	08 95       	ret

00000464 <uart_print_number>:


void uart_print_number(uint16_t num) {
 464:	0f 93       	push	r16
 466:	1f 93       	push	r17
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	00 d0       	rcall	.+0      	; 0x46e <uart_print_number+0xa>
 46e:	00 d0       	rcall	.+0      	; 0x470 <uart_print_number+0xc>
 470:	00 d0       	rcall	.+0      	; 0x472 <uart_print_number+0xe>
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
	char buffer[6];
	sprintf(buffer, "%u", num);
 476:	9f 93       	push	r25
 478:	8f 93       	push	r24
 47a:	86 e5       	ldi	r24, 0x56	; 86
 47c:	93 e0       	ldi	r25, 0x03	; 3
 47e:	9f 93       	push	r25
 480:	8f 93       	push	r24
 482:	8e 01       	movw	r16, r28
 484:	0f 5f       	subi	r16, 0xFF	; 255
 486:	1f 4f       	sbci	r17, 0xFF	; 255
 488:	1f 93       	push	r17
 48a:	0f 93       	push	r16
 48c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <sprintf>
	uart_string(buffer);
 490:	c8 01       	movw	r24, r16
 492:	0e 94 25 02 	call	0x44a	; 0x44a <uart_string>
 496:	0f 90       	pop	r0
 498:	0f 90       	pop	r0
 49a:	0f 90       	pop	r0
 49c:	0f 90       	pop	r0
 49e:	0f 90       	pop	r0
 4a0:	0f 90       	pop	r0
 4a2:	26 96       	adiw	r28, 0x06	; 6
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	cd bf       	out	0x3d, r28	; 61
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	1f 91       	pop	r17
 4b4:	0f 91       	pop	r16
 4b6:	08 95       	ret

000004b8 <__umulhisi3>:
 4b8:	a2 9f       	mul	r26, r18
 4ba:	b0 01       	movw	r22, r0
 4bc:	b3 9f       	mul	r27, r19
 4be:	c0 01       	movw	r24, r0
 4c0:	a3 9f       	mul	r26, r19
 4c2:	70 0d       	add	r23, r0
 4c4:	81 1d       	adc	r24, r1
 4c6:	11 24       	eor	r1, r1
 4c8:	91 1d       	adc	r25, r1
 4ca:	b2 9f       	mul	r27, r18
 4cc:	70 0d       	add	r23, r0
 4ce:	81 1d       	adc	r24, r1
 4d0:	11 24       	eor	r1, r1
 4d2:	91 1d       	adc	r25, r1
 4d4:	08 95       	ret

000004d6 <sprintf>:
 4d6:	ae e0       	ldi	r26, 0x0E	; 14
 4d8:	b0 e0       	ldi	r27, 0x00	; 0
 4da:	e1 e7       	ldi	r30, 0x71	; 113
 4dc:	f2 e0       	ldi	r31, 0x02	; 2
 4de:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__prologue_saves__+0x1c>
 4e2:	0d 89       	ldd	r16, Y+21	; 0x15
 4e4:	1e 89       	ldd	r17, Y+22	; 0x16
 4e6:	86 e0       	ldi	r24, 0x06	; 6
 4e8:	8c 83       	std	Y+4, r24	; 0x04
 4ea:	1a 83       	std	Y+2, r17	; 0x02
 4ec:	09 83       	std	Y+1, r16	; 0x01
 4ee:	8f ef       	ldi	r24, 0xFF	; 255
 4f0:	9f e7       	ldi	r25, 0x7F	; 127
 4f2:	9e 83       	std	Y+6, r25	; 0x06
 4f4:	8d 83       	std	Y+5, r24	; 0x05
 4f6:	ae 01       	movw	r20, r28
 4f8:	47 5e       	subi	r20, 0xE7	; 231
 4fa:	5f 4f       	sbci	r21, 0xFF	; 255
 4fc:	6f 89       	ldd	r22, Y+23	; 0x17
 4fe:	78 8d       	ldd	r23, Y+24	; 0x18
 500:	ce 01       	movw	r24, r28
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	0e 94 8d 02 	call	0x51a	; 0x51a <vfprintf>
 508:	ef 81       	ldd	r30, Y+7	; 0x07
 50a:	f8 85       	ldd	r31, Y+8	; 0x08
 50c:	e0 0f       	add	r30, r16
 50e:	f1 1f       	adc	r31, r17
 510:	10 82       	st	Z, r1
 512:	2e 96       	adiw	r28, 0x0e	; 14
 514:	e4 e0       	ldi	r30, 0x04	; 4
 516:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__epilogue_restores__+0x1c>

0000051a <vfprintf>:
 51a:	ab e0       	ldi	r26, 0x0B	; 11
 51c:	b0 e0       	ldi	r27, 0x00	; 0
 51e:	e3 e9       	ldi	r30, 0x93	; 147
 520:	f2 e0       	ldi	r31, 0x02	; 2
 522:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__prologue_saves__>
 526:	6c 01       	movw	r12, r24
 528:	7b 01       	movw	r14, r22
 52a:	8a 01       	movw	r16, r20
 52c:	fc 01       	movw	r30, r24
 52e:	17 82       	std	Z+7, r1	; 0x07
 530:	16 82       	std	Z+6, r1	; 0x06
 532:	83 81       	ldd	r24, Z+3	; 0x03
 534:	81 ff       	sbrs	r24, 1
 536:	cc c1       	rjmp	.+920    	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 538:	ce 01       	movw	r24, r28
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	3c 01       	movw	r6, r24
 53e:	f6 01       	movw	r30, r12
 540:	93 81       	ldd	r25, Z+3	; 0x03
 542:	f7 01       	movw	r30, r14
 544:	93 fd       	sbrc	r25, 3
 546:	85 91       	lpm	r24, Z+
 548:	93 ff       	sbrs	r25, 3
 54a:	81 91       	ld	r24, Z+
 54c:	7f 01       	movw	r14, r30
 54e:	88 23       	and	r24, r24
 550:	09 f4       	brne	.+2      	; 0x554 <vfprintf+0x3a>
 552:	ba c1       	rjmp	.+884    	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 554:	85 32       	cpi	r24, 0x25	; 37
 556:	39 f4       	brne	.+14     	; 0x566 <vfprintf+0x4c>
 558:	93 fd       	sbrc	r25, 3
 55a:	85 91       	lpm	r24, Z+
 55c:	93 ff       	sbrs	r25, 3
 55e:	81 91       	ld	r24, Z+
 560:	7f 01       	movw	r14, r30
 562:	85 32       	cpi	r24, 0x25	; 37
 564:	29 f4       	brne	.+10     	; 0x570 <vfprintf+0x56>
 566:	b6 01       	movw	r22, r12
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 84 04 	call	0x908	; 0x908 <fputc>
 56e:	e7 cf       	rjmp	.-50     	; 0x53e <vfprintf+0x24>
 570:	91 2c       	mov	r9, r1
 572:	21 2c       	mov	r2, r1
 574:	31 2c       	mov	r3, r1
 576:	ff e1       	ldi	r31, 0x1F	; 31
 578:	f3 15       	cp	r31, r3
 57a:	d8 f0       	brcs	.+54     	; 0x5b2 <vfprintf+0x98>
 57c:	8b 32       	cpi	r24, 0x2B	; 43
 57e:	79 f0       	breq	.+30     	; 0x59e <vfprintf+0x84>
 580:	38 f4       	brcc	.+14     	; 0x590 <vfprintf+0x76>
 582:	80 32       	cpi	r24, 0x20	; 32
 584:	79 f0       	breq	.+30     	; 0x5a4 <vfprintf+0x8a>
 586:	83 32       	cpi	r24, 0x23	; 35
 588:	a1 f4       	brne	.+40     	; 0x5b2 <vfprintf+0x98>
 58a:	23 2d       	mov	r18, r3
 58c:	20 61       	ori	r18, 0x10	; 16
 58e:	1d c0       	rjmp	.+58     	; 0x5ca <vfprintf+0xb0>
 590:	8d 32       	cpi	r24, 0x2D	; 45
 592:	61 f0       	breq	.+24     	; 0x5ac <vfprintf+0x92>
 594:	80 33       	cpi	r24, 0x30	; 48
 596:	69 f4       	brne	.+26     	; 0x5b2 <vfprintf+0x98>
 598:	23 2d       	mov	r18, r3
 59a:	21 60       	ori	r18, 0x01	; 1
 59c:	16 c0       	rjmp	.+44     	; 0x5ca <vfprintf+0xb0>
 59e:	83 2d       	mov	r24, r3
 5a0:	82 60       	ori	r24, 0x02	; 2
 5a2:	38 2e       	mov	r3, r24
 5a4:	e3 2d       	mov	r30, r3
 5a6:	e4 60       	ori	r30, 0x04	; 4
 5a8:	3e 2e       	mov	r3, r30
 5aa:	2a c0       	rjmp	.+84     	; 0x600 <vfprintf+0xe6>
 5ac:	f3 2d       	mov	r31, r3
 5ae:	f8 60       	ori	r31, 0x08	; 8
 5b0:	1d c0       	rjmp	.+58     	; 0x5ec <vfprintf+0xd2>
 5b2:	37 fc       	sbrc	r3, 7
 5b4:	2d c0       	rjmp	.+90     	; 0x610 <vfprintf+0xf6>
 5b6:	20 ed       	ldi	r18, 0xD0	; 208
 5b8:	28 0f       	add	r18, r24
 5ba:	2a 30       	cpi	r18, 0x0A	; 10
 5bc:	40 f0       	brcs	.+16     	; 0x5ce <vfprintf+0xb4>
 5be:	8e 32       	cpi	r24, 0x2E	; 46
 5c0:	b9 f4       	brne	.+46     	; 0x5f0 <vfprintf+0xd6>
 5c2:	36 fc       	sbrc	r3, 6
 5c4:	81 c1       	rjmp	.+770    	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 5c6:	23 2d       	mov	r18, r3
 5c8:	20 64       	ori	r18, 0x40	; 64
 5ca:	32 2e       	mov	r3, r18
 5cc:	19 c0       	rjmp	.+50     	; 0x600 <vfprintf+0xe6>
 5ce:	36 fe       	sbrs	r3, 6
 5d0:	06 c0       	rjmp	.+12     	; 0x5de <vfprintf+0xc4>
 5d2:	8a e0       	ldi	r24, 0x0A	; 10
 5d4:	98 9e       	mul	r9, r24
 5d6:	20 0d       	add	r18, r0
 5d8:	11 24       	eor	r1, r1
 5da:	92 2e       	mov	r9, r18
 5dc:	11 c0       	rjmp	.+34     	; 0x600 <vfprintf+0xe6>
 5de:	ea e0       	ldi	r30, 0x0A	; 10
 5e0:	2e 9e       	mul	r2, r30
 5e2:	20 0d       	add	r18, r0
 5e4:	11 24       	eor	r1, r1
 5e6:	22 2e       	mov	r2, r18
 5e8:	f3 2d       	mov	r31, r3
 5ea:	f0 62       	ori	r31, 0x20	; 32
 5ec:	3f 2e       	mov	r3, r31
 5ee:	08 c0       	rjmp	.+16     	; 0x600 <vfprintf+0xe6>
 5f0:	8c 36       	cpi	r24, 0x6C	; 108
 5f2:	21 f4       	brne	.+8      	; 0x5fc <vfprintf+0xe2>
 5f4:	83 2d       	mov	r24, r3
 5f6:	80 68       	ori	r24, 0x80	; 128
 5f8:	38 2e       	mov	r3, r24
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <vfprintf+0xe6>
 5fc:	88 36       	cpi	r24, 0x68	; 104
 5fe:	41 f4       	brne	.+16     	; 0x610 <vfprintf+0xf6>
 600:	f7 01       	movw	r30, r14
 602:	93 fd       	sbrc	r25, 3
 604:	85 91       	lpm	r24, Z+
 606:	93 ff       	sbrs	r25, 3
 608:	81 91       	ld	r24, Z+
 60a:	7f 01       	movw	r14, r30
 60c:	81 11       	cpse	r24, r1
 60e:	b3 cf       	rjmp	.-154    	; 0x576 <vfprintf+0x5c>
 610:	98 2f       	mov	r25, r24
 612:	9f 7d       	andi	r25, 0xDF	; 223
 614:	95 54       	subi	r25, 0x45	; 69
 616:	93 30       	cpi	r25, 0x03	; 3
 618:	28 f4       	brcc	.+10     	; 0x624 <vfprintf+0x10a>
 61a:	0c 5f       	subi	r16, 0xFC	; 252
 61c:	1f 4f       	sbci	r17, 0xFF	; 255
 61e:	9f e3       	ldi	r25, 0x3F	; 63
 620:	99 83       	std	Y+1, r25	; 0x01
 622:	0d c0       	rjmp	.+26     	; 0x63e <vfprintf+0x124>
 624:	83 36       	cpi	r24, 0x63	; 99
 626:	31 f0       	breq	.+12     	; 0x634 <vfprintf+0x11a>
 628:	83 37       	cpi	r24, 0x73	; 115
 62a:	71 f0       	breq	.+28     	; 0x648 <vfprintf+0x12e>
 62c:	83 35       	cpi	r24, 0x53	; 83
 62e:	09 f0       	breq	.+2      	; 0x632 <vfprintf+0x118>
 630:	59 c0       	rjmp	.+178    	; 0x6e4 <vfprintf+0x1ca>
 632:	21 c0       	rjmp	.+66     	; 0x676 <vfprintf+0x15c>
 634:	f8 01       	movw	r30, r16
 636:	80 81       	ld	r24, Z
 638:	89 83       	std	Y+1, r24	; 0x01
 63a:	0e 5f       	subi	r16, 0xFE	; 254
 63c:	1f 4f       	sbci	r17, 0xFF	; 255
 63e:	88 24       	eor	r8, r8
 640:	83 94       	inc	r8
 642:	91 2c       	mov	r9, r1
 644:	53 01       	movw	r10, r6
 646:	13 c0       	rjmp	.+38     	; 0x66e <vfprintf+0x154>
 648:	28 01       	movw	r4, r16
 64a:	f2 e0       	ldi	r31, 0x02	; 2
 64c:	4f 0e       	add	r4, r31
 64e:	51 1c       	adc	r5, r1
 650:	f8 01       	movw	r30, r16
 652:	a0 80       	ld	r10, Z
 654:	b1 80       	ldd	r11, Z+1	; 0x01
 656:	36 fe       	sbrs	r3, 6
 658:	03 c0       	rjmp	.+6      	; 0x660 <vfprintf+0x146>
 65a:	69 2d       	mov	r22, r9
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	02 c0       	rjmp	.+4      	; 0x664 <vfprintf+0x14a>
 660:	6f ef       	ldi	r22, 0xFF	; 255
 662:	7f ef       	ldi	r23, 0xFF	; 255
 664:	c5 01       	movw	r24, r10
 666:	0e 94 79 04 	call	0x8f2	; 0x8f2 <strnlen>
 66a:	4c 01       	movw	r8, r24
 66c:	82 01       	movw	r16, r4
 66e:	f3 2d       	mov	r31, r3
 670:	ff 77       	andi	r31, 0x7F	; 127
 672:	3f 2e       	mov	r3, r31
 674:	16 c0       	rjmp	.+44     	; 0x6a2 <vfprintf+0x188>
 676:	28 01       	movw	r4, r16
 678:	22 e0       	ldi	r18, 0x02	; 2
 67a:	42 0e       	add	r4, r18
 67c:	51 1c       	adc	r5, r1
 67e:	f8 01       	movw	r30, r16
 680:	a0 80       	ld	r10, Z
 682:	b1 80       	ldd	r11, Z+1	; 0x01
 684:	36 fe       	sbrs	r3, 6
 686:	03 c0       	rjmp	.+6      	; 0x68e <vfprintf+0x174>
 688:	69 2d       	mov	r22, r9
 68a:	70 e0       	ldi	r23, 0x00	; 0
 68c:	02 c0       	rjmp	.+4      	; 0x692 <vfprintf+0x178>
 68e:	6f ef       	ldi	r22, 0xFF	; 255
 690:	7f ef       	ldi	r23, 0xFF	; 255
 692:	c5 01       	movw	r24, r10
 694:	0e 94 6e 04 	call	0x8dc	; 0x8dc <strnlen_P>
 698:	4c 01       	movw	r8, r24
 69a:	f3 2d       	mov	r31, r3
 69c:	f0 68       	ori	r31, 0x80	; 128
 69e:	3f 2e       	mov	r3, r31
 6a0:	82 01       	movw	r16, r4
 6a2:	33 fc       	sbrc	r3, 3
 6a4:	1b c0       	rjmp	.+54     	; 0x6dc <vfprintf+0x1c2>
 6a6:	82 2d       	mov	r24, r2
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	88 16       	cp	r8, r24
 6ac:	99 06       	cpc	r9, r25
 6ae:	b0 f4       	brcc	.+44     	; 0x6dc <vfprintf+0x1c2>
 6b0:	b6 01       	movw	r22, r12
 6b2:	80 e2       	ldi	r24, 0x20	; 32
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 84 04 	call	0x908	; 0x908 <fputc>
 6ba:	2a 94       	dec	r2
 6bc:	f4 cf       	rjmp	.-24     	; 0x6a6 <vfprintf+0x18c>
 6be:	f5 01       	movw	r30, r10
 6c0:	37 fc       	sbrc	r3, 7
 6c2:	85 91       	lpm	r24, Z+
 6c4:	37 fe       	sbrs	r3, 7
 6c6:	81 91       	ld	r24, Z+
 6c8:	5f 01       	movw	r10, r30
 6ca:	b6 01       	movw	r22, r12
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 84 04 	call	0x908	; 0x908 <fputc>
 6d2:	21 10       	cpse	r2, r1
 6d4:	2a 94       	dec	r2
 6d6:	21 e0       	ldi	r18, 0x01	; 1
 6d8:	82 1a       	sub	r8, r18
 6da:	91 08       	sbc	r9, r1
 6dc:	81 14       	cp	r8, r1
 6de:	91 04       	cpc	r9, r1
 6e0:	71 f7       	brne	.-36     	; 0x6be <vfprintf+0x1a4>
 6e2:	e8 c0       	rjmp	.+464    	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 6e4:	84 36       	cpi	r24, 0x64	; 100
 6e6:	11 f0       	breq	.+4      	; 0x6ec <vfprintf+0x1d2>
 6e8:	89 36       	cpi	r24, 0x69	; 105
 6ea:	41 f5       	brne	.+80     	; 0x73c <vfprintf+0x222>
 6ec:	f8 01       	movw	r30, r16
 6ee:	37 fe       	sbrs	r3, 7
 6f0:	07 c0       	rjmp	.+14     	; 0x700 <vfprintf+0x1e6>
 6f2:	60 81       	ld	r22, Z
 6f4:	71 81       	ldd	r23, Z+1	; 0x01
 6f6:	82 81       	ldd	r24, Z+2	; 0x02
 6f8:	93 81       	ldd	r25, Z+3	; 0x03
 6fa:	0c 5f       	subi	r16, 0xFC	; 252
 6fc:	1f 4f       	sbci	r17, 0xFF	; 255
 6fe:	08 c0       	rjmp	.+16     	; 0x710 <vfprintf+0x1f6>
 700:	60 81       	ld	r22, Z
 702:	71 81       	ldd	r23, Z+1	; 0x01
 704:	07 2e       	mov	r0, r23
 706:	00 0c       	add	r0, r0
 708:	88 0b       	sbc	r24, r24
 70a:	99 0b       	sbc	r25, r25
 70c:	0e 5f       	subi	r16, 0xFE	; 254
 70e:	1f 4f       	sbci	r17, 0xFF	; 255
 710:	f3 2d       	mov	r31, r3
 712:	ff 76       	andi	r31, 0x6F	; 111
 714:	3f 2e       	mov	r3, r31
 716:	97 ff       	sbrs	r25, 7
 718:	09 c0       	rjmp	.+18     	; 0x72c <vfprintf+0x212>
 71a:	90 95       	com	r25
 71c:	80 95       	com	r24
 71e:	70 95       	com	r23
 720:	61 95       	neg	r22
 722:	7f 4f       	sbci	r23, 0xFF	; 255
 724:	8f 4f       	sbci	r24, 0xFF	; 255
 726:	9f 4f       	sbci	r25, 0xFF	; 255
 728:	f0 68       	ori	r31, 0x80	; 128
 72a:	3f 2e       	mov	r3, r31
 72c:	2a e0       	ldi	r18, 0x0A	; 10
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	a3 01       	movw	r20, r6
 732:	0e 94 c0 04 	call	0x980	; 0x980 <__ultoa_invert>
 736:	88 2e       	mov	r8, r24
 738:	86 18       	sub	r8, r6
 73a:	45 c0       	rjmp	.+138    	; 0x7c6 <vfprintf+0x2ac>
 73c:	85 37       	cpi	r24, 0x75	; 117
 73e:	31 f4       	brne	.+12     	; 0x74c <vfprintf+0x232>
 740:	23 2d       	mov	r18, r3
 742:	2f 7e       	andi	r18, 0xEF	; 239
 744:	b2 2e       	mov	r11, r18
 746:	2a e0       	ldi	r18, 0x0A	; 10
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	25 c0       	rjmp	.+74     	; 0x796 <vfprintf+0x27c>
 74c:	93 2d       	mov	r25, r3
 74e:	99 7f       	andi	r25, 0xF9	; 249
 750:	b9 2e       	mov	r11, r25
 752:	8f 36       	cpi	r24, 0x6F	; 111
 754:	c1 f0       	breq	.+48     	; 0x786 <vfprintf+0x26c>
 756:	18 f4       	brcc	.+6      	; 0x75e <vfprintf+0x244>
 758:	88 35       	cpi	r24, 0x58	; 88
 75a:	79 f0       	breq	.+30     	; 0x77a <vfprintf+0x260>
 75c:	b5 c0       	rjmp	.+362    	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 75e:	80 37       	cpi	r24, 0x70	; 112
 760:	19 f0       	breq	.+6      	; 0x768 <vfprintf+0x24e>
 762:	88 37       	cpi	r24, 0x78	; 120
 764:	21 f0       	breq	.+8      	; 0x76e <vfprintf+0x254>
 766:	b0 c0       	rjmp	.+352    	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 768:	e9 2f       	mov	r30, r25
 76a:	e0 61       	ori	r30, 0x10	; 16
 76c:	be 2e       	mov	r11, r30
 76e:	b4 fe       	sbrs	r11, 4
 770:	0d c0       	rjmp	.+26     	; 0x78c <vfprintf+0x272>
 772:	fb 2d       	mov	r31, r11
 774:	f4 60       	ori	r31, 0x04	; 4
 776:	bf 2e       	mov	r11, r31
 778:	09 c0       	rjmp	.+18     	; 0x78c <vfprintf+0x272>
 77a:	34 fe       	sbrs	r3, 4
 77c:	0a c0       	rjmp	.+20     	; 0x792 <vfprintf+0x278>
 77e:	29 2f       	mov	r18, r25
 780:	26 60       	ori	r18, 0x06	; 6
 782:	b2 2e       	mov	r11, r18
 784:	06 c0       	rjmp	.+12     	; 0x792 <vfprintf+0x278>
 786:	28 e0       	ldi	r18, 0x08	; 8
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	05 c0       	rjmp	.+10     	; 0x796 <vfprintf+0x27c>
 78c:	20 e1       	ldi	r18, 0x10	; 16
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	02 c0       	rjmp	.+4      	; 0x796 <vfprintf+0x27c>
 792:	20 e1       	ldi	r18, 0x10	; 16
 794:	32 e0       	ldi	r19, 0x02	; 2
 796:	f8 01       	movw	r30, r16
 798:	b7 fe       	sbrs	r11, 7
 79a:	07 c0       	rjmp	.+14     	; 0x7aa <vfprintf+0x290>
 79c:	60 81       	ld	r22, Z
 79e:	71 81       	ldd	r23, Z+1	; 0x01
 7a0:	82 81       	ldd	r24, Z+2	; 0x02
 7a2:	93 81       	ldd	r25, Z+3	; 0x03
 7a4:	0c 5f       	subi	r16, 0xFC	; 252
 7a6:	1f 4f       	sbci	r17, 0xFF	; 255
 7a8:	06 c0       	rjmp	.+12     	; 0x7b6 <vfprintf+0x29c>
 7aa:	60 81       	ld	r22, Z
 7ac:	71 81       	ldd	r23, Z+1	; 0x01
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	0e 5f       	subi	r16, 0xFE	; 254
 7b4:	1f 4f       	sbci	r17, 0xFF	; 255
 7b6:	a3 01       	movw	r20, r6
 7b8:	0e 94 c0 04 	call	0x980	; 0x980 <__ultoa_invert>
 7bc:	88 2e       	mov	r8, r24
 7be:	86 18       	sub	r8, r6
 7c0:	fb 2d       	mov	r31, r11
 7c2:	ff 77       	andi	r31, 0x7F	; 127
 7c4:	3f 2e       	mov	r3, r31
 7c6:	36 fe       	sbrs	r3, 6
 7c8:	0d c0       	rjmp	.+26     	; 0x7e4 <vfprintf+0x2ca>
 7ca:	23 2d       	mov	r18, r3
 7cc:	2e 7f       	andi	r18, 0xFE	; 254
 7ce:	a2 2e       	mov	r10, r18
 7d0:	89 14       	cp	r8, r9
 7d2:	58 f4       	brcc	.+22     	; 0x7ea <vfprintf+0x2d0>
 7d4:	34 fe       	sbrs	r3, 4
 7d6:	0b c0       	rjmp	.+22     	; 0x7ee <vfprintf+0x2d4>
 7d8:	32 fc       	sbrc	r3, 2
 7da:	09 c0       	rjmp	.+18     	; 0x7ee <vfprintf+0x2d4>
 7dc:	83 2d       	mov	r24, r3
 7de:	8e 7e       	andi	r24, 0xEE	; 238
 7e0:	a8 2e       	mov	r10, r24
 7e2:	05 c0       	rjmp	.+10     	; 0x7ee <vfprintf+0x2d4>
 7e4:	b8 2c       	mov	r11, r8
 7e6:	a3 2c       	mov	r10, r3
 7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <vfprintf+0x2d6>
 7ea:	b8 2c       	mov	r11, r8
 7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <vfprintf+0x2d6>
 7ee:	b9 2c       	mov	r11, r9
 7f0:	a4 fe       	sbrs	r10, 4
 7f2:	0f c0       	rjmp	.+30     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7f4:	fe 01       	movw	r30, r28
 7f6:	e8 0d       	add	r30, r8
 7f8:	f1 1d       	adc	r31, r1
 7fa:	80 81       	ld	r24, Z
 7fc:	80 33       	cpi	r24, 0x30	; 48
 7fe:	21 f4       	brne	.+8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 800:	9a 2d       	mov	r25, r10
 802:	99 7e       	andi	r25, 0xE9	; 233
 804:	a9 2e       	mov	r10, r25
 806:	09 c0       	rjmp	.+18     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 808:	a2 fe       	sbrs	r10, 2
 80a:	06 c0       	rjmp	.+12     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 80c:	b3 94       	inc	r11
 80e:	b3 94       	inc	r11
 810:	04 c0       	rjmp	.+8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 812:	8a 2d       	mov	r24, r10
 814:	86 78       	andi	r24, 0x86	; 134
 816:	09 f0       	breq	.+2      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 818:	b3 94       	inc	r11
 81a:	a3 fc       	sbrc	r10, 3
 81c:	11 c0       	rjmp	.+34     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 81e:	a0 fe       	sbrs	r10, 0
 820:	06 c0       	rjmp	.+12     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 822:	b2 14       	cp	r11, r2
 824:	88 f4       	brcc	.+34     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 826:	28 0c       	add	r2, r8
 828:	92 2c       	mov	r9, r2
 82a:	9b 18       	sub	r9, r11
 82c:	0e c0       	rjmp	.+28     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 82e:	b2 14       	cp	r11, r2
 830:	60 f4       	brcc	.+24     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 832:	b6 01       	movw	r22, r12
 834:	80 e2       	ldi	r24, 0x20	; 32
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 84 04 	call	0x908	; 0x908 <fputc>
 83c:	b3 94       	inc	r11
 83e:	f7 cf       	rjmp	.-18     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 840:	b2 14       	cp	r11, r2
 842:	18 f4       	brcc	.+6      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 844:	2b 18       	sub	r2, r11
 846:	02 c0       	rjmp	.+4      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 848:	98 2c       	mov	r9, r8
 84a:	21 2c       	mov	r2, r1
 84c:	a4 fe       	sbrs	r10, 4
 84e:	10 c0       	rjmp	.+32     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 850:	b6 01       	movw	r22, r12
 852:	80 e3       	ldi	r24, 0x30	; 48
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	0e 94 84 04 	call	0x908	; 0x908 <fputc>
 85a:	a2 fe       	sbrs	r10, 2
 85c:	17 c0       	rjmp	.+46     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 85e:	a1 fc       	sbrc	r10, 1
 860:	03 c0       	rjmp	.+6      	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 862:	88 e7       	ldi	r24, 0x78	; 120
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	02 c0       	rjmp	.+4      	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 868:	88 e5       	ldi	r24, 0x58	; 88
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	b6 01       	movw	r22, r12
 86e:	0c c0       	rjmp	.+24     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 870:	8a 2d       	mov	r24, r10
 872:	86 78       	andi	r24, 0x86	; 134
 874:	59 f0       	breq	.+22     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 876:	a1 fe       	sbrs	r10, 1
 878:	02 c0       	rjmp	.+4      	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 87a:	8b e2       	ldi	r24, 0x2B	; 43
 87c:	01 c0       	rjmp	.+2      	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 87e:	80 e2       	ldi	r24, 0x20	; 32
 880:	a7 fc       	sbrc	r10, 7
 882:	8d e2       	ldi	r24, 0x2D	; 45
 884:	b6 01       	movw	r22, r12
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 84 04 	call	0x908	; 0x908 <fputc>
 88c:	89 14       	cp	r8, r9
 88e:	38 f4       	brcc	.+14     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 890:	b6 01       	movw	r22, r12
 892:	80 e3       	ldi	r24, 0x30	; 48
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 84 04 	call	0x908	; 0x908 <fputc>
 89a:	9a 94       	dec	r9
 89c:	f7 cf       	rjmp	.-18     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 89e:	8a 94       	dec	r8
 8a0:	f3 01       	movw	r30, r6
 8a2:	e8 0d       	add	r30, r8
 8a4:	f1 1d       	adc	r31, r1
 8a6:	80 81       	ld	r24, Z
 8a8:	b6 01       	movw	r22, r12
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 94 84 04 	call	0x908	; 0x908 <fputc>
 8b0:	81 10       	cpse	r8, r1
 8b2:	f5 cf       	rjmp	.-22     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 8b4:	22 20       	and	r2, r2
 8b6:	09 f4       	brne	.+2      	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
 8b8:	42 ce       	rjmp	.-892    	; 0x53e <vfprintf+0x24>
 8ba:	b6 01       	movw	r22, r12
 8bc:	80 e2       	ldi	r24, 0x20	; 32
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	0e 94 84 04 	call	0x908	; 0x908 <fputc>
 8c4:	2a 94       	dec	r2
 8c6:	f6 cf       	rjmp	.-20     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 8c8:	f6 01       	movw	r30, r12
 8ca:	86 81       	ldd	r24, Z+6	; 0x06
 8cc:	97 81       	ldd	r25, Z+7	; 0x07
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8d0:	8f ef       	ldi	r24, 0xFF	; 255
 8d2:	9f ef       	ldi	r25, 0xFF	; 255
 8d4:	2b 96       	adiw	r28, 0x0b	; 11
 8d6:	e2 e1       	ldi	r30, 0x12	; 18
 8d8:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__epilogue_restores__>

000008dc <strnlen_P>:
 8dc:	fc 01       	movw	r30, r24
 8de:	05 90       	lpm	r0, Z+
 8e0:	61 50       	subi	r22, 0x01	; 1
 8e2:	70 40       	sbci	r23, 0x00	; 0
 8e4:	01 10       	cpse	r0, r1
 8e6:	d8 f7       	brcc	.-10     	; 0x8de <strnlen_P+0x2>
 8e8:	80 95       	com	r24
 8ea:	90 95       	com	r25
 8ec:	8e 0f       	add	r24, r30
 8ee:	9f 1f       	adc	r25, r31
 8f0:	08 95       	ret

000008f2 <strnlen>:
 8f2:	fc 01       	movw	r30, r24
 8f4:	61 50       	subi	r22, 0x01	; 1
 8f6:	70 40       	sbci	r23, 0x00	; 0
 8f8:	01 90       	ld	r0, Z+
 8fa:	01 10       	cpse	r0, r1
 8fc:	d8 f7       	brcc	.-10     	; 0x8f4 <strnlen+0x2>
 8fe:	80 95       	com	r24
 900:	90 95       	com	r25
 902:	8e 0f       	add	r24, r30
 904:	9f 1f       	adc	r25, r31
 906:	08 95       	ret

00000908 <fputc>:
 908:	0f 93       	push	r16
 90a:	1f 93       	push	r17
 90c:	cf 93       	push	r28
 90e:	df 93       	push	r29
 910:	fb 01       	movw	r30, r22
 912:	23 81       	ldd	r18, Z+3	; 0x03
 914:	21 fd       	sbrc	r18, 1
 916:	03 c0       	rjmp	.+6      	; 0x91e <fputc+0x16>
 918:	8f ef       	ldi	r24, 0xFF	; 255
 91a:	9f ef       	ldi	r25, 0xFF	; 255
 91c:	2c c0       	rjmp	.+88     	; 0x976 <fputc+0x6e>
 91e:	22 ff       	sbrs	r18, 2
 920:	16 c0       	rjmp	.+44     	; 0x94e <fputc+0x46>
 922:	46 81       	ldd	r20, Z+6	; 0x06
 924:	57 81       	ldd	r21, Z+7	; 0x07
 926:	24 81       	ldd	r18, Z+4	; 0x04
 928:	35 81       	ldd	r19, Z+5	; 0x05
 92a:	42 17       	cp	r20, r18
 92c:	53 07       	cpc	r21, r19
 92e:	44 f4       	brge	.+16     	; 0x940 <fputc+0x38>
 930:	a0 81       	ld	r26, Z
 932:	b1 81       	ldd	r27, Z+1	; 0x01
 934:	9d 01       	movw	r18, r26
 936:	2f 5f       	subi	r18, 0xFF	; 255
 938:	3f 4f       	sbci	r19, 0xFF	; 255
 93a:	31 83       	std	Z+1, r19	; 0x01
 93c:	20 83       	st	Z, r18
 93e:	8c 93       	st	X, r24
 940:	26 81       	ldd	r18, Z+6	; 0x06
 942:	37 81       	ldd	r19, Z+7	; 0x07
 944:	2f 5f       	subi	r18, 0xFF	; 255
 946:	3f 4f       	sbci	r19, 0xFF	; 255
 948:	37 83       	std	Z+7, r19	; 0x07
 94a:	26 83       	std	Z+6, r18	; 0x06
 94c:	14 c0       	rjmp	.+40     	; 0x976 <fputc+0x6e>
 94e:	8b 01       	movw	r16, r22
 950:	ec 01       	movw	r28, r24
 952:	fb 01       	movw	r30, r22
 954:	00 84       	ldd	r0, Z+8	; 0x08
 956:	f1 85       	ldd	r31, Z+9	; 0x09
 958:	e0 2d       	mov	r30, r0
 95a:	09 95       	icall
 95c:	89 2b       	or	r24, r25
 95e:	e1 f6       	brne	.-72     	; 0x918 <fputc+0x10>
 960:	d8 01       	movw	r26, r16
 962:	16 96       	adiw	r26, 0x06	; 6
 964:	8d 91       	ld	r24, X+
 966:	9c 91       	ld	r25, X
 968:	17 97       	sbiw	r26, 0x07	; 7
 96a:	01 96       	adiw	r24, 0x01	; 1
 96c:	17 96       	adiw	r26, 0x07	; 7
 96e:	9c 93       	st	X, r25
 970:	8e 93       	st	-X, r24
 972:	16 97       	sbiw	r26, 0x06	; 6
 974:	ce 01       	movw	r24, r28
 976:	df 91       	pop	r29
 978:	cf 91       	pop	r28
 97a:	1f 91       	pop	r17
 97c:	0f 91       	pop	r16
 97e:	08 95       	ret

00000980 <__ultoa_invert>:
 980:	fa 01       	movw	r30, r20
 982:	aa 27       	eor	r26, r26
 984:	28 30       	cpi	r18, 0x08	; 8
 986:	51 f1       	breq	.+84     	; 0x9dc <__ultoa_invert+0x5c>
 988:	20 31       	cpi	r18, 0x10	; 16
 98a:	81 f1       	breq	.+96     	; 0x9ec <__ultoa_invert+0x6c>
 98c:	e8 94       	clt
 98e:	6f 93       	push	r22
 990:	6e 7f       	andi	r22, 0xFE	; 254
 992:	6e 5f       	subi	r22, 0xFE	; 254
 994:	7f 4f       	sbci	r23, 0xFF	; 255
 996:	8f 4f       	sbci	r24, 0xFF	; 255
 998:	9f 4f       	sbci	r25, 0xFF	; 255
 99a:	af 4f       	sbci	r26, 0xFF	; 255
 99c:	b1 e0       	ldi	r27, 0x01	; 1
 99e:	3e d0       	rcall	.+124    	; 0xa1c <__ultoa_invert+0x9c>
 9a0:	b4 e0       	ldi	r27, 0x04	; 4
 9a2:	3c d0       	rcall	.+120    	; 0xa1c <__ultoa_invert+0x9c>
 9a4:	67 0f       	add	r22, r23
 9a6:	78 1f       	adc	r23, r24
 9a8:	89 1f       	adc	r24, r25
 9aa:	9a 1f       	adc	r25, r26
 9ac:	a1 1d       	adc	r26, r1
 9ae:	68 0f       	add	r22, r24
 9b0:	79 1f       	adc	r23, r25
 9b2:	8a 1f       	adc	r24, r26
 9b4:	91 1d       	adc	r25, r1
 9b6:	a1 1d       	adc	r26, r1
 9b8:	6a 0f       	add	r22, r26
 9ba:	71 1d       	adc	r23, r1
 9bc:	81 1d       	adc	r24, r1
 9be:	91 1d       	adc	r25, r1
 9c0:	a1 1d       	adc	r26, r1
 9c2:	20 d0       	rcall	.+64     	; 0xa04 <__ultoa_invert+0x84>
 9c4:	09 f4       	brne	.+2      	; 0x9c8 <__ultoa_invert+0x48>
 9c6:	68 94       	set
 9c8:	3f 91       	pop	r19
 9ca:	2a e0       	ldi	r18, 0x0A	; 10
 9cc:	26 9f       	mul	r18, r22
 9ce:	11 24       	eor	r1, r1
 9d0:	30 19       	sub	r19, r0
 9d2:	30 5d       	subi	r19, 0xD0	; 208
 9d4:	31 93       	st	Z+, r19
 9d6:	de f6       	brtc	.-74     	; 0x98e <__ultoa_invert+0xe>
 9d8:	cf 01       	movw	r24, r30
 9da:	08 95       	ret
 9dc:	46 2f       	mov	r20, r22
 9de:	47 70       	andi	r20, 0x07	; 7
 9e0:	40 5d       	subi	r20, 0xD0	; 208
 9e2:	41 93       	st	Z+, r20
 9e4:	b3 e0       	ldi	r27, 0x03	; 3
 9e6:	0f d0       	rcall	.+30     	; 0xa06 <__ultoa_invert+0x86>
 9e8:	c9 f7       	brne	.-14     	; 0x9dc <__ultoa_invert+0x5c>
 9ea:	f6 cf       	rjmp	.-20     	; 0x9d8 <__ultoa_invert+0x58>
 9ec:	46 2f       	mov	r20, r22
 9ee:	4f 70       	andi	r20, 0x0F	; 15
 9f0:	40 5d       	subi	r20, 0xD0	; 208
 9f2:	4a 33       	cpi	r20, 0x3A	; 58
 9f4:	18 f0       	brcs	.+6      	; 0x9fc <__ultoa_invert+0x7c>
 9f6:	49 5d       	subi	r20, 0xD9	; 217
 9f8:	31 fd       	sbrc	r19, 1
 9fa:	40 52       	subi	r20, 0x20	; 32
 9fc:	41 93       	st	Z+, r20
 9fe:	02 d0       	rcall	.+4      	; 0xa04 <__ultoa_invert+0x84>
 a00:	a9 f7       	brne	.-22     	; 0x9ec <__ultoa_invert+0x6c>
 a02:	ea cf       	rjmp	.-44     	; 0x9d8 <__ultoa_invert+0x58>
 a04:	b4 e0       	ldi	r27, 0x04	; 4
 a06:	a6 95       	lsr	r26
 a08:	97 95       	ror	r25
 a0a:	87 95       	ror	r24
 a0c:	77 95       	ror	r23
 a0e:	67 95       	ror	r22
 a10:	ba 95       	dec	r27
 a12:	c9 f7       	brne	.-14     	; 0xa06 <__ultoa_invert+0x86>
 a14:	00 97       	sbiw	r24, 0x00	; 0
 a16:	61 05       	cpc	r22, r1
 a18:	71 05       	cpc	r23, r1
 a1a:	08 95       	ret
 a1c:	9b 01       	movw	r18, r22
 a1e:	ac 01       	movw	r20, r24
 a20:	0a 2e       	mov	r0, r26
 a22:	06 94       	lsr	r0
 a24:	57 95       	ror	r21
 a26:	47 95       	ror	r20
 a28:	37 95       	ror	r19
 a2a:	27 95       	ror	r18
 a2c:	ba 95       	dec	r27
 a2e:	c9 f7       	brne	.-14     	; 0xa22 <__ultoa_invert+0xa2>
 a30:	62 0f       	add	r22, r18
 a32:	73 1f       	adc	r23, r19
 a34:	84 1f       	adc	r24, r20
 a36:	95 1f       	adc	r25, r21
 a38:	a0 1d       	adc	r26, r0
 a3a:	08 95       	ret

00000a3c <__prologue_saves__>:
 a3c:	2f 92       	push	r2
 a3e:	3f 92       	push	r3
 a40:	4f 92       	push	r4
 a42:	5f 92       	push	r5
 a44:	6f 92       	push	r6
 a46:	7f 92       	push	r7
 a48:	8f 92       	push	r8
 a4a:	9f 92       	push	r9
 a4c:	af 92       	push	r10
 a4e:	bf 92       	push	r11
 a50:	cf 92       	push	r12
 a52:	df 92       	push	r13
 a54:	ef 92       	push	r14
 a56:	ff 92       	push	r15
 a58:	0f 93       	push	r16
 a5a:	1f 93       	push	r17
 a5c:	cf 93       	push	r28
 a5e:	df 93       	push	r29
 a60:	cd b7       	in	r28, 0x3d	; 61
 a62:	de b7       	in	r29, 0x3e	; 62
 a64:	ca 1b       	sub	r28, r26
 a66:	db 0b       	sbc	r29, r27
 a68:	0f b6       	in	r0, 0x3f	; 63
 a6a:	f8 94       	cli
 a6c:	de bf       	out	0x3e, r29	; 62
 a6e:	0f be       	out	0x3f, r0	; 63
 a70:	cd bf       	out	0x3d, r28	; 61
 a72:	09 94       	ijmp

00000a74 <__epilogue_restores__>:
 a74:	2a 88       	ldd	r2, Y+18	; 0x12
 a76:	39 88       	ldd	r3, Y+17	; 0x11
 a78:	48 88       	ldd	r4, Y+16	; 0x10
 a7a:	5f 84       	ldd	r5, Y+15	; 0x0f
 a7c:	6e 84       	ldd	r6, Y+14	; 0x0e
 a7e:	7d 84       	ldd	r7, Y+13	; 0x0d
 a80:	8c 84       	ldd	r8, Y+12	; 0x0c
 a82:	9b 84       	ldd	r9, Y+11	; 0x0b
 a84:	aa 84       	ldd	r10, Y+10	; 0x0a
 a86:	b9 84       	ldd	r11, Y+9	; 0x09
 a88:	c8 84       	ldd	r12, Y+8	; 0x08
 a8a:	df 80       	ldd	r13, Y+7	; 0x07
 a8c:	ee 80       	ldd	r14, Y+6	; 0x06
 a8e:	fd 80       	ldd	r15, Y+5	; 0x05
 a90:	0c 81       	ldd	r16, Y+4	; 0x04
 a92:	1b 81       	ldd	r17, Y+3	; 0x03
 a94:	aa 81       	ldd	r26, Y+2	; 0x02
 a96:	b9 81       	ldd	r27, Y+1	; 0x01
 a98:	ce 0f       	add	r28, r30
 a9a:	d1 1d       	adc	r29, r1
 a9c:	0f b6       	in	r0, 0x3f	; 63
 a9e:	f8 94       	cli
 aa0:	de bf       	out	0x3e, r29	; 62
 aa2:	0f be       	out	0x3f, r0	; 63
 aa4:	cd bf       	out	0x3d, r28	; 61
 aa6:	ed 01       	movw	r28, r26
 aa8:	08 95       	ret

00000aaa <_exit>:
 aaa:	f8 94       	cli

00000aac <__stop_program>:
 aac:	ff cf       	rjmp	.-2      	; 0xaac <__stop_program>
