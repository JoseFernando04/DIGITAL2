
LAB1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002c2  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  00000360  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a3c  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000078f  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004df  00000000  00000000  000015f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000464  00000000  00000000  00001b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d2  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000021aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 02 01 	call	0x204	; 0x204 <main>
  9e:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <mostrar_display>:

// LEDs jugador 1: PB3, PB4, PB5, PC0
// LEDs jugador 2: PC1, PC2, PC3, PC4

void mostrar_display(uint8_t valor) {
	if (valor > 9) return;
  a6:	8a 30       	cpi	r24, 0x0A	; 10
  a8:	30 f4       	brcc	.+12     	; 0xb6 <mostrar_display+0x10>
	PORTD = numeros[valor];  // PD0–PD6 (a–g)
  aa:	e8 2f       	mov	r30, r24
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	e0 50       	subi	r30, 0x00	; 0
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	80 81       	ld	r24, Z
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	08 95       	ret

000000b8 <apagar_display>:
}

void apagar_display(void) {
	PORTD = 0x00;
  b8:	1b b8       	out	0x0b, r1	; 11
  ba:	08 95       	ret

000000bc <encender_leds_jugador1>:
}

// Enciende LEDs de jugador 1 en modo "de décadas" (uno a uno, máximo 4)
void encender_leds_jugador1(uint8_t valor) {
	// Apaga todos
	PORTB &= ~((1 << PB3)|(1 << PB4)|(1 << PB5));
  bc:	95 b1       	in	r25, 0x05	; 5
  be:	97 7c       	andi	r25, 0xC7	; 199
  c0:	95 b9       	out	0x05, r25	; 5
	PORTC &= ~(1 << PC0);
  c2:	98 b1       	in	r25, 0x08	; 8
  c4:	9e 7f       	andi	r25, 0xFE	; 254
  c6:	98 b9       	out	0x08, r25	; 8

	// De 1 a 4: enciende progresivamente, de 5 a 9: todos encendidos
	uint8_t leds = (valor > 4) ? 4 : valor;
  c8:	85 30       	cpi	r24, 0x05	; 5
  ca:	08 f0       	brcs	.+2      	; 0xce <encender_leds_jugador1+0x12>
  cc:	84 e0       	ldi	r24, 0x04	; 4
	if (leds >= 1) PORTB |= (1 << PB3);
  ce:	88 23       	and	r24, r24
  d0:	19 f0       	breq	.+6      	; 0xd8 <encender_leds_jugador1+0x1c>
  d2:	95 b1       	in	r25, 0x05	; 5
  d4:	98 60       	ori	r25, 0x08	; 8
  d6:	95 b9       	out	0x05, r25	; 5
	if (leds >= 2) PORTB |= (1 << PB4);
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	18 f0       	brcs	.+6      	; 0xe2 <encender_leds_jugador1+0x26>
  dc:	95 b1       	in	r25, 0x05	; 5
  de:	90 61       	ori	r25, 0x10	; 16
  e0:	95 b9       	out	0x05, r25	; 5
	if (leds >= 3) PORTB |= (1 << PB5);
  e2:	83 30       	cpi	r24, 0x03	; 3
  e4:	18 f0       	brcs	.+6      	; 0xec <encender_leds_jugador1+0x30>
  e6:	95 b1       	in	r25, 0x05	; 5
  e8:	90 62       	ori	r25, 0x20	; 32
  ea:	95 b9       	out	0x05, r25	; 5
	if (leds == 4) PORTC |= (1 << PC0);
  ec:	84 30       	cpi	r24, 0x04	; 4
  ee:	19 f4       	brne	.+6      	; 0xf6 <encender_leds_jugador1+0x3a>
  f0:	88 b1       	in	r24, 0x08	; 8
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	88 b9       	out	0x08, r24	; 8
  f6:	08 95       	ret

000000f8 <encender_leds_jugador2>:
}

// Enciende LEDs de jugador 2 en modo "de décadas" (uno a uno, máximo 4)
void encender_leds_jugador2(uint8_t valor) {
	// Apaga todos
	PORTC &= ~((1 << PC1)|(1 << PC2)|(1 << PC3)|(1 << PC4));
  f8:	98 b1       	in	r25, 0x08	; 8
  fa:	91 7e       	andi	r25, 0xE1	; 225
  fc:	98 b9       	out	0x08, r25	; 8

	// De 1 a 4: enciende progresivamente, de 5 a 9: todos encendidos
	uint8_t leds = (valor > 4) ? 4 : valor;
  fe:	85 30       	cpi	r24, 0x05	; 5
 100:	08 f0       	brcs	.+2      	; 0x104 <encender_leds_jugador2+0xc>
 102:	84 e0       	ldi	r24, 0x04	; 4
	if (leds >= 1) PORTC |= (1 << PC1);
 104:	88 23       	and	r24, r24
 106:	19 f0       	breq	.+6      	; 0x10e <encender_leds_jugador2+0x16>
 108:	98 b1       	in	r25, 0x08	; 8
 10a:	92 60       	ori	r25, 0x02	; 2
 10c:	98 b9       	out	0x08, r25	; 8
	if (leds >= 2) PORTC |= (1 << PC2);
 10e:	82 30       	cpi	r24, 0x02	; 2
 110:	18 f0       	brcs	.+6      	; 0x118 <encender_leds_jugador2+0x20>
 112:	98 b1       	in	r25, 0x08	; 8
 114:	94 60       	ori	r25, 0x04	; 4
 116:	98 b9       	out	0x08, r25	; 8
	if (leds >= 3) PORTC |= (1 << PC3);
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	18 f0       	brcs	.+6      	; 0x122 <encender_leds_jugador2+0x2a>
 11c:	98 b1       	in	r25, 0x08	; 8
 11e:	98 60       	ori	r25, 0x08	; 8
 120:	98 b9       	out	0x08, r25	; 8
	if (leds == 4) PORTC |= (1 << PC4);
 122:	84 30       	cpi	r24, 0x04	; 4
 124:	19 f4       	brne	.+6      	; 0x12c <encender_leds_jugador2+0x34>
 126:	88 b1       	in	r24, 0x08	; 8
 128:	80 61       	ori	r24, 0x10	; 16
 12a:	88 b9       	out	0x08, r24	; 8
 12c:	08 95       	ret

0000012e <refrescar_leds>:
}

void refrescar_leds() {
	encender_leds_jugador1(contadorJ1);
 12e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <contadorJ1>
 132:	0e 94 5e 00 	call	0xbc	; 0xbc <encender_leds_jugador1>
	encender_leds_jugador2(contadorJ2);
 136:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <contadorJ2>
 13a:	0e 94 7c 00 	call	0xf8	; 0xf8 <encender_leds_jugador2>
 13e:	08 95       	ret

00000140 <iniciar_carrera>:
}

void iniciar_carrera() {
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
	// Apagar LEDs y reiniciar
	juegoActivo = false;
 144:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
	contadorJ1 = 0;
 148:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <contadorJ1>
	contadorJ2 = 0;
 14c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <contadorJ2>
	encender_leds_jugador1(0);
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 5e 00 	call	0xbc	; 0xbc <encender_leds_jugador1>
	encender_leds_jugador2(0);
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 7c 00 	call	0xf8	; 0xf8 <encender_leds_jugador2>
	mostrar_display(0); // evitar residuo visual
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 53 00 	call	0xa6	; 0xa6 <mostrar_display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	85 ea       	ldi	r24, 0xA5	; 165
 166:	9e e0       	ldi	r25, 0x0E	; 14
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <iniciar_carrera+0x28>
 170:	00 c0       	rjmp	.+0      	; 0x172 <iniciar_carrera+0x32>
 172:	00 00       	nop
	_delay_ms(300);

	// Conteo regresivo
	for (int i = 5; i >= 0; i--) {
 174:	c5 e0       	ldi	r28, 0x05	; 5
 176:	d0 e0       	ldi	r29, 0x00	; 0
 178:	0d c0       	rjmp	.+26     	; 0x194 <iniciar_carrera+0x54>
		mostrar_display(i);
 17a:	8c 2f       	mov	r24, r28
 17c:	0e 94 53 00 	call	0xa6	; 0xa6 <mostrar_display>
 180:	2f ef       	ldi	r18, 0xFF	; 255
 182:	83 ed       	ldi	r24, 0xD3	; 211
 184:	90 e3       	ldi	r25, 0x30	; 48
 186:	21 50       	subi	r18, 0x01	; 1
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <iniciar_carrera+0x46>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <iniciar_carrera+0x50>
 190:	00 00       	nop
	encender_leds_jugador2(0);
	mostrar_display(0); // evitar residuo visual
	_delay_ms(300);

	// Conteo regresivo
	for (int i = 5; i >= 0; i--) {
 192:	21 97       	sbiw	r28, 0x01	; 1
 194:	dd 23       	and	r29, r29
 196:	8c f7       	brge	.-30     	; 0x17a <iniciar_carrera+0x3a>
		mostrar_display(i);
		_delay_ms(1000);
	}

	apagar_display();
 198:	0e 94 5c 00 	call	0xb8	; 0xb8 <apagar_display>
	juegoActivo = true;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <leer_boton>:

bool leer_boton(uint8_t pin) {
	if (!(PINB & (1 << pin))) {
 1a8:	23 b1       	in	r18, 0x03	; 3
 1aa:	48 2f       	mov	r20, r24
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	08 2e       	mov	r0, r24
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <leer_boton+0xe>
 1b2:	35 95       	asr	r19
 1b4:	27 95       	ror	r18
 1b6:	0a 94       	dec	r0
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <leer_boton+0xa>
 1ba:	20 fd       	sbrc	r18, 0
 1bc:	1f c0       	rjmp	.+62     	; 0x1fc <leer_boton+0x54>
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	39 ef       	ldi	r19, 0xF9	; 249
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	30 40       	sbci	r19, 0x00	; 0
 1c8:	60 40       	sbci	r22, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <leer_boton+0x1c>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <leer_boton+0x26>
 1ce:	00 00       	nop
		_delay_ms(20); // debounce
		if (!(PINB & (1 << pin))) {
 1d0:	23 b1       	in	r18, 0x03	; 3
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	b9 01       	movw	r22, r18
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <leer_boton+0x34>
 1d8:	75 95       	asr	r23
 1da:	67 95       	ror	r22
 1dc:	8a 95       	dec	r24
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <leer_boton+0x30>
 1e0:	60 fd       	sbrc	r22, 0
 1e2:	0e c0       	rjmp	.+28     	; 0x200 <leer_boton+0x58>
			while (!(PINB & (1 << pin))); // espera a soltar
 1e4:	83 b1       	in	r24, 0x03	; 3
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	04 2e       	mov	r0, r20
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <leer_boton+0x48>
 1ec:	95 95       	asr	r25
 1ee:	87 95       	ror	r24
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <leer_boton+0x44>
 1f4:	80 ff       	sbrs	r24, 0
 1f6:	f6 cf       	rjmp	.-20     	; 0x1e4 <leer_boton+0x3c>
			return true;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	08 95       	ret
		}
	}
	return false;
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	08 95       	ret
 200:	80 e0       	ldi	r24, 0x00	; 0
}
 202:	08 95       	ret

00000204 <main>:

int main(void)
{
	// Display: PD0–PD6 como salida
	DDRD = 0b01111111;
 204:	8f e7       	ldi	r24, 0x7F	; 127
 206:	8a b9       	out	0x0a, r24	; 10

	// LEDs: PB3, PB4, PB5 como salida
	DDRB |= (1 << PB3)|(1 << PB4)|(1 << PB5);
 208:	84 b1       	in	r24, 0x04	; 4
 20a:	88 63       	ori	r24, 0x38	; 56
 20c:	84 b9       	out	0x04, r24	; 4
	// LEDs: PC0, PC1, PC2, PC3, PC4 como salida
	DDRC |= (1 << PC0)|(1 << PC1)|(1 << PC2)|(1 << PC3)|(1 << PC4);
 20e:	87 b1       	in	r24, 0x07	; 7
 210:	8f 61       	ori	r24, 0x1F	; 31
 212:	87 b9       	out	0x07, r24	; 7

	// Botones PB0, PB1, PB2 como entrada con pull-up
	DDRB &= ~((1 << BTN_INICIO)|(1 << BTN_J1)|(1 << BTN_J2));
 214:	84 b1       	in	r24, 0x04	; 4
 216:	88 7f       	andi	r24, 0xF8	; 248
 218:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << BTN_INICIO)|(1 << BTN_J1)|(1 << BTN_J2);
 21a:	85 b1       	in	r24, 0x05	; 5
 21c:	87 60       	ori	r24, 0x07	; 7
 21e:	85 b9       	out	0x05, r24	; 5

	while (1)
	{
		if (leer_boton(BTN_INICIO) && !juegoActivo) {
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <leer_boton>
 226:	88 23       	and	r24, r24
 228:	31 f0       	breq	.+12     	; 0x236 <main+0x32>
 22a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 22e:	81 11       	cpse	r24, r1
 230:	02 c0       	rjmp	.+4      	; 0x236 <main+0x32>
			iniciar_carrera();
 232:	0e 94 a0 00 	call	0x140	; 0x140 <iniciar_carrera>
		}

		if (juegoActivo) {
 236:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 23a:	88 23       	and	r24, r24
 23c:	c1 f0       	breq	.+48     	; 0x26e <main+0x6a>
			if (leer_boton(BTN_J1) && contadorJ1 < 9) {
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <leer_boton>
 244:	88 23       	and	r24, r24
 246:	39 f0       	breq	.+14     	; 0x256 <main+0x52>
 248:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <contadorJ1>
 24c:	89 30       	cpi	r24, 0x09	; 9
 24e:	18 f4       	brcc	.+6      	; 0x256 <main+0x52>
				contadorJ1++;
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <contadorJ1>
			}
			if (leer_boton(BTN_J2) && contadorJ2 < 9) {
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <leer_boton>
 25c:	88 23       	and	r24, r24
 25e:	39 f0       	breq	.+14     	; 0x26e <main+0x6a>
 260:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <contadorJ2>
 264:	89 30       	cpi	r24, 0x09	; 9
 266:	18 f4       	brcc	.+6      	; 0x26e <main+0x6a>
				contadorJ2++;
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <contadorJ2>
			}
		}

		if (contadorJ1 == 9) {
 26e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <contadorJ1>
 272:	89 30       	cpi	r24, 0x09	; 9
 274:	61 f4       	brne	.+24     	; 0x28e <main+0x8a>
			mostrar_display(1); // Jugador 1 gana
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 53 00 	call	0xa6	; 0xa6 <mostrar_display>
			encender_leds_jugador1(4); // Enciende todos los LEDs jugador 1
 27c:	84 e0       	ldi	r24, 0x04	; 4
 27e:	0e 94 5e 00 	call	0xbc	; 0xbc <encender_leds_jugador1>
			encender_leds_jugador2(0); // Apaga los de jugador 2
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 7c 00 	call	0xf8	; 0xf8 <encender_leds_jugador2>
			juegoActivo = false;
 288:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 28c:	15 c0       	rjmp	.+42     	; 0x2b8 <main+0xb4>
			} else if (contadorJ2 == 9) {
 28e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <contadorJ2>
 292:	89 30       	cpi	r24, 0x09	; 9
 294:	61 f4       	brne	.+24     	; 0x2ae <main+0xaa>
			mostrar_display(2); // Jugador 2 gana
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	0e 94 53 00 	call	0xa6	; 0xa6 <mostrar_display>
			encender_leds_jugador2(4); // Enciende todos los LEDs jugador 2
 29c:	84 e0       	ldi	r24, 0x04	; 4
 29e:	0e 94 7c 00 	call	0xf8	; 0xf8 <encender_leds_jugador2>
			encender_leds_jugador1(0); // Apaga los de jugador 1
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 5e 00 	call	0xbc	; 0xbc <encender_leds_jugador1>
			juegoActivo = false;
 2a8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <main+0xb4>
			} else if (juegoActivo) {
 2ae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 2b2:	81 11       	cpse	r24, r1
			apagar_display(); // Display apagado durante la carrera
 2b4:	0e 94 5c 00 	call	0xb8	; 0xb8 <apagar_display>
		}

		refrescar_leds();
 2b8:	0e 94 97 00 	call	0x12e	; 0x12e <refrescar_leds>
	}
 2bc:	b1 cf       	rjmp	.-158    	; 0x220 <main+0x1c>

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
