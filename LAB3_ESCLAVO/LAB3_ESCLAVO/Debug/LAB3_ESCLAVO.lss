
LAB3_ESCLAVO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000be9  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090b  00000000  00000000  00000f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000646  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00001e70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d1  00000000  00000000  00001f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000261  00000000  00000000  00002445  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000026a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  78:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <adc_read>:
}

// Leer valor del ADC en el canal especificado
uint16_t adc_read(uint8_t channel) {
	// Verificar que el canal sea válido (0-7)
	if(channel > 7) return 0;
  80:	88 30       	cpi	r24, 0x08	; 8
  82:	c8 f4       	brcc	.+50     	; 0xb6 <adc_read+0x36>
	
	// Seleccionar canal manteniendo la configuración de referencia
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
  84:	ec e7       	ldi	r30, 0x7C	; 124
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	90 81       	ld	r25, Z
  8a:	90 7f       	andi	r25, 0xF0	; 240
  8c:	8f 70       	andi	r24, 0x0F	; 15
  8e:	89 2b       	or	r24, r25
  90:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	85 e3       	ldi	r24, 0x35	; 53
  94:	8a 95       	dec	r24
  96:	f1 f7       	brne	.-4      	; 0x94 <adc_read+0x14>
  98:	00 00       	nop
	
	// Esperar un poco para que se estabilice la selección del canal
	_delay_us(10);
	
	// Iniciar conversión
	ADCSRA |= (1 << ADSC);
  9a:	ea e7       	ldi	r30, 0x7A	; 122
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	80 83       	st	Z, r24
	
	// Esperar a que termine la conversión
	while(ADCSRA & (1 << ADSC));
  a4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  a8:	86 fd       	sbrc	r24, 6
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <adc_read+0x24>
	
	// Retornar el resultado (registro ADC de 16 bits, pero solo 10 bits útiles)
	return ADC;
  ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  b0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  b4:	08 95       	ret
}

// Leer valor del ADC en el canal especificado
uint16_t adc_read(uint8_t channel) {
	// Verificar que el canal sea válido (0-7)
	if(channel > 7) return 0;
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
	// Esperar a que termine la conversión
	while(ADCSRA & (1 << ADSC));
	
	// Retornar el resultado (registro ADC de 16 bits, pero solo 10 bits útiles)
	return ADC;
}
  ba:	08 95       	ret

000000bc <adc_init>:

// Inicializar el ADC
void adc_init(void) {
	// Configurar referencia de voltaje (AVCC con capacitor externo en AREF)
	// REFS1 = 0, REFS0 = 1 -> AVCC como referencia
	ADMUX = (1 << REFS0);
  bc:	80 e4       	ldi	r24, 0x40	; 64
  be:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	
	// Habilitar ADC y configurar prescaler
	// Para 16MHz, prescaler de 128 da frecuencia ADC de 125kHz (óptima)
	// ADEN = 1 (habilitar ADC)
	// ADPS2:0 = 111 (prescaler 128)
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  c2:	87 e8       	ldi	r24, 0x87	; 135
  c4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	
	// Realizar una conversión dummy para estabilizar el ADC
	adc_read(0);
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 40 00 	call	0x80	; 0x80 <adc_read>
  ce:	08 95       	ret

000000d0 <display_leds_slave>:
#include "spi_simple.h"
#include "adc.h"

// Función para mostrar número en LEDs (Puerto D completo)
void display_leds_slave(uint8_t number) {
	PORTD = number;
  d0:	8b b9       	out	0x0b, r24	; 11
  d2:	08 95       	ret

000000d4 <leds_init_slave>:
}

// Función para inicializar LEDs del esclavo
void leds_init_slave(void) {
	DDRD = 0xFF;  // Puerto D completo como salida para LEDs
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00; // Inicializar LEDs apagados
  d8:	1b b8       	out	0x0b, r1	; 11
  da:	08 95       	ret

000000dc <startup_pattern>:
}

// Patrón de inicio para verificar funcionamiento
void startup_pattern(void) {
  dc:	cf 93       	push	r28
	for(uint8_t i = 0; i < 3; i++) {
  de:	c0 e0       	ldi	r28, 0x00	; 0
  e0:	19 c0       	rjmp	.+50     	; 0x114 <startup_pattern+0x38>
		display_leds_slave(0xFF);
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	0e 94 68 00 	call	0xd0	; 0xd0 <display_leds_slave>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	83 ec       	ldi	r24, 0xC3	; 195
  ec:	99 e0       	ldi	r25, 0x09	; 9
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <startup_pattern+0x12>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <startup_pattern+0x1c>
  f8:	00 00       	nop
		_delay_ms(200);
		display_leds_slave(0x00);
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	0e 94 68 00 	call	0xd0	; 0xd0 <display_leds_slave>
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	83 ec       	ldi	r24, 0xC3	; 195
 104:	99 e0       	ldi	r25, 0x09	; 9
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <startup_pattern+0x2a>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <startup_pattern+0x34>
 110:	00 00       	nop
	PORTD = 0x00; // Inicializar LEDs apagados
}

// Patrón de inicio para verificar funcionamiento
void startup_pattern(void) {
	for(uint8_t i = 0; i < 3; i++) {
 112:	cf 5f       	subi	r28, 0xFF	; 255
 114:	c3 30       	cpi	r28, 0x03	; 3
 116:	28 f3       	brcs	.-54     	; 0xe2 <startup_pattern+0x6>
		display_leds_slave(0xFF);
		_delay_ms(200);
		display_leds_slave(0x00);
		_delay_ms(200);
	}
}
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <main>:

int main(void) {
	uint8_t command, data;
	
	// Inicializar periféricos
	spi_slave_init();
 11c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <spi_slave_init>
	adc_init();
 120:	0e 94 5e 00 	call	0xbc	; 0xbc <adc_init>
	leds_init_slave();
 124:	0e 94 6a 00 	call	0xd4	; 0xd4 <leds_init_slave>
	
	// Patrón de inicio
	startup_pattern();
 128:	0e 94 6e 00 	call	0xdc	; 0xdc <startup_pattern>
	
	while(1) {
		// Esperar comando del maestro
		if(spi_data_ready()) {
 12c:	0e 94 df 00 	call	0x1be	; 0x1be <spi_data_ready>
 130:	88 23       	and	r24, r24
 132:	a9 f1       	breq	.+106    	; 0x19e <main+0x82>
			command = SPDR;  // Leer comando
 134:	8e b5       	in	r24, 0x2e	; 46
			
			switch(command) {
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	19 f0       	breq	.+6      	; 0x140 <main+0x24>
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	49 f0       	breq	.+18     	; 0x150 <main+0x34>
 13e:	2f c0       	rjmp	.+94     	; 0x19e <main+0x82>
				case 0x01:  // Comando: Modo LED
				// Esperar el dato (número para mostrar en LEDs)
				while(!spi_data_ready());
 140:	0e 94 df 00 	call	0x1be	; 0x1be <spi_data_ready>
 144:	88 23       	and	r24, r24
 146:	e1 f3       	breq	.-8      	; 0x140 <main+0x24>
				data = SPDR;
 148:	8e b5       	in	r24, 0x2e	; 46
				display_leds_slave(data);
 14a:	0e 94 68 00 	call	0xd0	; 0xd0 <display_leds_slave>
				break;
 14e:	27 c0       	rjmp	.+78     	; 0x19e <main+0x82>
				
				case 0x02:  // Comando: Leer potenciómetros
				{
					// Leer potenciómetros
					uint16_t pot1 = adc_read(ADC_CHANNEL_0);  // A0
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 40 00 	call	0x80	; 0x80 <adc_read>
 156:	8c 01       	movw	r16, r24
					uint16_t pot2 = adc_read(ADC_CHANNEL_1);  // A1
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 40 00 	call	0x80	; 0x80 <adc_read>
 15e:	ec 01       	movw	r28, r24
					
					// Esperar a que el maestro solicite los datos
					// El maestro enviará bytes dummy para recibir los datos
					
					// Enviar POT1 (high byte)
					while(!spi_data_ready());
 160:	0e 94 df 00 	call	0x1be	; 0x1be <spi_data_ready>
 164:	88 23       	and	r24, r24
 166:	e1 f3       	breq	.-8      	; 0x160 <main+0x44>
					SPDR = (pot1 >> 8) & 0xFF;
 168:	1e bd       	out	0x2e, r17	; 46
					while(!spi_data_ready());
 16a:	0e 94 df 00 	call	0x1be	; 0x1be <spi_data_ready>
 16e:	88 23       	and	r24, r24
 170:	e1 f3       	breq	.-8      	; 0x16a <main+0x4e>
					
					// Enviar POT1 (low byte)
					SPDR = pot1 & 0xFF;
 172:	0e bd       	out	0x2e, r16	; 46
					while(!spi_data_ready());
 174:	0e 94 df 00 	call	0x1be	; 0x1be <spi_data_ready>
 178:	88 23       	and	r24, r24
 17a:	e1 f3       	breq	.-8      	; 0x174 <main+0x58>
					
					// Enviar POT2 (high byte)
					SPDR = (pot2 >> 8) & 0xFF;
 17c:	de bd       	out	0x2e, r29	; 46
					while(!spi_data_ready());
 17e:	0e 94 df 00 	call	0x1be	; 0x1be <spi_data_ready>
 182:	88 23       	and	r24, r24
 184:	e1 f3       	breq	.-8      	; 0x17e <main+0x62>
					
					// Enviar POT2 (low byte)
					SPDR = pot2 & 0xFF;
 186:	ce bd       	out	0x2e, r28	; 46
					
					// Mostrar valores en LEDs (promedio de ambos potenciómetros)
					uint8_t avg = ((pot1 + pot2) / 2) >> 2;  // Escalar a 8 bits
 188:	c8 01       	movw	r24, r16
 18a:	8c 0f       	add	r24, r28
 18c:	9d 1f       	adc	r25, r29
 18e:	96 95       	lsr	r25
 190:	87 95       	ror	r24
 192:	96 95       	lsr	r25
 194:	87 95       	ror	r24
 196:	96 95       	lsr	r25
 198:	87 95       	ror	r24
					display_leds_slave(avg);
 19a:	0e 94 68 00 	call	0xd0	; 0xd0 <display_leds_slave>
 19e:	8f e3       	ldi	r24, 0x3F	; 63
 1a0:	9c e9       	ldi	r25, 0x9C	; 156
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x86>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x8c>
 1a8:	00 00       	nop
 1aa:	c0 cf       	rjmp	.-128    	; 0x12c <main+0x10>

000001ac <spi_slave_init>:

uint8_t spi_transceive(uint8_t data) {
	SPDR = data;                        // Enviar dato
	while (!(SPSR & (1 << SPIF)));      // Esperar a que termine
	return SPDR;                        // Retornar dato recibido
}
 1ac:	84 b1       	in	r24, 0x04	; 4
 1ae:	80 61       	ori	r24, 0x10	; 16
 1b0:	84 b9       	out	0x04, r24	; 4
 1b2:	84 b1       	in	r24, 0x04	; 4
 1b4:	83 7d       	andi	r24, 0xD3	; 211
 1b6:	84 b9       	out	0x04, r24	; 4
 1b8:	80 e4       	ldi	r24, 0x40	; 64
 1ba:	8c bd       	out	0x2c, r24	; 44
 1bc:	08 95       	ret

000001be <spi_data_ready>:

uint8_t spi_data_ready(void) {
	return (SPSR & (1 << SPIF));        // Verificar si hay dato listo
 1be:	8d b5       	in	r24, 0x2d	; 45
 1c0:	80 78       	andi	r24, 0x80	; 128
 1c2:	08 95       	ret

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
