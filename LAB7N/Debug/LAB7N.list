
LAB7N.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079cc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  08007b9c  08007b9c  00008b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082e8  080082e8  0000a074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080082e8  080082e8  000092e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082f0  080082f0  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082f0  080082f0  000092f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082f4  080082f4  000092f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080082f8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000288c  20000074  0800836c  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002900  0800836c  0000a900  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e40f  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002524  00000000  00000000  000184b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  0001a9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c9  00000000  00000000  0001b698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023210  00000000  00000000  0001c061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e7b  00000000  00000000  0003f271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc29b  00000000  00000000  000520ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e387  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003930  00000000  00000000  0011e3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00121cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007b84 	.word	0x08007b84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007b84 	.word	0x08007b84

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2140      	movs	r1, #64	@ 0x40
 8000614:	4803      	ldr	r0, [pc, #12]	@ (8000624 <SELECT+0x18>)
 8000616:	f001 fc75 	bl	8001f04 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800061a:	2001      	movs	r0, #1
 800061c:	f001 f9c8 	bl	80019b0 <HAL_Delay>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40020400 	.word	0x40020400

08000628 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2140      	movs	r1, #64	@ 0x40
 8000630:	4803      	ldr	r0, [pc, #12]	@ (8000640 <DESELECT+0x18>)
 8000632:	f001 fc67 	bl	8001f04 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f001 f9ba 	bl	80019b0 <HAL_Delay>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40020400 	.word	0x40020400

08000644 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800064e:	bf00      	nop
 8000650:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <SPI_TxByte+0x30>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	689b      	ldr	r3, [r3, #8]
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	2b02      	cmp	r3, #2
 800065c:	d1f8      	bne.n	8000650 <SPI_TxByte+0xc>
    HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800065e:	1df9      	adds	r1, r7, #7
 8000660:	2364      	movs	r3, #100	@ 0x64
 8000662:	2201      	movs	r2, #1
 8000664:	4803      	ldr	r0, [pc, #12]	@ (8000674 <SPI_TxByte+0x30>)
 8000666:	f002 fad8 	bl	8002c1a <HAL_SPI_Transmit>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000098 	.word	0x20000098

08000678 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	807b      	strh	r3, [r7, #2]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000684:	bf00      	nop
 8000686:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <SPI_TxBuffer+0x30>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	2b02      	cmp	r3, #2
 8000692:	d1f8      	bne.n	8000686 <SPI_TxBuffer+0xe>
    HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000694:	887a      	ldrh	r2, [r7, #2]
 8000696:	2364      	movs	r3, #100	@ 0x64
 8000698:	6879      	ldr	r1, [r7, #4]
 800069a:	4803      	ldr	r0, [pc, #12]	@ (80006a8 <SPI_TxBuffer+0x30>)
 800069c:	f002 fabd 	bl	8002c1a <HAL_SPI_Transmit>
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000098 	.word	0x20000098

080006ac <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af02      	add	r7, sp, #8
    uint8_t dummy, data;
    dummy = 0xFF;
 80006b2:	23ff      	movs	r3, #255	@ 0xff
 80006b4:	71fb      	strb	r3, [r7, #7]

    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006b6:	bf00      	nop
 80006b8:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <SPI_RxByte+0x34>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	2b02      	cmp	r3, #2
 80006c4:	d1f8      	bne.n	80006b8 <SPI_RxByte+0xc>
    HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80006c6:	1dba      	adds	r2, r7, #6
 80006c8:	1df9      	adds	r1, r7, #7
 80006ca:	2364      	movs	r3, #100	@ 0x64
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2301      	movs	r3, #1
 80006d0:	4803      	ldr	r0, [pc, #12]	@ (80006e0 <SPI_RxByte+0x34>)
 80006d2:	f002 fbe6 	bl	8002ea2 <HAL_SPI_TransmitReceive>

    return data;
 80006d6:	79bb      	ldrb	r3, [r7, #6]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000098 	.word	0x20000098

080006e4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    *buff = SPI_RxByte();
 80006ec:	f7ff ffde 	bl	80006ac <SPI_RxByte>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	701a      	strb	r2, [r3, #0]
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
    uint8_t res;

    /* timeout 500ms */
    Timer2 = 500;
 8000706:	4b0a      	ldr	r3, [pc, #40]	@ (8000730 <SD_ReadyWait+0x30>)
 8000708:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800070c:	801a      	strh	r2, [r3, #0]

    /* if SD goes ready, receives 0xFF */
    do {
        res = SPI_RxByte();
 800070e:	f7ff ffcd 	bl	80006ac <SPI_RxByte>
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
    } while ((res != 0xFF) && Timer2);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2bff      	cmp	r3, #255	@ 0xff
 800071a:	d004      	beq.n	8000726 <SD_ReadyWait+0x26>
 800071c:	4b04      	ldr	r3, [pc, #16]	@ (8000730 <SD_ReadyWait+0x30>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	b29b      	uxth	r3, r3
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1f3      	bne.n	800070e <SD_ReadyWait+0xe>

    return res;
 8000726:	79fb      	ldrb	r3, [r7, #7]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000092 	.word	0x20000092

08000734 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
    uint8_t args[6];
    uint32_t cnt = 0x1FFF;
 800073a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800073e:	60fb      	str	r3, [r7, #12]

    /* transmit bytes to wake up */
    DESELECT();
 8000740:	f7ff ff72 	bl	8000628 <DESELECT>
    for(int i = 0; i < 10; i++)
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	e005      	b.n	8000756 <SD_PowerOn+0x22>
    {
        SPI_TxByte(0xFF);
 800074a:	20ff      	movs	r0, #255	@ 0xff
 800074c:	f7ff ff7a 	bl	8000644 <SPI_TxByte>
    for(int i = 0; i < 10; i++)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	3301      	adds	r3, #1
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	2b09      	cmp	r3, #9
 800075a:	ddf6      	ble.n	800074a <SD_PowerOn+0x16>
    }

    /* slave select */
    SELECT();
 800075c:	f7ff ff56 	bl	800060c <SELECT>

    /* make idle state */
    args[0] = CMD0;     /* CMD0:GO_IDLE_STATE */
 8000760:	2340      	movs	r3, #64	@ 0x40
 8000762:	703b      	strb	r3, [r7, #0]
    args[1] = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	707b      	strb	r3, [r7, #1]
    args[2] = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	70bb      	strb	r3, [r7, #2]
    args[3] = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	70fb      	strb	r3, [r7, #3]
    args[4] = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	713b      	strb	r3, [r7, #4]
    args[5] = 0x95;     /* CRC */
 8000774:	2395      	movs	r3, #149	@ 0x95
 8000776:	717b      	strb	r3, [r7, #5]

    SPI_TxBuffer(args, sizeof(args));
 8000778:	463b      	mov	r3, r7
 800077a:	2106      	movs	r1, #6
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff7b 	bl	8000678 <SPI_TxBuffer>

    /* wait response */
    while ((SPI_RxByte() != 0x01) && cnt)
 8000782:	e002      	b.n	800078a <SD_PowerOn+0x56>
    {
        cnt--;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	3b01      	subs	r3, #1
 8000788:	60fb      	str	r3, [r7, #12]
    while ((SPI_RxByte() != 0x01) && cnt)
 800078a:	f7ff ff8f 	bl	80006ac <SPI_RxByte>
 800078e:	4603      	mov	r3, r0
 8000790:	2b01      	cmp	r3, #1
 8000792:	d002      	beq.n	800079a <SD_PowerOn+0x66>
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f4      	bne.n	8000784 <SD_PowerOn+0x50>
    }

    DESELECT();
 800079a:	f7ff ff45 	bl	8000628 <DESELECT>
    SPI_TxByte(0XFF);
 800079e:	20ff      	movs	r0, #255	@ 0xff
 80007a0:	f7ff ff50 	bl	8000644 <SPI_TxByte>

    PowerFlag = 1;
 80007a4:	4b03      	ldr	r3, [pc, #12]	@ (80007b4 <SD_PowerOn+0x80>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000095 	.word	0x20000095

080007b8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 80007bc:	4b03      	ldr	r3, [pc, #12]	@ (80007cc <SD_PowerOff+0x14>)
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	20000095 	.word	0x20000095

080007d0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
    return PowerFlag;
 80007d4:	4b03      	ldr	r3, [pc, #12]	@ (80007e4 <SD_CheckPower+0x14>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	20000095 	.word	0x20000095

080007e8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
    uint8_t token;

    /* timeout 200ms */
    Timer1 = 200;
 80007f2:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <SD_RxDataBlock+0x5c>)
 80007f4:	22c8      	movs	r2, #200	@ 0xc8
 80007f6:	801a      	strh	r2, [r3, #0]

    /* loop until receive a response or timeout */
    do {
        token = SPI_RxByte();
 80007f8:	f7ff ff58 	bl	80006ac <SPI_RxByte>
 80007fc:	4603      	mov	r3, r0
 80007fe:	73fb      	strb	r3, [r7, #15]
    } while((token == 0xFF) && Timer1);
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	2bff      	cmp	r3, #255	@ 0xff
 8000804:	d104      	bne.n	8000810 <SD_RxDataBlock+0x28>
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <SD_RxDataBlock+0x5c>)
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	b29b      	uxth	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1f3      	bne.n	80007f8 <SD_RxDataBlock+0x10>

    /* invalid response */
    if(token != 0xFE) return FALSE;
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	2bfe      	cmp	r3, #254	@ 0xfe
 8000814:	d007      	beq.n	8000826 <SD_RxDataBlock+0x3e>
 8000816:	2300      	movs	r3, #0
 8000818:	e00f      	b.n	800083a <SD_RxDataBlock+0x52>
    /* receive data */
    // FIX 2: do-while(len--) 루프 수정
    // 기존 코드는 len+1 만큼 실행되어 버퍼 오버플로우를 유발할 수 있습니다.
    // while(len--) 형태로 변경하여 정확히 len 만큼만 실행되도록 합니다.
    while(len--) {
        SPI_RxBytePtr(buff++);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	607a      	str	r2, [r7, #4]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff5f 	bl	80006e4 <SPI_RxBytePtr>
    while(len--) {
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	603a      	str	r2, [r7, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1f4      	bne.n	800081a <SD_RxDataBlock+0x32>
    }

    /* discard CRC */
    SPI_RxByte();
 8000830:	f7ff ff3c 	bl	80006ac <SPI_RxByte>
    SPI_RxByte();
 8000834:	f7ff ff3a 	bl	80006ac <SPI_RxByte>

    return TRUE;
 8000838:	2301      	movs	r3, #1
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000090 	.word	0x20000090

08000848 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	70fb      	strb	r3, [r7, #3]
    uint8_t resp = 0xFF; // 초기화
 8000854:	23ff      	movs	r3, #255	@ 0xff
 8000856:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	73bb      	strb	r3, [r7, #14]

    /* wait SD ready */
    if (SD_ReadyWait() != 0xFF) return FALSE;
 800085c:	f7ff ff50 	bl	8000700 <SD_ReadyWait>
 8000860:	4603      	mov	r3, r0
 8000862:	2bff      	cmp	r3, #255	@ 0xff
 8000864:	d001      	beq.n	800086a <SD_TxDataBlock+0x22>
 8000866:	2300      	movs	r3, #0
 8000868:	e037      	b.n	80008da <SD_TxDataBlock+0x92>

    /* transmit token */
    SPI_TxByte(token);
 800086a:	78fb      	ldrb	r3, [r7, #3]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fee9 	bl	8000644 <SPI_TxByte>

    /* if it's not STOP token, transmit data */
    if (token != 0xFD)
 8000872:	78fb      	ldrb	r3, [r7, #3]
 8000874:	2bfd      	cmp	r3, #253	@ 0xfd
 8000876:	d028      	beq.n	80008ca <SD_TxDataBlock+0x82>
    {
        SPI_TxBuffer((uint8_t*)buff, 512);
 8000878:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff fefb 	bl	8000678 <SPI_TxBuffer>

        /* discard CRC */
        SPI_RxByte();
 8000882:	f7ff ff13 	bl	80006ac <SPI_RxByte>
        SPI_RxByte();
 8000886:	f7ff ff11 	bl	80006ac <SPI_RxByte>

        /* receive response */
        while (i <= 64)
 800088a:	e00b      	b.n	80008a4 <SD_TxDataBlock+0x5c>
        {
            resp = SPI_RxByte();
 800088c:	f7ff ff0e 	bl	80006ac <SPI_RxByte>
 8000890:	4603      	mov	r3, r0
 8000892:	73fb      	strb	r3, [r7, #15]

            /* transmit 0x05 accepted */
            if ((resp & 0x1F) == 0x05) break;
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	2b05      	cmp	r3, #5
 800089c:	d006      	beq.n	80008ac <SD_TxDataBlock+0x64>
            i++;
 800089e:	7bbb      	ldrb	r3, [r7, #14]
 80008a0:	3301      	adds	r3, #1
 80008a2:	73bb      	strb	r3, [r7, #14]
        while (i <= 64)
 80008a4:	7bbb      	ldrb	r3, [r7, #14]
 80008a6:	2b40      	cmp	r3, #64	@ 0x40
 80008a8:	d9f0      	bls.n	800088c <SD_TxDataBlock+0x44>
 80008aa:	e000      	b.n	80008ae <SD_TxDataBlock+0x66>
            if ((resp & 0x1F) == 0x05) break;
 80008ac:	bf00      	nop
        }

        // FIX 3: 타임아웃 없는 무한 루프 수정
        // 카드가 계속 busy(0x00) 상태일 경우 시스템이 멈추는 것을 방지하기 위해 타임아웃을 추가합니다.
        Timer1 = 200; // 200ms 타임아웃
 80008ae:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <SD_TxDataBlock+0x9c>)
 80008b0:	22c8      	movs	r2, #200	@ 0xc8
 80008b2:	801a      	strh	r2, [r3, #0]
        while ((SPI_RxByte() == 0) && Timer1);
 80008b4:	bf00      	nop
 80008b6:	f7ff fef9 	bl	80006ac <SPI_RxByte>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d104      	bne.n	80008ca <SD_TxDataBlock+0x82>
 80008c0:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <SD_TxDataBlock+0x9c>)
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d1f5      	bne.n	80008b6 <SD_TxDataBlock+0x6e>
    }
    
    // resp가 초기화되지 않은 상태로 사용될 수 있어 수정
    if ((resp & 0x1F) == 0x05) return TRUE;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	f003 031f 	and.w	r3, r3, #31
 80008d0:	2b05      	cmp	r3, #5
 80008d2:	d101      	bne.n	80008d8 <SD_TxDataBlock+0x90>
 80008d4:	2301      	movs	r3, #1
 80008d6:	e000      	b.n	80008da <SD_TxDataBlock+0x92>

    return FALSE;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000090 	.word	0x20000090

080008e8 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	71fb      	strb	r3, [r7, #7]
    uint8_t crc, res;

    /* wait SD ready */
    if (SD_ReadyWait() != 0xFF) return 0xFF;
 80008f4:	f7ff ff04 	bl	8000700 <SD_ReadyWait>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2bff      	cmp	r3, #255	@ 0xff
 80008fc:	d001      	beq.n	8000902 <SD_SendCmd+0x1a>
 80008fe:	23ff      	movs	r3, #255	@ 0xff
 8000900:	e042      	b.n	8000988 <SD_SendCmd+0xa0>

    /* transmit command */
    SPI_TxByte(cmd);                    /* Command */
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fe9d 	bl	8000644 <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	0e1b      	lsrs	r3, r3, #24
 800090e:	b2db      	uxtb	r3, r3
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fe97 	bl	8000644 <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	0c1b      	lsrs	r3, r3, #16
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fe91 	bl	8000644 <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 8));    /* Argument[15..8] */
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	0a1b      	lsrs	r3, r3, #8
 8000926:	b2db      	uxtb	r3, r3
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fe8b 	bl	8000644 <SPI_TxByte>
    SPI_TxByte((uint8_t)arg);           /* Argument[7..0] */
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fe86 	bl	8000644 <SPI_TxByte>

    /* prepare CRC */
    if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2b40      	cmp	r3, #64	@ 0x40
 800093c:	d102      	bne.n	8000944 <SD_SendCmd+0x5c>
 800093e:	2395      	movs	r3, #149	@ 0x95
 8000940:	73fb      	strb	r3, [r7, #15]
 8000942:	e007      	b.n	8000954 <SD_SendCmd+0x6c>
    else if(cmd == CMD8) crc = 0x87;    /* CRC for CMD8(0x1AA) */
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	2b48      	cmp	r3, #72	@ 0x48
 8000948:	d102      	bne.n	8000950 <SD_SendCmd+0x68>
 800094a:	2387      	movs	r3, #135	@ 0x87
 800094c:	73fb      	strb	r3, [r7, #15]
 800094e:	e001      	b.n	8000954 <SD_SendCmd+0x6c>
    else crc = 1;
 8000950:	2301      	movs	r3, #1
 8000952:	73fb      	strb	r3, [r7, #15]

    /* transmit CRC */
    SPI_TxByte(crc);
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fe74 	bl	8000644 <SPI_TxByte>

    /* Skip a stuff byte when STOP_TRANSMISSION */
    if (cmd == CMD12) SPI_RxByte();
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	2b4c      	cmp	r3, #76	@ 0x4c
 8000960:	d101      	bne.n	8000966 <SD_SendCmd+0x7e>
 8000962:	f7ff fea3 	bl	80006ac <SPI_RxByte>

    /* receive response */
    uint8_t n = 10;
 8000966:	230a      	movs	r3, #10
 8000968:	73bb      	strb	r3, [r7, #14]
    do {
        res = SPI_RxByte();
 800096a:	f7ff fe9f 	bl	80006ac <SPI_RxByte>
 800096e:	4603      	mov	r3, r0
 8000970:	737b      	strb	r3, [r7, #13]
    } while ((res & 0x80) && --n);
 8000972:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000976:	2b00      	cmp	r3, #0
 8000978:	da05      	bge.n	8000986 <SD_SendCmd+0x9e>
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	3b01      	subs	r3, #1
 800097e:	73bb      	strb	r3, [r7, #14]
 8000980:	7bbb      	ldrb	r3, [r7, #14]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1f1      	bne.n	800096a <SD_SendCmd+0x82>

    return res;
 8000986:	7b7b      	ldrb	r3, [r7, #13]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
    uint8_t n, type, ocr[4];

    /* single drive, drv should be 0 */
    if(drv) return STA_NOINIT;
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SD_disk_initialize+0x14>
 80009a0:	2301      	movs	r3, #1
 80009a2:	e0d6      	b.n	8000b52 <SD_disk_initialize+0x1c2>

    /* no disk */
    if(Stat & STA_NODISK) return Stat;
 80009a4:	4b6d      	ldr	r3, [pc, #436]	@ (8000b5c <SD_disk_initialize+0x1cc>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <SD_disk_initialize+0x2a>
 80009b2:	4b6a      	ldr	r3, [pc, #424]	@ (8000b5c <SD_disk_initialize+0x1cc>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	e0cb      	b.n	8000b52 <SD_disk_initialize+0x1c2>

    /* power on */
    SD_PowerOn();
 80009ba:	f7ff febb 	bl	8000734 <SD_PowerOn>

    /* slave select */
    SELECT();
 80009be:	f7ff fe25 	bl	800060c <SELECT>

    /* check disk type */
    type = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	73bb      	strb	r3, [r7, #14]

    /* send GO_IDLE_STATE command */
    if (SD_SendCmd(CMD0, 0) == 1)
 80009c6:	2100      	movs	r1, #0
 80009c8:	2040      	movs	r0, #64	@ 0x40
 80009ca:	f7ff ff8d 	bl	80008e8 <SD_SendCmd>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	f040 80a6 	bne.w	8000b22 <SD_disk_initialize+0x192>
    {
        /* timeout 1 sec */
        Timer1 = 1000;
 80009d6:	4b62      	ldr	r3, [pc, #392]	@ (8000b60 <SD_disk_initialize+0x1d0>)
 80009d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009dc:	801a      	strh	r2, [r3, #0]

        /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
        if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80009de:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80009e2:	2048      	movs	r0, #72	@ 0x48
 80009e4:	f7ff ff80 	bl	80008e8 <SD_SendCmd>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d158      	bne.n	8000aa0 <SD_disk_initialize+0x110>
        {
            /* operation condition register */
            for (n = 0; n < 4; n++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	73fb      	strb	r3, [r7, #15]
 80009f2:	e00c      	b.n	8000a0e <SD_disk_initialize+0x7e>
            {
                ocr[n] = SPI_RxByte();
 80009f4:	7bfc      	ldrb	r4, [r7, #15]
 80009f6:	f7ff fe59 	bl	80006ac <SPI_RxByte>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	f104 0310 	add.w	r3, r4, #16
 8000a02:	443b      	add	r3, r7
 8000a04:	f803 2c08 	strb.w	r2, [r3, #-8]
            for (n = 0; n < 4; n++)
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	2b03      	cmp	r3, #3
 8000a12:	d9ef      	bls.n	80009f4 <SD_disk_initialize+0x64>
            }

            /* voltage range 2.7-3.6V */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000a14:	7abb      	ldrb	r3, [r7, #10]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	f040 8083 	bne.w	8000b22 <SD_disk_initialize+0x192>
 8000a1c:	7afb      	ldrb	r3, [r7, #11]
 8000a1e:	2baa      	cmp	r3, #170	@ 0xaa
 8000a20:	d17f      	bne.n	8000b22 <SD_disk_initialize+0x192>
            {
                /* ACMD41 with HCS bit */
                do {
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a22:	2100      	movs	r1, #0
 8000a24:	2077      	movs	r0, #119	@ 0x77
 8000a26:	f7ff ff5f 	bl	80008e8 <SD_SendCmd>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d807      	bhi.n	8000a40 <SD_disk_initialize+0xb0>
 8000a30:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000a34:	2069      	movs	r0, #105	@ 0x69
 8000a36:	f7ff ff57 	bl	80008e8 <SD_SendCmd>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d005      	beq.n	8000a4c <SD_disk_initialize+0xbc>
                } while (Timer1);
 8000a40:	4b47      	ldr	r3, [pc, #284]	@ (8000b60 <SD_disk_initialize+0x1d0>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d1eb      	bne.n	8000a22 <SD_disk_initialize+0x92>
 8000a4a:	e000      	b.n	8000a4e <SD_disk_initialize+0xbe>
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a4c:	bf00      	nop

                /* READ_OCR */
                if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a4e:	4b44      	ldr	r3, [pc, #272]	@ (8000b60 <SD_disk_initialize+0x1d0>)
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d064      	beq.n	8000b22 <SD_disk_initialize+0x192>
 8000a58:	2100      	movs	r1, #0
 8000a5a:	207a      	movs	r0, #122	@ 0x7a
 8000a5c:	f7ff ff44 	bl	80008e8 <SD_SendCmd>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d15d      	bne.n	8000b22 <SD_disk_initialize+0x192>
                {
                    /* Check CCS bit */
                    for (n = 0; n < 4; n++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	73fb      	strb	r3, [r7, #15]
 8000a6a:	e00c      	b.n	8000a86 <SD_disk_initialize+0xf6>
                    {
                        ocr[n] = SPI_RxByte();
 8000a6c:	7bfc      	ldrb	r4, [r7, #15]
 8000a6e:	f7ff fe1d 	bl	80006ac <SPI_RxByte>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461a      	mov	r2, r3
 8000a76:	f104 0310 	add.w	r3, r4, #16
 8000a7a:	443b      	add	r3, r7
 8000a7c:	f803 2c08 	strb.w	r2, [r3, #-8]
                    for (n = 0; n < 4; n++)
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	3301      	adds	r3, #1
 8000a84:	73fb      	strb	r3, [r7, #15]
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d9ef      	bls.n	8000a6c <SD_disk_initialize+0xdc>
                    }

                    /* SDv2 (HC or SC) */
                    type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a8c:	7a3b      	ldrb	r3, [r7, #8]
 8000a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SD_disk_initialize+0x10a>
 8000a96:	230c      	movs	r3, #12
 8000a98:	e000      	b.n	8000a9c <SD_disk_initialize+0x10c>
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	73bb      	strb	r3, [r7, #14]
 8000a9e:	e040      	b.n	8000b22 <SD_disk_initialize+0x192>
            }
        }
        else
        {
            /* SDC V1 or MMC */
            type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2077      	movs	r0, #119	@ 0x77
 8000aa4:	f7ff ff20 	bl	80008e8 <SD_SendCmd>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d808      	bhi.n	8000ac0 <SD_disk_initialize+0x130>
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2069      	movs	r0, #105	@ 0x69
 8000ab2:	f7ff ff19 	bl	80008e8 <SD_SendCmd>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d801      	bhi.n	8000ac0 <SD_disk_initialize+0x130>
 8000abc:	2302      	movs	r3, #2
 8000abe:	e000      	b.n	8000ac2 <SD_disk_initialize+0x132>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73bb      	strb	r3, [r7, #14]

            do
            {
                if (type == CT_SD1)
 8000ac4:	7bbb      	ldrb	r3, [r7, #14]
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d10e      	bne.n	8000ae8 <SD_disk_initialize+0x158>
                {
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000aca:	2100      	movs	r1, #0
 8000acc:	2077      	movs	r0, #119	@ 0x77
 8000ace:	f7ff ff0b 	bl	80008e8 <SD_SendCmd>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d80e      	bhi.n	8000af6 <SD_disk_initialize+0x166>
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2069      	movs	r0, #105	@ 0x69
 8000adc:	f7ff ff04 	bl	80008e8 <SD_SendCmd>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d107      	bne.n	8000af6 <SD_disk_initialize+0x166>
 8000ae6:	e00d      	b.n	8000b04 <SD_disk_initialize+0x174>
                }
                else
                {
                    if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2041      	movs	r0, #65	@ 0x41
 8000aec:	f7ff fefc 	bl	80008e8 <SD_SendCmd>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d005      	beq.n	8000b02 <SD_disk_initialize+0x172>
                }

            } while (Timer1);
 8000af6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <SD_disk_initialize+0x1d0>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1e1      	bne.n	8000ac4 <SD_disk_initialize+0x134>
 8000b00:	e000      	b.n	8000b04 <SD_disk_initialize+0x174>
                    if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000b02:	bf00      	nop

            /* SET_BLOCKLEN */
            if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000b04:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <SD_disk_initialize+0x1d0>)
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d007      	beq.n	8000b1e <SD_disk_initialize+0x18e>
 8000b0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b12:	2050      	movs	r0, #80	@ 0x50
 8000b14:	f7ff fee8 	bl	80008e8 <SD_SendCmd>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SD_disk_initialize+0x192>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	73bb      	strb	r3, [r7, #14]
        }
    }

    CardType = type;
 8000b22:	4a10      	ldr	r2, [pc, #64]	@ (8000b64 <SD_disk_initialize+0x1d4>)
 8000b24:	7bbb      	ldrb	r3, [r7, #14]
 8000b26:	7013      	strb	r3, [r2, #0]

    /* Idle */
    DESELECT();
 8000b28:	f7ff fd7e 	bl	8000628 <DESELECT>
    SPI_RxByte();
 8000b2c:	f7ff fdbe 	bl	80006ac <SPI_RxByte>

    /* Clear STA_NOINIT */
    if (type)
 8000b30:	7bbb      	ldrb	r3, [r7, #14]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d008      	beq.n	8000b48 <SD_disk_initialize+0x1b8>
    {
        Stat &= ~STA_NOINIT;
 8000b36:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <SD_disk_initialize+0x1cc>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	f023 0301 	bic.w	r3, r3, #1
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <SD_disk_initialize+0x1cc>)
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	e001      	b.n	8000b4c <SD_disk_initialize+0x1bc>
    }
    else
    {
        /* Initialization failed */
        SD_PowerOff();
 8000b48:	f7ff fe36 	bl	80007b8 <SD_PowerOff>
    }

    return Stat;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	@ (8000b5c <SD_disk_initialize+0x1cc>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b2db      	uxtb	r3, r3
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd90      	pop	{r4, r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000090 	.word	0x20000090
 8000b64:	20000094 	.word	0x20000094

08000b68 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SD_disk_status+0x14>
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e002      	b.n	8000b82 <SD_disk_status+0x1a>
    return Stat;
 8000b7c:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <SD_disk_status+0x28>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b2db      	uxtb	r3, r3
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000000 	.word	0x20000000

08000b94 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	73fb      	strb	r3, [r7, #15]
    /* pdrv should be 0 */
    if (pdrv || !count) return RES_PARERR;
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d102      	bne.n	8000bb0 <SD_disk_read+0x1c>
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d101      	bne.n	8000bb4 <SD_disk_read+0x20>
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	e051      	b.n	8000c58 <SD_disk_read+0xc4>

    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c60 <SD_disk_read+0xcc>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SD_disk_read+0x32>
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	e048      	b.n	8000c58 <SD_disk_read+0xc4>

    /* convert to byte address */
    if (!(CardType & CT_BLOCK)) sector *= 512;
 8000bc6:	4b27      	ldr	r3, [pc, #156]	@ (8000c64 <SD_disk_read+0xd0>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d102      	bne.n	8000bd8 <SD_disk_read+0x44>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	025b      	lsls	r3, r3, #9
 8000bd6:	607b      	str	r3, [r7, #4]

    SELECT();
 8000bd8:	f7ff fd18 	bl	800060c <SELECT>

    if (count == 1)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d111      	bne.n	8000c06 <SD_disk_read+0x72>
    {
        /* READ_SINGLE_BLOCK */
        if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	2051      	movs	r0, #81	@ 0x51
 8000be6:	f7ff fe7f 	bl	80008e8 <SD_SendCmd>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d129      	bne.n	8000c44 <SD_disk_read+0xb0>
 8000bf0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bf4:	68b8      	ldr	r0, [r7, #8]
 8000bf6:	f7ff fdf7 	bl	80007e8 <SD_RxDataBlock>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d021      	beq.n	8000c44 <SD_disk_read+0xb0>
 8000c00:	2300      	movs	r3, #0
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	e01e      	b.n	8000c44 <SD_disk_read+0xb0>
    }
    else
    {
        /* READ_MULTIPLE_BLOCK */
        if (SD_SendCmd(CMD18, sector) == 0)
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	2052      	movs	r0, #82	@ 0x52
 8000c0a:	f7ff fe6d 	bl	80008e8 <SD_SendCmd>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d117      	bne.n	8000c44 <SD_disk_read+0xb0>
        {
            do {
                if (!SD_RxDataBlock(buff, 512)) break;
 8000c14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c18:	68b8      	ldr	r0, [r7, #8]
 8000c1a:	f7ff fde5 	bl	80007e8 <SD_RxDataBlock>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00a      	beq.n	8000c3a <SD_disk_read+0xa6>
                buff += 512;
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c2a:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1ed      	bne.n	8000c14 <SD_disk_read+0x80>
 8000c38:	e000      	b.n	8000c3c <SD_disk_read+0xa8>
                if (!SD_RxDataBlock(buff, 512)) break;
 8000c3a:	bf00      	nop

            /* STOP_TRANSMISSION */
            SD_SendCmd(CMD12, 0);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	204c      	movs	r0, #76	@ 0x4c
 8000c40:	f7ff fe52 	bl	80008e8 <SD_SendCmd>
        }
    }

    /* Idle */
    DESELECT();
 8000c44:	f7ff fcf0 	bl	8000628 <DESELECT>
    SPI_RxByte();
 8000c48:	f7ff fd30 	bl	80006ac <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	bf14      	ite	ne
 8000c52:	2301      	movne	r3, #1
 8000c54:	2300      	moveq	r3, #0
 8000c56:	b2db      	uxtb	r3, r3
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000094 	.word	0x20000094

08000c68 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	4603      	mov	r3, r0
 8000c76:	73fb      	strb	r3, [r7, #15]
    /* pdrv should be 0 */
    if (pdrv || !count) return RES_PARERR;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d102      	bne.n	8000c84 <SD_disk_write+0x1c>
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d101      	bne.n	8000c88 <SD_disk_write+0x20>
 8000c84:	2304      	movs	r3, #4
 8000c86:	e06b      	b.n	8000d60 <SD_disk_write+0xf8>

    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c88:	4b37      	ldr	r3, [pc, #220]	@ (8000d68 <SD_disk_write+0x100>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SD_disk_write+0x32>
 8000c96:	2303      	movs	r3, #3
 8000c98:	e062      	b.n	8000d60 <SD_disk_write+0xf8>

    /* write protection */
    if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c9a:	4b33      	ldr	r3, [pc, #204]	@ (8000d68 <SD_disk_write+0x100>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SD_disk_write+0x44>
 8000ca8:	2302      	movs	r3, #2
 8000caa:	e059      	b.n	8000d60 <SD_disk_write+0xf8>

    /* convert to byte address */
    if (!(CardType & CT_BLOCK)) sector *= 512;
 8000cac:	4b2f      	ldr	r3, [pc, #188]	@ (8000d6c <SD_disk_write+0x104>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	f003 0308 	and.w	r3, r3, #8
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <SD_disk_write+0x56>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	025b      	lsls	r3, r3, #9
 8000cbc:	607b      	str	r3, [r7, #4]

    SELECT();
 8000cbe:	f7ff fca5 	bl	800060c <SELECT>

    if (count == 1)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d110      	bne.n	8000cea <SD_disk_write+0x82>
    {
        /* WRITE_BLOCK */
        if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000cc8:	6879      	ldr	r1, [r7, #4]
 8000cca:	2058      	movs	r0, #88	@ 0x58
 8000ccc:	f7ff fe0c 	bl	80008e8 <SD_SendCmd>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d13a      	bne.n	8000d4c <SD_disk_write+0xe4>
 8000cd6:	21fe      	movs	r1, #254	@ 0xfe
 8000cd8:	68b8      	ldr	r0, [r7, #8]
 8000cda:	f7ff fdb5 	bl	8000848 <SD_TxDataBlock>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d033      	beq.n	8000d4c <SD_disk_write+0xe4>
            count = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	e030      	b.n	8000d4c <SD_disk_write+0xe4>
    }
    else
    {
        /* WRITE_MULTIPLE_BLOCK */
        if (CardType & CT_SD1)
 8000cea:	4b20      	ldr	r3, [pc, #128]	@ (8000d6c <SD_disk_write+0x104>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d007      	beq.n	8000d06 <SD_disk_write+0x9e>
        {
            SD_SendCmd(CMD55, 0);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2077      	movs	r0, #119	@ 0x77
 8000cfa:	f7ff fdf5 	bl	80008e8 <SD_SendCmd>
            SD_SendCmd(CMD23, count); /* ACMD23 */
 8000cfe:	6839      	ldr	r1, [r7, #0]
 8000d00:	2057      	movs	r0, #87	@ 0x57
 8000d02:	f7ff fdf1 	bl	80008e8 <SD_SendCmd>
        }

        if (SD_SendCmd(CMD25, sector) == 0)
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	2059      	movs	r0, #89	@ 0x59
 8000d0a:	f7ff fded 	bl	80008e8 <SD_SendCmd>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d11b      	bne.n	8000d4c <SD_disk_write+0xe4>
        {
            do {
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000d14:	21fc      	movs	r1, #252	@ 0xfc
 8000d16:	68b8      	ldr	r0, [r7, #8]
 8000d18:	f7ff fd96 	bl	8000848 <SD_TxDataBlock>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00a      	beq.n	8000d38 <SD_disk_write+0xd0>
                buff += 512;
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000d28:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1ee      	bne.n	8000d14 <SD_disk_write+0xac>
 8000d36:	e000      	b.n	8000d3a <SD_disk_write+0xd2>
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000d38:	bf00      	nop

            /* STOP_TRAN token */
            if(!SD_TxDataBlock(0, 0xFD))
 8000d3a:	21fd      	movs	r1, #253	@ 0xfd
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff fd83 	bl	8000848 <SD_TxDataBlock>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d101      	bne.n	8000d4c <SD_disk_write+0xe4>
            {
                count = 1;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	603b      	str	r3, [r7, #0]
            }
        }
    }

    /* Idle */
    DESELECT();
 8000d4c:	f7ff fc6c 	bl	8000628 <DESELECT>
    SPI_RxByte();
 8000d50:	f7ff fcac 	bl	80006ac <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	bf14      	ite	ne
 8000d5a:	2301      	movne	r3, #1
 8000d5c:	2300      	moveq	r3, #0
 8000d5e:	b2db      	uxtb	r3, r3
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000094 	.word	0x20000094

08000d70 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b08b      	sub	sp, #44	@ 0x2c
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	603a      	str	r2, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    uint8_t n, csd[16], *ptr = buff;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	623b      	str	r3, [r7, #32]
    
    /* pdrv should be 0 */
    if (drv) return RES_PARERR;
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SD_disk_ioctl+0x1e>
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	e118      	b.n	8000fc0 <SD_disk_ioctl+0x250>
    res = RES_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (ctrl == CTRL_POWER)
 8000d94:	79bb      	ldrb	r3, [r7, #6]
 8000d96:	2b05      	cmp	r3, #5
 8000d98:	d124      	bne.n	8000de4 <SD_disk_ioctl+0x74>
    {
        switch (*ptr)
 8000d9a:	6a3b      	ldr	r3, [r7, #32]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d012      	beq.n	8000dc8 <SD_disk_ioctl+0x58>
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	dc1a      	bgt.n	8000ddc <SD_disk_ioctl+0x6c>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <SD_disk_ioctl+0x40>
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d006      	beq.n	8000dbc <SD_disk_ioctl+0x4c>
 8000dae:	e015      	b.n	8000ddc <SD_disk_ioctl+0x6c>
        {
        case 0:
            SD_PowerOff();      /* Power Off */
 8000db0:	f7ff fd02 	bl	80007b8 <SD_PowerOff>
            res = RES_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8000dba:	e0ff      	b.n	8000fbc <SD_disk_ioctl+0x24c>
        case 1:
            SD_PowerOn();       /* Power On */
 8000dbc:	f7ff fcba 	bl	8000734 <SD_PowerOn>
            res = RES_OK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8000dc6:	e0f9      	b.n	8000fbc <SD_disk_ioctl+0x24c>
        case 2:
            *(ptr + 1) = SD_CheckPower();
 8000dc8:	6a3b      	ldr	r3, [r7, #32]
 8000dca:	1c5c      	adds	r4, r3, #1
 8000dcc:	f7ff fd00 	bl	80007d0 <SD_CheckPower>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	7023      	strb	r3, [r4, #0]
            res = RES_OK;       /* Power Check */
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8000dda:	e0ef      	b.n	8000fbc <SD_disk_ioctl+0x24c>
        default:
            res = RES_PARERR;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000de2:	e0eb      	b.n	8000fbc <SD_disk_ioctl+0x24c>
        }
    }
    else
    {
        /* no disk */
        if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000de4:	4b78      	ldr	r3, [pc, #480]	@ (8000fc8 <SD_disk_ioctl+0x258>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SD_disk_ioctl+0x86>
 8000df2:	2303      	movs	r3, #3
 8000df4:	e0e4      	b.n	8000fc0 <SD_disk_ioctl+0x250>

        SELECT();
 8000df6:	f7ff fc09 	bl	800060c <SELECT>

        switch (ctrl)
 8000dfa:	79bb      	ldrb	r3, [r7, #6]
 8000dfc:	2b0d      	cmp	r3, #13
 8000dfe:	f200 80cc 	bhi.w	8000f9a <SD_disk_ioctl+0x22a>
 8000e02:	a201      	add	r2, pc, #4	@ (adr r2, 8000e08 <SD_disk_ioctl+0x98>)
 8000e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e08:	08000f03 	.word	0x08000f03
 8000e0c:	08000e41 	.word	0x08000e41
 8000e10:	08000ef3 	.word	0x08000ef3
 8000e14:	08000f9b 	.word	0x08000f9b
 8000e18:	08000f9b 	.word	0x08000f9b
 8000e1c:	08000f9b 	.word	0x08000f9b
 8000e20:	08000f9b 	.word	0x08000f9b
 8000e24:	08000f9b 	.word	0x08000f9b
 8000e28:	08000f9b 	.word	0x08000f9b
 8000e2c:	08000f9b 	.word	0x08000f9b
 8000e30:	08000f9b 	.word	0x08000f9b
 8000e34:	08000f15 	.word	0x08000f15
 8000e38:	08000f39 	.word	0x08000f39
 8000e3c:	08000f5d 	.word	0x08000f5d
        {
        case GET_SECTOR_COUNT:
            /* SEND_CSD */
            if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000e40:	2100      	movs	r1, #0
 8000e42:	2049      	movs	r0, #73	@ 0x49
 8000e44:	f7ff fd50 	bl	80008e8 <SD_SendCmd>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f040 80a9 	bne.w	8000fa2 <SD_disk_ioctl+0x232>
 8000e50:	f107 0308 	add.w	r3, r7, #8
 8000e54:	2110      	movs	r1, #16
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fcc6 	bl	80007e8 <SD_RxDataBlock>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 809f 	beq.w	8000fa2 <SD_disk_ioctl+0x232>
            {
                if ((csd[0] >> 6) == 1) /* SDC V2 */
 8000e64:	7a3b      	ldrb	r3, [r7, #8]
 8000e66:	099b      	lsrs	r3, r3, #6
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d10f      	bne.n	8000e8e <SD_disk_ioctl+0x11e>
                {
                    // FIX 5: SDv2 CSD 파싱 및 용량 계산 로직 수정
                    // 기존 로직은 C_SIZE 필드를 일부만 사용하여 대용량 카드에서 용량을 잘못 계산합니다.
                    DWORD c_size;
                    c_size = (DWORD)(csd[7] & 0x3F) << 16 | (WORD)csd[8] << 8 | csd[9];
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	041b      	lsls	r3, r3, #16
 8000e72:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8000e76:	7c3b      	ldrb	r3, [r7, #16]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	7c7a      	ldrb	r2, [r7, #17]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
                    *(DWORD*)buff = (c_size + 1) << 10;
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	3301      	adds	r3, #1
 8000e86:	029a      	lsls	r2, r3, #10
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	e02d      	b.n	8000eea <SD_disk_ioctl+0x17a>
                }
                else /* MMC or SDC V1 */
                {
                    WORD csize;
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e8e:	7b7b      	ldrb	r3, [r7, #13]
 8000e90:	f003 030f 	and.w	r3, r3, #15
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	7cbb      	ldrb	r3, [r7, #18]
 8000e98:	09db      	lsrs	r3, r3, #7
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	7c7b      	ldrb	r3, [r7, #17]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	f003 0306 	and.w	r3, r3, #6
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	4413      	add	r3, r2
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000eb6:	7c3b      	ldrb	r3, [r7, #16]
 8000eb8:	099b      	lsrs	r3, r3, #6
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4413      	add	r3, r2
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	7bbb      	ldrb	r3, [r7, #14]
 8000eca:	029b      	lsls	r3, r3, #10
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	4413      	add	r3, r2
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	3301      	adds	r3, #1
 8000eda:	83fb      	strh	r3, [r7, #30]
                    *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000edc:	8bfa      	ldrh	r2, [r7, #30]
 8000ede:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000ee2:	3b09      	subs	r3, #9
 8000ee4:	409a      	lsls	r2, r3
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	601a      	str	r2, [r3, #0]
                }
                res = RES_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8000ef0:	e057      	b.n	8000fa2 <SD_disk_ioctl+0x232>
        case GET_SECTOR_SIZE:
            *(WORD*) buff = 512;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ef8:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8000f00:	e058      	b.n	8000fb4 <SD_disk_ioctl+0x244>
        case CTRL_SYNC:
            if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000f02:	f7ff fbfd 	bl	8000700 <SD_ReadyWait>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2bff      	cmp	r3, #255	@ 0xff
 8000f0a:	d14c      	bne.n	8000fa6 <SD_disk_ioctl+0x236>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8000f12:	e048      	b.n	8000fa6 <SD_disk_ioctl+0x236>
        case MMC_GET_CSD:
            /* SEND_CSD */
            if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000f14:	2100      	movs	r1, #0
 8000f16:	2049      	movs	r0, #73	@ 0x49
 8000f18:	f7ff fce6 	bl	80008e8 <SD_SendCmd>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d143      	bne.n	8000faa <SD_disk_ioctl+0x23a>
 8000f22:	2110      	movs	r1, #16
 8000f24:	6a38      	ldr	r0, [r7, #32]
 8000f26:	f7ff fc5f 	bl	80007e8 <SD_RxDataBlock>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d03c      	beq.n	8000faa <SD_disk_ioctl+0x23a>
 8000f30:	2300      	movs	r3, #0
 8000f32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8000f36:	e038      	b.n	8000faa <SD_disk_ioctl+0x23a>
        case MMC_GET_CID:
            /* SEND_CID */
            if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000f38:	2100      	movs	r1, #0
 8000f3a:	204a      	movs	r0, #74	@ 0x4a
 8000f3c:	f7ff fcd4 	bl	80008e8 <SD_SendCmd>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d133      	bne.n	8000fae <SD_disk_ioctl+0x23e>
 8000f46:	2110      	movs	r1, #16
 8000f48:	6a38      	ldr	r0, [r7, #32]
 8000f4a:	f7ff fc4d 	bl	80007e8 <SD_RxDataBlock>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d02c      	beq.n	8000fae <SD_disk_ioctl+0x23e>
 8000f54:	2300      	movs	r3, #0
 8000f56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8000f5a:	e028      	b.n	8000fae <SD_disk_ioctl+0x23e>
        case MMC_GET_OCR:
            /* READ_OCR */
            if (SD_SendCmd(CMD58, 0) == 0)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	207a      	movs	r0, #122	@ 0x7a
 8000f60:	f7ff fcc2 	bl	80008e8 <SD_SendCmd>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d123      	bne.n	8000fb2 <SD_disk_ioctl+0x242>
            {
                for (n = 0; n < 4; n++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f70:	e00b      	b.n	8000f8a <SD_disk_ioctl+0x21a>
                {
                    *ptr++ = SPI_RxByte();
 8000f72:	6a3c      	ldr	r4, [r7, #32]
 8000f74:	1c63      	adds	r3, r4, #1
 8000f76:	623b      	str	r3, [r7, #32]
 8000f78:	f7ff fb98 	bl	80006ac <SPI_RxByte>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	7023      	strb	r3, [r4, #0]
                for (n = 0; n < 4; n++)
 8000f80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f84:	3301      	adds	r3, #1
 8000f86:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f8a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d9ef      	bls.n	8000f72 <SD_disk_ioctl+0x202>
                }
                res = RES_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            // FIX 4: 누락된 break 추가
            // break가 없어 default case로 넘어가 res값이 RES_PARERR로 덮어쓰이는 문제를 수정합니다.
            break; 
 8000f98:	e00b      	b.n	8000fb2 <SD_disk_ioctl+0x242>
        default:
            res = RES_PARERR;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000fa0:	e008      	b.n	8000fb4 <SD_disk_ioctl+0x244>
            break;
 8000fa2:	bf00      	nop
 8000fa4:	e006      	b.n	8000fb4 <SD_disk_ioctl+0x244>
            break;
 8000fa6:	bf00      	nop
 8000fa8:	e004      	b.n	8000fb4 <SD_disk_ioctl+0x244>
            break;
 8000faa:	bf00      	nop
 8000fac:	e002      	b.n	8000fb4 <SD_disk_ioctl+0x244>
            break;
 8000fae:	bf00      	nop
 8000fb0:	e000      	b.n	8000fb4 <SD_disk_ioctl+0x244>
            break; 
 8000fb2:	bf00      	nop
        }

        DESELECT();
 8000fb4:	f7ff fb38 	bl	8000628 <DESELECT>
        SPI_RxByte();
 8000fb8:	f7ff fb78 	bl	80006ac <SPI_RxByte>
    }

    return res;
 8000fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	372c      	adds	r7, #44	@ 0x2c
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd90      	pop	{r4, r7, pc}
 8000fc8:	20000000 	.word	0x20000000

08000fcc <transmit_uart>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Función para transmitir strings por UART
void transmit_uart(char *string)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)string, strlen(string), HAL_MAX_DELAY);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff f925 	bl	8000224 <strlen>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4803      	ldr	r0, [pc, #12]	@ (8000ff4 <transmit_uart+0x28>)
 8000fe6:	f002 fa31 	bl	800344c <HAL_UART_Transmit>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200000f0 	.word	0x200000f0

08000ff8 <receive_uart_char>:

// Función para recibir un carácter por UART (bloqueante)
uint8_t receive_uart_char(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
    uint8_t receivedChar;
    HAL_UART_Receive(&huart2, &receivedChar, 1, HAL_MAX_DELAY);
 8000ffe:	1df9      	adds	r1, r7, #7
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	2201      	movs	r2, #1
 8001006:	4804      	ldr	r0, [pc, #16]	@ (8001018 <receive_uart_char+0x20>)
 8001008:	f002 faab 	bl	8003562 <HAL_UART_Receive>
    return receivedChar;
 800100c:	79fb      	ldrb	r3, [r7, #7]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200000f0 	.word	0x200000f0

0800101c <list_files_on_sd>:

// Función para listar archivos .txt en la SD
void list_files_on_sd(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
    fileCount = 0;
 8001022:	4b2f      	ldr	r3, [pc, #188]	@ (80010e0 <list_files_on_sd+0xc4>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
    fres = f_opendir(&dir, "/");
 8001028:	492e      	ldr	r1, [pc, #184]	@ (80010e4 <list_files_on_sd+0xc8>)
 800102a:	482f      	ldr	r0, [pc, #188]	@ (80010e8 <list_files_on_sd+0xcc>)
 800102c:	f005 fea7 	bl	8006d7e <f_opendir>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	4b2d      	ldr	r3, [pc, #180]	@ (80010ec <list_files_on_sd+0xd0>)
 8001036:	701a      	strb	r2, [r3, #0]

    if (fres == FR_OK) {
 8001038:	4b2c      	ldr	r3, [pc, #176]	@ (80010ec <list_files_on_sd+0xd0>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d148      	bne.n	80010d2 <list_files_on_sd+0xb6>
        while (1) {
            fres = f_readdir(&dir, &fno);
 8001040:	492b      	ldr	r1, [pc, #172]	@ (80010f0 <list_files_on_sd+0xd4>)
 8001042:	4829      	ldr	r0, [pc, #164]	@ (80010e8 <list_files_on_sd+0xcc>)
 8001044:	f005 ff34 	bl	8006eb0 <f_readdir>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	4b27      	ldr	r3, [pc, #156]	@ (80010ec <list_files_on_sd+0xd0>)
 800104e:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK || fno.fname[0] == 0) break; // Error o fin de directorio
 8001050:	4b26      	ldr	r3, [pc, #152]	@ (80010ec <list_files_on_sd+0xd0>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d138      	bne.n	80010ca <list_files_on_sd+0xae>
 8001058:	4b25      	ldr	r3, [pc, #148]	@ (80010f0 <list_files_on_sd+0xd4>)
 800105a:	7d9b      	ldrb	r3, [r3, #22]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d034      	beq.n	80010ca <list_files_on_sd+0xae>

            // Filtrar solo archivos .txt (no directorios)
            if (!(fno.fattrib & AM_DIR)) {
 8001060:	4b23      	ldr	r3, [pc, #140]	@ (80010f0 <list_files_on_sd+0xd4>)
 8001062:	7a1b      	ldrb	r3, [r3, #8]
 8001064:	f003 0310 	and.w	r3, r3, #16
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1e9      	bne.n	8001040 <list_files_on_sd+0x24>
                // Verificar si termina en .txt o .TXT
                char *ext = strrchr(fno.fname, '.');
 800106c:	212e      	movs	r1, #46	@ 0x2e
 800106e:	4821      	ldr	r0, [pc, #132]	@ (80010f4 <list_files_on_sd+0xd8>)
 8001070:	f006 f8e6 	bl	8007240 <strrchr>
 8001074:	6078      	str	r0, [r7, #4]
                if (ext != NULL && (strcmp(ext, ".txt") == 0 || strcmp(ext, ".TXT") == 0)) {
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0e1      	beq.n	8001040 <list_files_on_sd+0x24>
 800107c:	491e      	ldr	r1, [pc, #120]	@ (80010f8 <list_files_on_sd+0xdc>)
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff f8c6 	bl	8000210 <strcmp>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d006      	beq.n	8001098 <list_files_on_sd+0x7c>
 800108a:	491c      	ldr	r1, [pc, #112]	@ (80010fc <list_files_on_sd+0xe0>)
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff f8bf 	bl	8000210 <strcmp>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1d3      	bne.n	8001040 <list_files_on_sd+0x24>
                    if (fileCount < MAX_FILES) {
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <list_files_on_sd+0xc4>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b09      	cmp	r3, #9
 800109e:	d8cf      	bhi.n	8001040 <list_files_on_sd+0x24>
                        strcpy(fileList[fileCount], fno.fname);
 80010a0:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <list_files_on_sd+0xc4>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	4a13      	ldr	r2, [pc, #76]	@ (8001100 <list_files_on_sd+0xe4>)
 80010b2:	4413      	add	r3, r2
 80010b4:	490f      	ldr	r1, [pc, #60]	@ (80010f4 <list_files_on_sd+0xd8>)
 80010b6:	4618      	mov	r0, r3
 80010b8:	f006 f904 	bl	80072c4 <strcpy>
                        fileCount++;
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <list_files_on_sd+0xc4>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <list_files_on_sd+0xc4>)
 80010c6:	701a      	strb	r2, [r3, #0]
            fres = f_readdir(&dir, &fno);
 80010c8:	e7ba      	b.n	8001040 <list_files_on_sd+0x24>
                    }
                }
            }
        }
        f_closedir(&dir);
 80010ca:	4807      	ldr	r0, [pc, #28]	@ (80010e8 <list_files_on_sd+0xcc>)
 80010cc:	f005 feca 	bl	8006e64 <f_closedir>
    } else {
        transmit_uart("Error al abrir directorio de la SD.\r\n");
    }
}
 80010d0:	e002      	b.n	80010d8 <list_files_on_sd+0xbc>
        transmit_uart("Error al abrir directorio de la SD.\r\n");
 80010d2:	480c      	ldr	r0, [pc, #48]	@ (8001104 <list_files_on_sd+0xe8>)
 80010d4:	f7ff ff7a 	bl	8000fcc <transmit_uart>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20002572 	.word	0x20002572
 80010e4:	08007b9c 	.word	0x08007b9c
 80010e8:	200021a4 	.word	0x200021a4
 80010ec:	200021a0 	.word	0x200021a0
 80010f0:	200021d8 	.word	0x200021d8
 80010f4:	200021ee 	.word	0x200021ee
 80010f8:	08007ba0 	.word	0x08007ba0
 80010fc:	08007ba8 	.word	0x08007ba8
 8001100:	200024f0 	.word	0x200024f0
 8001104:	08007bb0 	.word	0x08007bb0

08001108 <display_menu>:

// Función para mostrar el menú en consola
void display_menu(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08e      	sub	sp, #56	@ 0x38
 800110c:	af00      	add	r7, sp, #0
    transmit_uart("\r\n========================================\r\n");
 800110e:	4827      	ldr	r0, [pc, #156]	@ (80011ac <display_menu+0xa4>)
 8001110:	f7ff ff5c 	bl	8000fcc <transmit_uart>
    transmit_uart("   GRAFICADOR DE ARTE ASCII - Lab 7\r\n");
 8001114:	4826      	ldr	r0, [pc, #152]	@ (80011b0 <display_menu+0xa8>)
 8001116:	f7ff ff59 	bl	8000fcc <transmit_uart>
    transmit_uart("========================================\r\n");
 800111a:	4826      	ldr	r0, [pc, #152]	@ (80011b4 <display_menu+0xac>)
 800111c:	f7ff ff56 	bl	8000fcc <transmit_uart>

    if (fileCount == 0) {
 8001120:	4b25      	ldr	r3, [pc, #148]	@ (80011b8 <display_menu+0xb0>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <display_menu+0x28>
        transmit_uart("No se encontraron archivos .txt en la SD.\r\n");
 8001128:	4824      	ldr	r0, [pc, #144]	@ (80011bc <display_menu+0xb4>)
 800112a:	f7ff ff4f 	bl	8000fcc <transmit_uart>
 800112e:	e03a      	b.n	80011a6 <display_menu+0x9e>
        return;
    }

    transmit_uart("Archivos encontrados:\r\n\r\n");
 8001130:	4823      	ldr	r0, [pc, #140]	@ (80011c0 <display_menu+0xb8>)
 8001132:	f7ff ff4b 	bl	8000fcc <transmit_uart>

    for (uint8_t i = 0; i < fileCount; i++) {
 8001136:	2300      	movs	r3, #0
 8001138:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800113c:	e019      	b.n	8001172 <display_menu+0x6a>
        char line[50];
        sprintf(line, "  %d) %s\r\n", i + 1, fileList[i]);
 800113e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001142:	1c59      	adds	r1, r3, #1
 8001144:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	4a1c      	ldr	r2, [pc, #112]	@ (80011c4 <display_menu+0xbc>)
 8001154:	4413      	add	r3, r2
 8001156:	4638      	mov	r0, r7
 8001158:	460a      	mov	r2, r1
 800115a:	491b      	ldr	r1, [pc, #108]	@ (80011c8 <display_menu+0xc0>)
 800115c:	f006 f846 	bl	80071ec <siprintf>
        transmit_uart(line);
 8001160:	463b      	mov	r3, r7
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff32 	bl	8000fcc <transmit_uart>
    for (uint8_t i = 0; i < fileCount; i++) {
 8001168:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800116c:	3301      	adds	r3, #1
 800116e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001172:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <display_menu+0xb0>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800117a:	429a      	cmp	r2, r3
 800117c:	d3df      	bcc.n	800113e <display_menu+0x36>
    }

    transmit_uart("\r\nSeleccione el archivo a mostrar (1-");
 800117e:	4813      	ldr	r0, [pc, #76]	@ (80011cc <display_menu+0xc4>)
 8001180:	f7ff ff24 	bl	8000fcc <transmit_uart>
    char maxNum[3];
    sprintf(maxNum, "%d", fileCount);
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <display_menu+0xb0>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800118e:	4910      	ldr	r1, [pc, #64]	@ (80011d0 <display_menu+0xc8>)
 8001190:	4618      	mov	r0, r3
 8001192:	f006 f82b 	bl	80071ec <siprintf>
    transmit_uart(maxNum);
 8001196:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff16 	bl	8000fcc <transmit_uart>
    transmit_uart("): ");
 80011a0:	480c      	ldr	r0, [pc, #48]	@ (80011d4 <display_menu+0xcc>)
 80011a2:	f7ff ff13 	bl	8000fcc <transmit_uart>
}
 80011a6:	3738      	adds	r7, #56	@ 0x38
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	08007bd8 	.word	0x08007bd8
 80011b0:	08007c08 	.word	0x08007c08
 80011b4:	08007c30 	.word	0x08007c30
 80011b8:	20002572 	.word	0x20002572
 80011bc:	08007c5c 	.word	0x08007c5c
 80011c0:	08007c88 	.word	0x08007c88
 80011c4:	200024f0 	.word	0x200024f0
 80011c8:	08007ca4 	.word	0x08007ca4
 80011cc:	08007cb0 	.word	0x08007cb0
 80011d0:	08007cd8 	.word	0x08007cd8
 80011d4:	08007cdc 	.word	0x08007cdc

080011d8 <display_ascii_art>:

// Función para leer y mostrar el contenido del archivo ASCII seleccionado
void display_ascii_art(uint8_t fileIndex)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
    if (fileIndex >= fileCount) {
 80011e2:	4b24      	ldr	r3, [pc, #144]	@ (8001274 <display_ascii_art+0x9c>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	79fa      	ldrb	r2, [r7, #7]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d303      	bcc.n	80011f4 <display_ascii_art+0x1c>
        transmit_uart("\r\nSeleccion invalida.\r\n");
 80011ec:	4822      	ldr	r0, [pc, #136]	@ (8001278 <display_ascii_art+0xa0>)
 80011ee:	f7ff feed 	bl	8000fcc <transmit_uart>
        return;
 80011f2:	e03c      	b.n	800126e <display_ascii_art+0x96>
    }

    fres = f_open(&fil, fileList[fileIndex], FA_READ);
 80011f4:	79fa      	ldrb	r2, [r7, #7]
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	4a1e      	ldr	r2, [pc, #120]	@ (800127c <display_ascii_art+0xa4>)
 8001202:	4413      	add	r3, r2
 8001204:	2201      	movs	r2, #1
 8001206:	4619      	mov	r1, r3
 8001208:	481d      	ldr	r0, [pc, #116]	@ (8001280 <display_ascii_art+0xa8>)
 800120a:	f005 f9e9 	bl	80065e0 <f_open>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <display_ascii_art+0xac>)
 8001214:	701a      	strb	r2, [r3, #0]

    if (fres == FR_OK) {
 8001216:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <display_ascii_art+0xac>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d124      	bne.n	8001268 <display_ascii_art+0x90>
        transmit_uart("\r\n\r\n--- Mostrando: ");
 800121e:	481a      	ldr	r0, [pc, #104]	@ (8001288 <display_ascii_art+0xb0>)
 8001220:	f7ff fed4 	bl	8000fcc <transmit_uart>
        transmit_uart(fileList[fileIndex]);
 8001224:	79fa      	ldrb	r2, [r7, #7]
 8001226:	4613      	mov	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	4a12      	ldr	r2, [pc, #72]	@ (800127c <display_ascii_art+0xa4>)
 8001232:	4413      	add	r3, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fec9 	bl	8000fcc <transmit_uart>
        transmit_uart(" ---\r\n\r\n");
 800123a:	4814      	ldr	r0, [pc, #80]	@ (800128c <display_ascii_art+0xb4>)
 800123c:	f7ff fec6 	bl	8000fcc <transmit_uart>

        // Leer y mostrar línea por línea
        while (f_gets(buffer, sizeof(buffer), &fil)) {
 8001240:	e002      	b.n	8001248 <display_ascii_art+0x70>
            transmit_uart(buffer);
 8001242:	4813      	ldr	r0, [pc, #76]	@ (8001290 <display_ascii_art+0xb8>)
 8001244:	f7ff fec2 	bl	8000fcc <transmit_uart>
        while (f_gets(buffer, sizeof(buffer), &fil)) {
 8001248:	4a0d      	ldr	r2, [pc, #52]	@ (8001280 <display_ascii_art+0xa8>)
 800124a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800124e:	4810      	ldr	r0, [pc, #64]	@ (8001290 <display_ascii_art+0xb8>)
 8001250:	f005 fe6b 	bl	8006f2a <f_gets>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f3      	bne.n	8001242 <display_ascii_art+0x6a>
        }

        f_close(&fil);
 800125a:	4809      	ldr	r0, [pc, #36]	@ (8001280 <display_ascii_art+0xa8>)
 800125c:	f005 fd65 	bl	8006d2a <f_close>
        transmit_uart("\r\n\r\n--- Fin del archivo ---\r\n");
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <display_ascii_art+0xbc>)
 8001262:	f7ff feb3 	bl	8000fcc <transmit_uart>
 8001266:	e002      	b.n	800126e <display_ascii_art+0x96>
    } else {
        transmit_uart("\r\nError al abrir el archivo.\r\n");
 8001268:	480b      	ldr	r0, [pc, #44]	@ (8001298 <display_ascii_art+0xc0>)
 800126a:	f7ff feaf 	bl	8000fcc <transmit_uart>
    }
}
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20002572 	.word	0x20002572
 8001278:	08007ce0 	.word	0x08007ce0
 800127c:	200024f0 	.word	0x200024f0
 8001280:	20001170 	.word	0x20001170
 8001284:	200021a0 	.word	0x200021a0
 8001288:	08007cf8 	.word	0x08007cf8
 800128c:	08007d0c 	.word	0x08007d0c
 8001290:	200022f0 	.word	0x200022f0
 8001294:	08007d18 	.word	0x08007d18
 8001298:	08007d38 	.word	0x08007d38

0800129c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a2:	f000 fb13 	bl	80018cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a6:	f000 f85b 	bl	8001360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012aa:	f000 f927 	bl	80014fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012ae:	f000 f8fb 	bl	80014a8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80012b2:	f000 f8c3 	bl	800143c <MX_SPI1_Init>
  MX_FATFS_Init();
 80012b6:	f002 fd1b 	bl	8003cf0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  // Mensaje de bienvenida
  transmit_uart("\r\n\r\n*** Iniciando sistema... ***\r\n");
 80012ba:	4820      	ldr	r0, [pc, #128]	@ (800133c <main+0xa0>)
 80012bc:	f7ff fe86 	bl	8000fcc <transmit_uart>

  // --- MONTAJE DE LA SD ---
  fres = f_mount(&fs, "", 1);
 80012c0:	2201      	movs	r2, #1
 80012c2:	491f      	ldr	r1, [pc, #124]	@ (8001340 <main+0xa4>)
 80012c4:	481f      	ldr	r0, [pc, #124]	@ (8001344 <main+0xa8>)
 80012c6:	f005 f945 	bl	8006554 <f_mount>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001348 <main+0xac>)
 80012d0:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK) {
 80012d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001348 <main+0xac>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d105      	bne.n	80012e6 <main+0x4a>
      transmit_uart("Micro SD montada exitosamente!\r\n");
 80012da:	481c      	ldr	r0, [pc, #112]	@ (800134c <main+0xb0>)
 80012dc:	f7ff fe76 	bl	8000fcc <transmit_uart>
      transmit_uart("Verifique la conexion y reinicie.\r\n");
      while(1); // Detener ejecución
  }

  // Listar archivos .txt en la SD
  list_files_on_sd();
 80012e0:	f7ff fe9c 	bl	800101c <list_files_on_sd>
 80012e4:	e007      	b.n	80012f6 <main+0x5a>
      transmit_uart("ERROR: No se pudo montar la SD.\r\n");
 80012e6:	481a      	ldr	r0, [pc, #104]	@ (8001350 <main+0xb4>)
 80012e8:	f7ff fe70 	bl	8000fcc <transmit_uart>
      transmit_uart("Verifique la conexion y reinicie.\r\n");
 80012ec:	4819      	ldr	r0, [pc, #100]	@ (8001354 <main+0xb8>)
 80012ee:	f7ff fe6d 	bl	8000fcc <transmit_uart>
      while(1); // Detener ejecución
 80012f2:	bf00      	nop
 80012f4:	e7fd      	b.n	80012f2 <main+0x56>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Mostrar menú
    display_menu();
 80012f6:	f7ff ff07 	bl	8001108 <display_menu>

    // Esperar selección del usuario
    uint8_t selection = receive_uart_char();
 80012fa:	f7ff fe7d 	bl	8000ff8 <receive_uart_char>
 80012fe:	4603      	mov	r3, r0
 8001300:	71bb      	strb	r3, [r7, #6]

    // Echo del carácter recibido
    HAL_UART_Transmit(&huart2, &selection, 1, HAL_MAX_DELAY);
 8001302:	1db9      	adds	r1, r7, #6
 8001304:	f04f 33ff 	mov.w	r3, #4294967295
 8001308:	2201      	movs	r2, #1
 800130a:	4813      	ldr	r0, [pc, #76]	@ (8001358 <main+0xbc>)
 800130c:	f002 f89e 	bl	800344c <HAL_UART_Transmit>

    // Convertir de ASCII a número
    if (selection >= '1' && selection <= '9') {
 8001310:	79bb      	ldrb	r3, [r7, #6]
 8001312:	2b30      	cmp	r3, #48	@ 0x30
 8001314:	d90a      	bls.n	800132c <main+0x90>
 8001316:	79bb      	ldrb	r3, [r7, #6]
 8001318:	2b39      	cmp	r3, #57	@ 0x39
 800131a:	d807      	bhi.n	800132c <main+0x90>
        uint8_t fileIndex = selection - '1';
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	3b31      	subs	r3, #49	@ 0x31
 8001320:	71fb      	strb	r3, [r7, #7]
        display_ascii_art(fileIndex);
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff57 	bl	80011d8 <display_ascii_art>
    if (selection >= '1' && selection <= '9') {
 800132a:	e002      	b.n	8001332 <main+0x96>
    } else {
        transmit_uart("\r\nOpcion invalida. Intente de nuevo.\r\n");
 800132c:	480b      	ldr	r0, [pc, #44]	@ (800135c <main+0xc0>)
 800132e:	f7ff fe4d 	bl	8000fcc <transmit_uart>
    }

    // Pequeña pausa antes de volver a mostrar el menú
    HAL_Delay(1000);
 8001332:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001336:	f000 fb3b 	bl	80019b0 <HAL_Delay>
  {
 800133a:	e7dc      	b.n	80012f6 <main+0x5a>
 800133c:	08007d58 	.word	0x08007d58
 8001340:	08007d7c 	.word	0x08007d7c
 8001344:	20000138 	.word	0x20000138
 8001348:	200021a0 	.word	0x200021a0
 800134c:	08007d80 	.word	0x08007d80
 8001350:	08007da4 	.word	0x08007da4
 8001354:	08007dc8 	.word	0x08007dc8
 8001358:	200000f0 	.word	0x200000f0
 800135c:	08007dec 	.word	0x08007dec

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b094      	sub	sp, #80	@ 0x50
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	2234      	movs	r2, #52	@ 0x34
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f005 ff5e 	bl	8007230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <SystemClock_Config+0xd4>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138c:	4a29      	ldr	r2, [pc, #164]	@ (8001434 <SystemClock_Config+0xd4>)
 800138e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001392:	6413      	str	r3, [r2, #64]	@ 0x40
 8001394:	4b27      	ldr	r3, [pc, #156]	@ (8001434 <SystemClock_Config+0xd4>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013a0:	2300      	movs	r3, #0
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	4b24      	ldr	r3, [pc, #144]	@ (8001438 <SystemClock_Config+0xd8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013ac:	4a22      	ldr	r2, [pc, #136]	@ (8001438 <SystemClock_Config+0xd8>)
 80013ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b20      	ldr	r3, [pc, #128]	@ (8001438 <SystemClock_Config+0xd8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c4:	2301      	movs	r3, #1
 80013c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c8:	2310      	movs	r3, #16
 80013ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013cc:	2302      	movs	r3, #2
 80013ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013d0:	2300      	movs	r3, #0
 80013d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013d4:	2310      	movs	r3, #16
 80013d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013d8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013de:	2304      	movs	r3, #4
 80013e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013e2:	2302      	movs	r3, #2
 80013e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4618      	mov	r0, r3
 80013f0:	f001 f8ec 	bl	80025cc <HAL_RCC_OscConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80013fa:	f000 f8ed 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fe:	230f      	movs	r3, #15
 8001400:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001402:	2302      	movs	r3, #2
 8001404:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800140a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800140e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	2102      	movs	r1, #2
 800141a:	4618      	mov	r0, r3
 800141c:	f000 fd8c 	bl	8001f38 <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001426:	f000 f8d7 	bl	80015d8 <Error_Handler>
  }
}
 800142a:	bf00      	nop
 800142c:	3750      	adds	r7, #80	@ 0x50
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	40007000 	.word	0x40007000

0800143c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001440:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001442:	4a18      	ldr	r2, [pc, #96]	@ (80014a4 <MX_SPI1_Init+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001446:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001448:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800144c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800144e:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800145a:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <MX_SPI1_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001466:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001468:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800146c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800146e:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001470:	2210      	movs	r2, #16
 8001472:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001474:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800147a:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <MX_SPI1_Init+0x64>)
 800147c:	2200      	movs	r2, #0
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001480:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001488:	220a      	movs	r2, #10
 800148a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800148c:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <MX_SPI1_Init+0x64>)
 800148e:	f001 fb3b 	bl	8002b08 <HAL_SPI_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001498:	f000 f89e 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000098 	.word	0x20000098
 80014a4:	40013000 	.word	0x40013000

080014a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014ac:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	@ (80014f8 <MX_USART2_UART_Init+0x50>)
 80014b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014e0:	f001 ff64 	bl	80033ac <HAL_UART_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ea:	f000 f875 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200000f0 	.word	0x200000f0
 80014f8:	40004400 	.word	0x40004400

080014fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	@ 0x28
 8001500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <MX_GPIO_Init+0xd0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a2c      	ldr	r2, [pc, #176]	@ (80015cc <MX_GPIO_Init+0xd0>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b2a      	ldr	r3, [pc, #168]	@ (80015cc <MX_GPIO_Init+0xd0>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b26      	ldr	r3, [pc, #152]	@ (80015cc <MX_GPIO_Init+0xd0>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	4a25      	ldr	r2, [pc, #148]	@ (80015cc <MX_GPIO_Init+0xd0>)
 8001538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800153c:	6313      	str	r3, [r2, #48]	@ 0x30
 800153e:	4b23      	ldr	r3, [pc, #140]	@ (80015cc <MX_GPIO_Init+0xd0>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	4b1f      	ldr	r3, [pc, #124]	@ (80015cc <MX_GPIO_Init+0xd0>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a1e      	ldr	r2, [pc, #120]	@ (80015cc <MX_GPIO_Init+0xd0>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b1c      	ldr	r3, [pc, #112]	@ (80015cc <MX_GPIO_Init+0xd0>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <MX_GPIO_Init+0xd0>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a17      	ldr	r2, [pc, #92]	@ (80015cc <MX_GPIO_Init+0xd0>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <MX_GPIO_Init+0xd0>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 8001582:	2201      	movs	r2, #1
 8001584:	2140      	movs	r1, #64	@ 0x40
 8001586:	4812      	ldr	r0, [pc, #72]	@ (80015d0 <MX_GPIO_Init+0xd4>)
 8001588:	f000 fcbc 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800158c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001592:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	480c      	ldr	r0, [pc, #48]	@ (80015d4 <MX_GPIO_Init+0xd8>)
 80015a4:	f000 fb1a 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SS_Pin */
  GPIO_InitStruct.Pin = SD_SS_Pin;
 80015a8:	2340      	movs	r3, #64	@ 0x40
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015b4:	2301      	movs	r3, #1
 80015b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4804      	ldr	r0, [pc, #16]	@ (80015d0 <MX_GPIO_Init+0xd4>)
 80015c0:	f000 fb0c 	bl	8001bdc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	@ 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020400 	.word	0x40020400
 80015d4:	40020800 	.word	0x40020800

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <Error_Handler+0x8>

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <HAL_MspInit+0x4c>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001630 <HAL_MspInit+0x4c>)
 80015f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <HAL_MspInit+0x4c>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <HAL_MspInit+0x4c>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	4a08      	ldr	r2, [pc, #32]	@ (8001630 <HAL_MspInit+0x4c>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001614:	6413      	str	r3, [r2, #64]	@ 0x40
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <HAL_MspInit+0x4c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001622:	2007      	movs	r0, #7
 8001624:	f000 fa9a 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40023800 	.word	0x40023800

08001634 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	@ 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a19      	ldr	r2, [pc, #100]	@ (80016b8 <HAL_SPI_MspInit+0x84>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d12b      	bne.n	80016ae <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b18      	ldr	r3, [pc, #96]	@ (80016bc <HAL_SPI_MspInit+0x88>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165e:	4a17      	ldr	r2, [pc, #92]	@ (80016bc <HAL_SPI_MspInit+0x88>)
 8001660:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001664:	6453      	str	r3, [r2, #68]	@ 0x44
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <HAL_SPI_MspInit+0x88>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <HAL_SPI_MspInit+0x88>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a10      	ldr	r2, [pc, #64]	@ (80016bc <HAL_SPI_MspInit+0x88>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <HAL_SPI_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800168e:	23e0      	movs	r3, #224	@ 0xe0
 8001690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800169e:	2305      	movs	r3, #5
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <HAL_SPI_MspInit+0x8c>)
 80016aa:	f000 fa97 	bl	8001bdc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	@ 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40013000 	.word	0x40013000
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000

080016c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	@ 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a19      	ldr	r2, [pc, #100]	@ (8001748 <HAL_UART_MspInit+0x84>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d12b      	bne.n	800173e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	4b18      	ldr	r3, [pc, #96]	@ (800174c <HAL_UART_MspInit+0x88>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	4a17      	ldr	r2, [pc, #92]	@ (800174c <HAL_UART_MspInit+0x88>)
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <HAL_UART_MspInit+0x88>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <HAL_UART_MspInit+0x88>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a10      	ldr	r2, [pc, #64]	@ (800174c <HAL_UART_MspInit+0x88>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <HAL_UART_MspInit+0x88>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800171e:	230c      	movs	r3, #12
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172a:	2303      	movs	r3, #3
 800172c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800172e:	2307      	movs	r3, #7
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	@ (8001750 <HAL_UART_MspInit+0x8c>)
 800173a:	f000 fa4f 	bl	8001bdc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800173e:	bf00      	nop
 8001740:	3728      	adds	r7, #40	@ 0x28
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40004400 	.word	0x40004400
 800174c:	40023800 	.word	0x40023800
 8001750:	40020000 	.word	0x40020000

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <NMI_Handler+0x4>

0800175c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <MemManage_Handler+0x4>

0800176c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <BusFault_Handler+0x4>

08001774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <UsageFault_Handler+0x4>

0800177c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0){
 80017ac:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <SysTick_Handler+0x38>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <SysTick_Handler+0x18>
		Timer1--;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <SysTick_Handler+0x38>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <SysTick_Handler+0x38>)
 80017be:	801a      	strh	r2, [r3, #0]
	}
	if(Timer2 > 0){
 80017c0:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <SysTick_Handler+0x3c>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <SysTick_Handler+0x2c>
		Timer2--;
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <SysTick_Handler+0x3c>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <SysTick_Handler+0x3c>)
 80017d2:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d4:	f000 f8cc 	bl	8001970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80017d8:	f000 f9f3 	bl	8001bc2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000090 	.word	0x20000090
 80017e4:	20000092 	.word	0x20000092

080017e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f0:	4a14      	ldr	r2, [pc, #80]	@ (8001844 <_sbrk+0x5c>)
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <_sbrk+0x60>)
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017fc:	4b13      	ldr	r3, [pc, #76]	@ (800184c <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d102      	bne.n	800180a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001804:	4b11      	ldr	r3, [pc, #68]	@ (800184c <_sbrk+0x64>)
 8001806:	4a12      	ldr	r2, [pc, #72]	@ (8001850 <_sbrk+0x68>)
 8001808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180a:	4b10      	ldr	r3, [pc, #64]	@ (800184c <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	429a      	cmp	r2, r3
 8001816:	d207      	bcs.n	8001828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001818:	f005 fd28 	bl	800726c <__errno>
 800181c:	4603      	mov	r3, r0
 800181e:	220c      	movs	r2, #12
 8001820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	e009      	b.n	800183c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001828:	4b08      	ldr	r3, [pc, #32]	@ (800184c <_sbrk+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800182e:	4b07      	ldr	r3, [pc, #28]	@ (800184c <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	4a05      	ldr	r2, [pc, #20]	@ (800184c <_sbrk+0x64>)
 8001838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183a:	68fb      	ldr	r3, [r7, #12]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20020000 	.word	0x20020000
 8001848:	00000400 	.word	0x00000400
 800184c:	20002574 	.word	0x20002574
 8001850:	20002900 	.word	0x20002900

08001854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001858:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <SystemInit+0x20>)
 800185a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800185e:	4a05      	ldr	r2, [pc, #20]	@ (8001874 <SystemInit+0x20>)
 8001860:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001864:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001878:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800187c:	f7ff ffea 	bl	8001854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001880:	480c      	ldr	r0, [pc, #48]	@ (80018b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001882:	490d      	ldr	r1, [pc, #52]	@ (80018b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001884:	4a0d      	ldr	r2, [pc, #52]	@ (80018bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001888:	e002      	b.n	8001890 <LoopCopyDataInit>

0800188a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800188c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188e:	3304      	adds	r3, #4

08001890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001894:	d3f9      	bcc.n	800188a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001896:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001898:	4c0a      	ldr	r4, [pc, #40]	@ (80018c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800189c:	e001      	b.n	80018a2 <LoopFillZerobss>

0800189e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a0:	3204      	adds	r2, #4

080018a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a4:	d3fb      	bcc.n	800189e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018a6:	f005 fce7 	bl	8007278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018aa:	f7ff fcf7 	bl	800129c <main>
  bx  lr    
 80018ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80018bc:	080082f8 	.word	0x080082f8
  ldr r2, =_sbss
 80018c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80018c4:	20002900 	.word	0x20002900

080018c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c8:	e7fe      	b.n	80018c8 <ADC_IRQHandler>
	...

080018cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018d0:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <HAL_Init+0x40>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0d      	ldr	r2, [pc, #52]	@ (800190c <HAL_Init+0x40>)
 80018d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018dc:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <HAL_Init+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <HAL_Init+0x40>)
 80018e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e8:	4b08      	ldr	r3, [pc, #32]	@ (800190c <HAL_Init+0x40>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a07      	ldr	r2, [pc, #28]	@ (800190c <HAL_Init+0x40>)
 80018ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f4:	2003      	movs	r0, #3
 80018f6:	f000 f931 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fa:	2000      	movs	r0, #0
 80018fc:	f000 f808 	bl	8001910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001900:	f7ff fe70 	bl	80015e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023c00 	.word	0x40023c00

08001910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001918:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_InitTick+0x54>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_InitTick+0x58>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001926:	fbb3 f3f1 	udiv	r3, r3, r1
 800192a:	fbb2 f3f3 	udiv	r3, r2, r3
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f93b 	bl	8001baa <HAL_SYSTICK_Config>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e00e      	b.n	800195c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b0f      	cmp	r3, #15
 8001942:	d80a      	bhi.n	800195a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001944:	2200      	movs	r2, #0
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	f000 f911 	bl	8001b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001950:	4a06      	ldr	r2, [pc, #24]	@ (800196c <HAL_InitTick+0x5c>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	e000      	b.n	800195c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000004 	.word	0x20000004
 8001968:	2000000c 	.word	0x2000000c
 800196c:	20000008 	.word	0x20000008

08001970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <HAL_IncTick+0x20>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_IncTick+0x24>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4413      	add	r3, r2
 8001980:	4a04      	ldr	r2, [pc, #16]	@ (8001994 <HAL_IncTick+0x24>)
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	2000000c 	.word	0x2000000c
 8001994:	20002578 	.word	0x20002578

08001998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return uwTick;
 800199c:	4b03      	ldr	r3, [pc, #12]	@ (80019ac <HAL_GetTick+0x14>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20002578 	.word	0x20002578

080019b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b8:	f7ff ffee 	bl	8001998 <HAL_GetTick>
 80019bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c8:	d005      	beq.n	80019d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ca:	4b0a      	ldr	r3, [pc, #40]	@ (80019f4 <HAL_Delay+0x44>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4413      	add	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019d6:	bf00      	nop
 80019d8:	f7ff ffde 	bl	8001998 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d8f7      	bhi.n	80019d8 <HAL_Delay+0x28>
  {
  }
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	2000000c 	.word	0x2000000c

080019f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a08:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a14:	4013      	ands	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2a:	4a04      	ldr	r2, [pc, #16]	@ (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	60d3      	str	r3, [r2, #12]
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a44:	4b04      	ldr	r3, [pc, #16]	@ (8001a58 <__NVIC_GetPriorityGrouping+0x18>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	f003 0307 	and.w	r3, r3, #7
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db0a      	blt.n	8001a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	490c      	ldr	r1, [pc, #48]	@ (8001aa8 <__NVIC_SetPriority+0x4c>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a84:	e00a      	b.n	8001a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4908      	ldr	r1, [pc, #32]	@ (8001aac <__NVIC_SetPriority+0x50>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3b04      	subs	r3, #4
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	761a      	strb	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000e100 	.word	0xe000e100
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	@ 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f1c3 0307 	rsb	r3, r3, #7
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	bf28      	it	cs
 8001ace:	2304      	movcs	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d902      	bls.n	8001ae0 <NVIC_EncodePriority+0x30>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3b03      	subs	r3, #3
 8001ade:	e000      	b.n	8001ae2 <NVIC_EncodePriority+0x32>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43d9      	mvns	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	4313      	orrs	r3, r2
         );
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	@ 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b28:	d301      	bcc.n	8001b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00f      	b.n	8001b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b58 <SysTick_Config+0x40>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b36:	210f      	movs	r1, #15
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f7ff ff8e 	bl	8001a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b40:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <SysTick_Config+0x40>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b46:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <SysTick_Config+0x40>)
 8001b48:	2207      	movs	r2, #7
 8001b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	e000e010 	.word	0xe000e010

08001b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff47 	bl	80019f8 <__NVIC_SetPriorityGrouping>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b84:	f7ff ff5c 	bl	8001a40 <__NVIC_GetPriorityGrouping>
 8001b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	6978      	ldr	r0, [r7, #20]
 8001b90:	f7ff ff8e 	bl	8001ab0 <NVIC_EncodePriority>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff5d 	bl	8001a5c <__NVIC_SetPriority>
}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ffb0 	bl	8001b18 <SysTick_Config>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001bc6:	f000 f802 	bl	8001bce <HAL_SYSTICK_Callback>
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	@ 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	e165      	b.n	8001ec4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	f040 8154 	bne.w	8001ebe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d005      	beq.n	8001c2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d130      	bne.n	8001c90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c64:	2201      	movs	r2, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 0201 	and.w	r2, r3, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d017      	beq.n	8001ccc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d123      	bne.n	8001d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	220f      	movs	r2, #15
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	08da      	lsrs	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3208      	adds	r2, #8
 8001d1a:	69b9      	ldr	r1, [r7, #24]
 8001d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0203 	and.w	r2, r3, #3
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80ae 	beq.w	8001ebe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b5d      	ldr	r3, [pc, #372]	@ (8001edc <HAL_GPIO_Init+0x300>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	4a5c      	ldr	r2, [pc, #368]	@ (8001edc <HAL_GPIO_Init+0x300>)
 8001d6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d72:	4b5a      	ldr	r3, [pc, #360]	@ (8001edc <HAL_GPIO_Init+0x300>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d7e:	4a58      	ldr	r2, [pc, #352]	@ (8001ee0 <HAL_GPIO_Init+0x304>)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4f      	ldr	r2, [pc, #316]	@ (8001ee4 <HAL_GPIO_Init+0x308>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d025      	beq.n	8001df6 <HAL_GPIO_Init+0x21a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4e      	ldr	r2, [pc, #312]	@ (8001ee8 <HAL_GPIO_Init+0x30c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01f      	beq.n	8001df2 <HAL_GPIO_Init+0x216>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4d      	ldr	r2, [pc, #308]	@ (8001eec <HAL_GPIO_Init+0x310>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d019      	beq.n	8001dee <HAL_GPIO_Init+0x212>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4c      	ldr	r2, [pc, #304]	@ (8001ef0 <HAL_GPIO_Init+0x314>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_GPIO_Init+0x20e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ef4 <HAL_GPIO_Init+0x318>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00d      	beq.n	8001de6 <HAL_GPIO_Init+0x20a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4a      	ldr	r2, [pc, #296]	@ (8001ef8 <HAL_GPIO_Init+0x31c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d007      	beq.n	8001de2 <HAL_GPIO_Init+0x206>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a49      	ldr	r2, [pc, #292]	@ (8001efc <HAL_GPIO_Init+0x320>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_GPIO_Init+0x202>
 8001dda:	2306      	movs	r3, #6
 8001ddc:	e00c      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001dde:	2307      	movs	r3, #7
 8001de0:	e00a      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001de2:	2305      	movs	r3, #5
 8001de4:	e008      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001de6:	2304      	movs	r3, #4
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001dea:	2303      	movs	r3, #3
 8001dec:	e004      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001df6:	2300      	movs	r3, #0
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	f002 0203 	and.w	r2, r2, #3
 8001dfe:	0092      	lsls	r2, r2, #2
 8001e00:	4093      	lsls	r3, r2
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e08:	4935      	ldr	r1, [pc, #212]	@ (8001ee0 <HAL_GPIO_Init+0x304>)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e16:	4b3a      	ldr	r3, [pc, #232]	@ (8001f00 <HAL_GPIO_Init+0x324>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3a:	4a31      	ldr	r2, [pc, #196]	@ (8001f00 <HAL_GPIO_Init+0x324>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e40:	4b2f      	ldr	r3, [pc, #188]	@ (8001f00 <HAL_GPIO_Init+0x324>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e64:	4a26      	ldr	r2, [pc, #152]	@ (8001f00 <HAL_GPIO_Init+0x324>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e6a:	4b25      	ldr	r3, [pc, #148]	@ (8001f00 <HAL_GPIO_Init+0x324>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001f00 <HAL_GPIO_Init+0x324>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <HAL_GPIO_Init+0x324>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb8:	4a11      	ldr	r2, [pc, #68]	@ (8001f00 <HAL_GPIO_Init+0x324>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	2b0f      	cmp	r3, #15
 8001ec8:	f67f ae96 	bls.w	8001bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3724      	adds	r7, #36	@ 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40013800 	.word	0x40013800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020c00 	.word	0x40020c00
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40021400 	.word	0x40021400
 8001efc:	40021800 	.word	0x40021800
 8001f00:	40013c00 	.word	0x40013c00

08001f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
 8001f10:	4613      	mov	r3, r2
 8001f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f14:	787b      	ldrb	r3, [r7, #1]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f1a:	887a      	ldrh	r2, [r7, #2]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f20:	e003      	b.n	8001f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f22:	887b      	ldrh	r3, [r7, #2]
 8001f24:	041a      	lsls	r2, r3, #16
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	619a      	str	r2, [r3, #24]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0cc      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f4c:	4b68      	ldr	r3, [pc, #416]	@ (80020f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d90c      	bls.n	8001f74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5a:	4b65      	ldr	r3, [pc, #404]	@ (80020f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	4b63      	ldr	r3, [pc, #396]	@ (80020f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0b8      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d020      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f8c:	4b59      	ldr	r3, [pc, #356]	@ (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	4a58      	ldr	r2, [pc, #352]	@ (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fa4:	4b53      	ldr	r3, [pc, #332]	@ (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	4a52      	ldr	r2, [pc, #328]	@ (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001faa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001fae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb0:	4b50      	ldr	r3, [pc, #320]	@ (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	494d      	ldr	r1, [pc, #308]	@ (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d044      	beq.n	8002058 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	4b47      	ldr	r3, [pc, #284]	@ (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d119      	bne.n	8002016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e07f      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d003      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d107      	bne.n	8002006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d109      	bne.n	8002016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e06f      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002006:	4b3b      	ldr	r3, [pc, #236]	@ (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e067      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002016:	4b37      	ldr	r3, [pc, #220]	@ (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 0203 	bic.w	r2, r3, #3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	4934      	ldr	r1, [pc, #208]	@ (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002024:	4313      	orrs	r3, r2
 8002026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002028:	f7ff fcb6 	bl	8001998 <HAL_GetTick>
 800202c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202e:	e00a      	b.n	8002046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002030:	f7ff fcb2 	bl	8001998 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e04f      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002046:	4b2b      	ldr	r3, [pc, #172]	@ (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 020c 	and.w	r2, r3, #12
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	429a      	cmp	r2, r3
 8002056:	d1eb      	bne.n	8002030 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002058:	4b25      	ldr	r3, [pc, #148]	@ (80020f0 <HAL_RCC_ClockConfig+0x1b8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d20c      	bcs.n	8002080 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b22      	ldr	r3, [pc, #136]	@ (80020f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	4b20      	ldr	r3, [pc, #128]	@ (80020f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e032      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d008      	beq.n	800209e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800208c:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4916      	ldr	r1, [pc, #88]	@ (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	4313      	orrs	r3, r2
 800209c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020aa:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	490e      	ldr	r1, [pc, #56]	@ (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020be:	f000 f855 	bl	800216c <HAL_RCC_GetSysClockFreq>
 80020c2:	4602      	mov	r2, r0
 80020c4:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	490a      	ldr	r1, [pc, #40]	@ (80020f8 <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	5ccb      	ldrb	r3, [r1, r3]
 80020d2:	fa22 f303 	lsr.w	r3, r2, r3
 80020d6:	4a09      	ldr	r2, [pc, #36]	@ (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80020da:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fc16 	bl	8001910 <HAL_InitTick>

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023c00 	.word	0x40023c00
 80020f4:	40023800 	.word	0x40023800
 80020f8:	08007e5c 	.word	0x08007e5c
 80020fc:	20000004 	.word	0x20000004
 8002100:	20000008 	.word	0x20000008

08002104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002108:	4b03      	ldr	r3, [pc, #12]	@ (8002118 <HAL_RCC_GetHCLKFreq+0x14>)
 800210a:	681b      	ldr	r3, [r3, #0]
}
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	20000004 	.word	0x20000004

0800211c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002120:	f7ff fff0 	bl	8002104 <HAL_RCC_GetHCLKFreq>
 8002124:	4602      	mov	r2, r0
 8002126:	4b05      	ldr	r3, [pc, #20]	@ (800213c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	0a9b      	lsrs	r3, r3, #10
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	4903      	ldr	r1, [pc, #12]	@ (8002140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002132:	5ccb      	ldrb	r3, [r1, r3]
 8002134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002138:	4618      	mov	r0, r3
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40023800 	.word	0x40023800
 8002140:	08007e6c 	.word	0x08007e6c

08002144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002148:	f7ff ffdc 	bl	8002104 <HAL_RCC_GetHCLKFreq>
 800214c:	4602      	mov	r2, r0
 800214e:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	0b5b      	lsrs	r3, r3, #13
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	4903      	ldr	r1, [pc, #12]	@ (8002168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800215a:	5ccb      	ldrb	r3, [r1, r3]
 800215c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40023800 	.word	0x40023800
 8002168:	08007e6c 	.word	0x08007e6c

0800216c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800216c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002170:	b0ae      	sub	sp, #184	@ 0xb8
 8002172:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002192:	4bcb      	ldr	r3, [pc, #812]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b0c      	cmp	r3, #12
 800219c:	f200 8206 	bhi.w	80025ac <HAL_RCC_GetSysClockFreq+0x440>
 80021a0:	a201      	add	r2, pc, #4	@ (adr r2, 80021a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80021a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a6:	bf00      	nop
 80021a8:	080021dd 	.word	0x080021dd
 80021ac:	080025ad 	.word	0x080025ad
 80021b0:	080025ad 	.word	0x080025ad
 80021b4:	080025ad 	.word	0x080025ad
 80021b8:	080021e5 	.word	0x080021e5
 80021bc:	080025ad 	.word	0x080025ad
 80021c0:	080025ad 	.word	0x080025ad
 80021c4:	080025ad 	.word	0x080025ad
 80021c8:	080021ed 	.word	0x080021ed
 80021cc:	080025ad 	.word	0x080025ad
 80021d0:	080025ad 	.word	0x080025ad
 80021d4:	080025ad 	.word	0x080025ad
 80021d8:	080023dd 	.word	0x080023dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021dc:	4bb9      	ldr	r3, [pc, #740]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80021de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021e2:	e1e7      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021e4:	4bb8      	ldr	r3, [pc, #736]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80021e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021ea:	e1e3      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021ec:	4bb4      	ldr	r3, [pc, #720]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021f8:	4bb1      	ldr	r3, [pc, #708]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d071      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002204:	4bae      	ldr	r3, [pc, #696]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	099b      	lsrs	r3, r3, #6
 800220a:	2200      	movs	r2, #0
 800220c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002210:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002214:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800221c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002220:	2300      	movs	r3, #0
 8002222:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002226:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800222a:	4622      	mov	r2, r4
 800222c:	462b      	mov	r3, r5
 800222e:	f04f 0000 	mov.w	r0, #0
 8002232:	f04f 0100 	mov.w	r1, #0
 8002236:	0159      	lsls	r1, r3, #5
 8002238:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800223c:	0150      	lsls	r0, r2, #5
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4621      	mov	r1, r4
 8002244:	1a51      	subs	r1, r2, r1
 8002246:	6439      	str	r1, [r7, #64]	@ 0x40
 8002248:	4629      	mov	r1, r5
 800224a:	eb63 0301 	sbc.w	r3, r3, r1
 800224e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800225c:	4649      	mov	r1, r9
 800225e:	018b      	lsls	r3, r1, #6
 8002260:	4641      	mov	r1, r8
 8002262:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002266:	4641      	mov	r1, r8
 8002268:	018a      	lsls	r2, r1, #6
 800226a:	4641      	mov	r1, r8
 800226c:	1a51      	subs	r1, r2, r1
 800226e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002270:	4649      	mov	r1, r9
 8002272:	eb63 0301 	sbc.w	r3, r3, r1
 8002276:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002284:	4649      	mov	r1, r9
 8002286:	00cb      	lsls	r3, r1, #3
 8002288:	4641      	mov	r1, r8
 800228a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800228e:	4641      	mov	r1, r8
 8002290:	00ca      	lsls	r2, r1, #3
 8002292:	4610      	mov	r0, r2
 8002294:	4619      	mov	r1, r3
 8002296:	4603      	mov	r3, r0
 8002298:	4622      	mov	r2, r4
 800229a:	189b      	adds	r3, r3, r2
 800229c:	633b      	str	r3, [r7, #48]	@ 0x30
 800229e:	462b      	mov	r3, r5
 80022a0:	460a      	mov	r2, r1
 80022a2:	eb42 0303 	adc.w	r3, r2, r3
 80022a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80022b4:	4629      	mov	r1, r5
 80022b6:	024b      	lsls	r3, r1, #9
 80022b8:	4621      	mov	r1, r4
 80022ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022be:	4621      	mov	r1, r4
 80022c0:	024a      	lsls	r2, r1, #9
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022ca:	2200      	movs	r2, #0
 80022cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80022d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80022d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80022d8:	f7fe f802 	bl	80002e0 <__aeabi_uldivmod>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4613      	mov	r3, r2
 80022e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022e6:	e067      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e8:	4b75      	ldr	r3, [pc, #468]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	099b      	lsrs	r3, r3, #6
 80022ee:	2200      	movs	r2, #0
 80022f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80022f4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80022f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002300:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002302:	2300      	movs	r3, #0
 8002304:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002306:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800230a:	4622      	mov	r2, r4
 800230c:	462b      	mov	r3, r5
 800230e:	f04f 0000 	mov.w	r0, #0
 8002312:	f04f 0100 	mov.w	r1, #0
 8002316:	0159      	lsls	r1, r3, #5
 8002318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800231c:	0150      	lsls	r0, r2, #5
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4621      	mov	r1, r4
 8002324:	1a51      	subs	r1, r2, r1
 8002326:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002328:	4629      	mov	r1, r5
 800232a:	eb63 0301 	sbc.w	r3, r3, r1
 800232e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800233c:	4649      	mov	r1, r9
 800233e:	018b      	lsls	r3, r1, #6
 8002340:	4641      	mov	r1, r8
 8002342:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002346:	4641      	mov	r1, r8
 8002348:	018a      	lsls	r2, r1, #6
 800234a:	4641      	mov	r1, r8
 800234c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002350:	4649      	mov	r1, r9
 8002352:	eb63 0b01 	sbc.w	fp, r3, r1
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002362:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002366:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800236a:	4692      	mov	sl, r2
 800236c:	469b      	mov	fp, r3
 800236e:	4623      	mov	r3, r4
 8002370:	eb1a 0303 	adds.w	r3, sl, r3
 8002374:	623b      	str	r3, [r7, #32]
 8002376:	462b      	mov	r3, r5
 8002378:	eb4b 0303 	adc.w	r3, fp, r3
 800237c:	627b      	str	r3, [r7, #36]	@ 0x24
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800238a:	4629      	mov	r1, r5
 800238c:	028b      	lsls	r3, r1, #10
 800238e:	4621      	mov	r1, r4
 8002390:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002394:	4621      	mov	r1, r4
 8002396:	028a      	lsls	r2, r1, #10
 8002398:	4610      	mov	r0, r2
 800239a:	4619      	mov	r1, r3
 800239c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023a0:	2200      	movs	r2, #0
 80023a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80023a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80023a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80023aa:	f7fd ff99 	bl	80002e0 <__aeabi_uldivmod>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4613      	mov	r3, r2
 80023b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023b8:	4b41      	ldr	r3, [pc, #260]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	0c1b      	lsrs	r3, r3, #16
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	3301      	adds	r3, #1
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80023ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80023ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023da:	e0eb      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023dc:	4b38      	ldr	r3, [pc, #224]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023e8:	4b35      	ldr	r3, [pc, #212]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d06b      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f4:	4b32      	ldr	r3, [pc, #200]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	099b      	lsrs	r3, r3, #6
 80023fa:	2200      	movs	r2, #0
 80023fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002400:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002406:	663b      	str	r3, [r7, #96]	@ 0x60
 8002408:	2300      	movs	r3, #0
 800240a:	667b      	str	r3, [r7, #100]	@ 0x64
 800240c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002410:	4622      	mov	r2, r4
 8002412:	462b      	mov	r3, r5
 8002414:	f04f 0000 	mov.w	r0, #0
 8002418:	f04f 0100 	mov.w	r1, #0
 800241c:	0159      	lsls	r1, r3, #5
 800241e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002422:	0150      	lsls	r0, r2, #5
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4621      	mov	r1, r4
 800242a:	1a51      	subs	r1, r2, r1
 800242c:	61b9      	str	r1, [r7, #24]
 800242e:	4629      	mov	r1, r5
 8002430:	eb63 0301 	sbc.w	r3, r3, r1
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002442:	4659      	mov	r1, fp
 8002444:	018b      	lsls	r3, r1, #6
 8002446:	4651      	mov	r1, sl
 8002448:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800244c:	4651      	mov	r1, sl
 800244e:	018a      	lsls	r2, r1, #6
 8002450:	4651      	mov	r1, sl
 8002452:	ebb2 0801 	subs.w	r8, r2, r1
 8002456:	4659      	mov	r1, fp
 8002458:	eb63 0901 	sbc.w	r9, r3, r1
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002468:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800246c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002470:	4690      	mov	r8, r2
 8002472:	4699      	mov	r9, r3
 8002474:	4623      	mov	r3, r4
 8002476:	eb18 0303 	adds.w	r3, r8, r3
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	462b      	mov	r3, r5
 800247e:	eb49 0303 	adc.w	r3, r9, r3
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002490:	4629      	mov	r1, r5
 8002492:	024b      	lsls	r3, r1, #9
 8002494:	4621      	mov	r1, r4
 8002496:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800249a:	4621      	mov	r1, r4
 800249c:	024a      	lsls	r2, r1, #9
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024a6:	2200      	movs	r2, #0
 80024a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80024aa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80024ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80024b0:	f7fd ff16 	bl	80002e0 <__aeabi_uldivmod>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4613      	mov	r3, r2
 80024ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024be:	e065      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x420>
 80024c0:	40023800 	.word	0x40023800
 80024c4:	00f42400 	.word	0x00f42400
 80024c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024cc:	4b3d      	ldr	r3, [pc, #244]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	099b      	lsrs	r3, r3, #6
 80024d2:	2200      	movs	r2, #0
 80024d4:	4618      	mov	r0, r3
 80024d6:	4611      	mov	r1, r2
 80024d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80024de:	2300      	movs	r3, #0
 80024e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80024e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80024e6:	4642      	mov	r2, r8
 80024e8:	464b      	mov	r3, r9
 80024ea:	f04f 0000 	mov.w	r0, #0
 80024ee:	f04f 0100 	mov.w	r1, #0
 80024f2:	0159      	lsls	r1, r3, #5
 80024f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024f8:	0150      	lsls	r0, r2, #5
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4641      	mov	r1, r8
 8002500:	1a51      	subs	r1, r2, r1
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	4649      	mov	r1, r9
 8002506:	eb63 0301 	sbc.w	r3, r3, r1
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002518:	4659      	mov	r1, fp
 800251a:	018b      	lsls	r3, r1, #6
 800251c:	4651      	mov	r1, sl
 800251e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002522:	4651      	mov	r1, sl
 8002524:	018a      	lsls	r2, r1, #6
 8002526:	4651      	mov	r1, sl
 8002528:	1a54      	subs	r4, r2, r1
 800252a:	4659      	mov	r1, fp
 800252c:	eb63 0501 	sbc.w	r5, r3, r1
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	00eb      	lsls	r3, r5, #3
 800253a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800253e:	00e2      	lsls	r2, r4, #3
 8002540:	4614      	mov	r4, r2
 8002542:	461d      	mov	r5, r3
 8002544:	4643      	mov	r3, r8
 8002546:	18e3      	adds	r3, r4, r3
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	464b      	mov	r3, r9
 800254c:	eb45 0303 	adc.w	r3, r5, r3
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800255e:	4629      	mov	r1, r5
 8002560:	028b      	lsls	r3, r1, #10
 8002562:	4621      	mov	r1, r4
 8002564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002568:	4621      	mov	r1, r4
 800256a:	028a      	lsls	r2, r1, #10
 800256c:	4610      	mov	r0, r2
 800256e:	4619      	mov	r1, r3
 8002570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002574:	2200      	movs	r2, #0
 8002576:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002578:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800257a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800257e:	f7fd feaf 	bl	80002e0 <__aeabi_uldivmod>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4613      	mov	r3, r2
 8002588:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800258c:	4b0d      	ldr	r3, [pc, #52]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	0f1b      	lsrs	r3, r3, #28
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800259a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800259e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025aa:	e003      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025ac:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80025ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	37b8      	adds	r7, #184	@ 0xb8
 80025bc:	46bd      	mov	sp, r7
 80025be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	00f42400 	.word	0x00f42400

080025cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e28d      	b.n	8002afa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8083 	beq.w	80026f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025ec:	4b94      	ldr	r3, [pc, #592]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d019      	beq.n	800262c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025f8:	4b91      	ldr	r3, [pc, #580]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
        || \
 8002600:	2b08      	cmp	r3, #8
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002604:	4b8e      	ldr	r3, [pc, #568]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002610:	d00c      	beq.n	800262c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002612:	4b8b      	ldr	r3, [pc, #556]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800261a:	2b0c      	cmp	r3, #12
 800261c:	d112      	bne.n	8002644 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800261e:	4b88      	ldr	r3, [pc, #544]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002626:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800262a:	d10b      	bne.n	8002644 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262c:	4b84      	ldr	r3, [pc, #528]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d05b      	beq.n	80026f0 <HAL_RCC_OscConfig+0x124>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d157      	bne.n	80026f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e25a      	b.n	8002afa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800264c:	d106      	bne.n	800265c <HAL_RCC_OscConfig+0x90>
 800264e:	4b7c      	ldr	r3, [pc, #496]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a7b      	ldr	r2, [pc, #492]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e01d      	b.n	8002698 <HAL_RCC_OscConfig+0xcc>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0xb4>
 8002666:	4b76      	ldr	r3, [pc, #472]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a75      	ldr	r2, [pc, #468]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 800266c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b73      	ldr	r3, [pc, #460]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a72      	ldr	r2, [pc, #456]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0xcc>
 8002680:	4b6f      	ldr	r3, [pc, #444]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a6e      	ldr	r2, [pc, #440]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002686:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b6c      	ldr	r3, [pc, #432]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a6b      	ldr	r2, [pc, #428]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d013      	beq.n	80026c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7ff f97a 	bl	8001998 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a8:	f7ff f976 	bl	8001998 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	@ 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e21f      	b.n	8002afa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4b61      	ldr	r3, [pc, #388]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0xdc>
 80026c6:	e014      	b.n	80026f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7ff f966 	bl	8001998 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d0:	f7ff f962 	bl	8001998 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	@ 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e20b      	b.n	8002afa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e2:	4b57      	ldr	r3, [pc, #348]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x104>
 80026ee:	e000      	b.n	80026f2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d06f      	beq.n	80027de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026fe:	4b50      	ldr	r3, [pc, #320]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b00      	cmp	r3, #0
 8002708:	d017      	beq.n	800273a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800270a:	4b4d      	ldr	r3, [pc, #308]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002712:	2b08      	cmp	r3, #8
 8002714:	d105      	bne.n	8002722 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002716:	4b4a      	ldr	r3, [pc, #296]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002722:	4b47      	ldr	r3, [pc, #284]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800272a:	2b0c      	cmp	r3, #12
 800272c:	d11c      	bne.n	8002768 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272e:	4b44      	ldr	r3, [pc, #272]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d116      	bne.n	8002768 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273a:	4b41      	ldr	r3, [pc, #260]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_RCC_OscConfig+0x186>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d001      	beq.n	8002752 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e1d3      	b.n	8002afa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002752:	4b3b      	ldr	r3, [pc, #236]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4937      	ldr	r1, [pc, #220]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002766:	e03a      	b.n	80027de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002770:	4b34      	ldr	r3, [pc, #208]	@ (8002844 <HAL_RCC_OscConfig+0x278>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002776:	f7ff f90f 	bl	8001998 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277e:	f7ff f90b 	bl	8001998 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e1b4      	b.n	8002afa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002790:	4b2b      	ldr	r3, [pc, #172]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279c:	4b28      	ldr	r3, [pc, #160]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4925      	ldr	r1, [pc, #148]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]
 80027b0:	e015      	b.n	80027de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b2:	4b24      	ldr	r3, [pc, #144]	@ (8002844 <HAL_RCC_OscConfig+0x278>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7ff f8ee 	bl	8001998 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c0:	f7ff f8ea 	bl	8001998 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e193      	b.n	8002afa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d036      	beq.n	8002858 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d016      	beq.n	8002820 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f2:	4b15      	ldr	r3, [pc, #84]	@ (8002848 <HAL_RCC_OscConfig+0x27c>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7ff f8ce 	bl	8001998 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002800:	f7ff f8ca 	bl	8001998 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e173      	b.n	8002afa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002812:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x234>
 800281e:	e01b      	b.n	8002858 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002820:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <HAL_RCC_OscConfig+0x27c>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002826:	f7ff f8b7 	bl	8001998 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282c:	e00e      	b.n	800284c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800282e:	f7ff f8b3 	bl	8001998 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d907      	bls.n	800284c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e15c      	b.n	8002afa <HAL_RCC_OscConfig+0x52e>
 8002840:	40023800 	.word	0x40023800
 8002844:	42470000 	.word	0x42470000
 8002848:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284c:	4b8a      	ldr	r3, [pc, #552]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 800284e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1ea      	bne.n	800282e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8097 	beq.w	8002994 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002866:	2300      	movs	r3, #0
 8002868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286a:	4b83      	ldr	r3, [pc, #524]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10f      	bne.n	8002896 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002884:	6413      	str	r3, [r2, #64]	@ 0x40
 8002886:	4b7c      	ldr	r3, [pc, #496]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002892:	2301      	movs	r3, #1
 8002894:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002896:	4b79      	ldr	r3, [pc, #484]	@ (8002a7c <HAL_RCC_OscConfig+0x4b0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d118      	bne.n	80028d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a2:	4b76      	ldr	r3, [pc, #472]	@ (8002a7c <HAL_RCC_OscConfig+0x4b0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a75      	ldr	r2, [pc, #468]	@ (8002a7c <HAL_RCC_OscConfig+0x4b0>)
 80028a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ae:	f7ff f873 	bl	8001998 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b6:	f7ff f86f 	bl	8001998 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e118      	b.n	8002afa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c8:	4b6c      	ldr	r3, [pc, #432]	@ (8002a7c <HAL_RCC_OscConfig+0x4b0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d106      	bne.n	80028ea <HAL_RCC_OscConfig+0x31e>
 80028dc:	4b66      	ldr	r3, [pc, #408]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e0:	4a65      	ldr	r2, [pc, #404]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e8:	e01c      	b.n	8002924 <HAL_RCC_OscConfig+0x358>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x340>
 80028f2:	4b61      	ldr	r3, [pc, #388]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 80028f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f6:	4a60      	ldr	r2, [pc, #384]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80028fe:	4b5e      	ldr	r3, [pc, #376]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002902:	4a5d      	ldr	r2, [pc, #372]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6713      	str	r3, [r2, #112]	@ 0x70
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0x358>
 800290c:	4b5a      	ldr	r3, [pc, #360]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002910:	4a59      	ldr	r2, [pc, #356]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 8002912:	f023 0301 	bic.w	r3, r3, #1
 8002916:	6713      	str	r3, [r2, #112]	@ 0x70
 8002918:	4b57      	ldr	r3, [pc, #348]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291c:	4a56      	ldr	r2, [pc, #344]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 800291e:	f023 0304 	bic.w	r3, r3, #4
 8002922:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d015      	beq.n	8002958 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7ff f834 	bl	8001998 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002932:	e00a      	b.n	800294a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002934:	f7ff f830 	bl	8001998 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e0d7      	b.n	8002afa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294a:	4b4b      	ldr	r3, [pc, #300]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0ee      	beq.n	8002934 <HAL_RCC_OscConfig+0x368>
 8002956:	e014      	b.n	8002982 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002958:	f7ff f81e 	bl	8001998 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295e:	e00a      	b.n	8002976 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002960:	f7ff f81a 	bl	8001998 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e0c1      	b.n	8002afa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002976:	4b40      	ldr	r3, [pc, #256]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1ee      	bne.n	8002960 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002982:	7dfb      	ldrb	r3, [r7, #23]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d105      	bne.n	8002994 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002988:	4b3b      	ldr	r3, [pc, #236]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 800298a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298c:	4a3a      	ldr	r2, [pc, #232]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 800298e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002992:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80ad 	beq.w	8002af8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800299e:	4b36      	ldr	r3, [pc, #216]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d060      	beq.n	8002a6c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d145      	bne.n	8002a3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b2:	4b33      	ldr	r3, [pc, #204]	@ (8002a80 <HAL_RCC_OscConfig+0x4b4>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe ffee 	bl	8001998 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c0:	f7fe ffea 	bl	8001998 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e093      	b.n	8002afa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d2:	4b29      	ldr	r3, [pc, #164]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69da      	ldr	r2, [r3, #28]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	019b      	lsls	r3, r3, #6
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f4:	085b      	lsrs	r3, r3, #1
 80029f6:	3b01      	subs	r3, #1
 80029f8:	041b      	lsls	r3, r3, #16
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a00:	061b      	lsls	r3, r3, #24
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a08:	071b      	lsls	r3, r3, #28
 8002a0a:	491b      	ldr	r1, [pc, #108]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a10:	4b1b      	ldr	r3, [pc, #108]	@ (8002a80 <HAL_RCC_OscConfig+0x4b4>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a16:	f7fe ffbf 	bl	8001998 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1e:	f7fe ffbb 	bl	8001998 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e064      	b.n	8002afa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a30:	4b11      	ldr	r3, [pc, #68]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x452>
 8002a3c:	e05c      	b.n	8002af8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3e:	4b10      	ldr	r3, [pc, #64]	@ (8002a80 <HAL_RCC_OscConfig+0x4b4>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe ffa8 	bl	8001998 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe ffa4 	bl	8001998 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e04d      	b.n	8002afa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_RCC_OscConfig+0x4ac>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x480>
 8002a6a:	e045      	b.n	8002af8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e040      	b.n	8002afa <HAL_RCC_OscConfig+0x52e>
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a84:	4b1f      	ldr	r3, [pc, #124]	@ (8002b04 <HAL_RCC_OscConfig+0x538>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d030      	beq.n	8002af4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d129      	bne.n	8002af4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d122      	bne.n	8002af4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002aba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d119      	bne.n	8002af4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	3b01      	subs	r3, #1
 8002ace:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d10f      	bne.n	8002af4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ade:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d107      	bne.n	8002af4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800

08002b08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e07b      	b.n	8002c12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d108      	bne.n	8002b34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b2a:	d009      	beq.n	8002b40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	61da      	str	r2, [r3, #28]
 8002b32:	e005      	b.n	8002b40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fe fd6a 	bl	8001634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc4:	ea42 0103 	orr.w	r1, r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bcc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	0c1b      	lsrs	r3, r3, #16
 8002bde:	f003 0104 	and.w	r1, r3, #4
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	f003 0210 	and.w	r2, r3, #16
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b088      	sub	sp, #32
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	603b      	str	r3, [r7, #0]
 8002c26:	4613      	mov	r3, r2
 8002c28:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c2a:	f7fe feb5 	bl	8001998 <HAL_GetTick>
 8002c2e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d001      	beq.n	8002c44 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002c40:	2302      	movs	r3, #2
 8002c42:	e12a      	b.n	8002e9a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_SPI_Transmit+0x36>
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e122      	b.n	8002e9a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_SPI_Transmit+0x48>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e11b      	b.n	8002e9a <HAL_SPI_Transmit+0x280>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	88fa      	ldrh	r2, [r7, #6]
 8002c82:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	88fa      	ldrh	r2, [r7, #6]
 8002c88:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cb0:	d10f      	bne.n	8002cd2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cdc:	2b40      	cmp	r3, #64	@ 0x40
 8002cde:	d007      	beq.n	8002cf0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cf8:	d152      	bne.n	8002da0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_SPI_Transmit+0xee>
 8002d02:	8b7b      	ldrh	r3, [r7, #26]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d145      	bne.n	8002d94 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0c:	881a      	ldrh	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d18:	1c9a      	adds	r2, r3, #2
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d2c:	e032      	b.n	8002d94 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d112      	bne.n	8002d62 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d40:	881a      	ldrh	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4c:	1c9a      	adds	r2, r3, #2
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d60:	e018      	b.n	8002d94 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d62:	f7fe fe19 	bl	8001998 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d803      	bhi.n	8002d7a <HAL_SPI_Transmit+0x160>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d78:	d102      	bne.n	8002d80 <HAL_SPI_Transmit+0x166>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d109      	bne.n	8002d94 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e082      	b.n	8002e9a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1c7      	bne.n	8002d2e <HAL_SPI_Transmit+0x114>
 8002d9e:	e053      	b.n	8002e48 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <HAL_SPI_Transmit+0x194>
 8002da8:	8b7b      	ldrh	r3, [r7, #26]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d147      	bne.n	8002e3e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	330c      	adds	r3, #12
 8002db8:	7812      	ldrb	r2, [r2, #0]
 8002dba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002dd4:	e033      	b.n	8002e3e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d113      	bne.n	8002e0c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	330c      	adds	r3, #12
 8002dee:	7812      	ldrb	r2, [r2, #0]
 8002df0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e0a:	e018      	b.n	8002e3e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e0c:	f7fe fdc4 	bl	8001998 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d803      	bhi.n	8002e24 <HAL_SPI_Transmit+0x20a>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e22:	d102      	bne.n	8002e2a <HAL_SPI_Transmit+0x210>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e02d      	b.n	8002e9a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1c6      	bne.n	8002dd6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	6839      	ldr	r1, [r7, #0]
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 fa59 	bl	8003304 <SPI_EndRxTxTransaction>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10a      	bne.n	8002e7c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002e98:	2300      	movs	r3, #0
  }
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b08a      	sub	sp, #40	@ 0x28
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eb4:	f7fe fd70 	bl	8001998 <HAL_GetTick>
 8002eb8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ec0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002ec8:	887b      	ldrh	r3, [r7, #2]
 8002eca:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ecc:	7ffb      	ldrb	r3, [r7, #31]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d00c      	beq.n	8002eec <HAL_SPI_TransmitReceive+0x4a>
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ed8:	d106      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x46>
 8002ee2:	7ffb      	ldrb	r3, [r7, #31]
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d001      	beq.n	8002eec <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e17f      	b.n	80031ec <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_SPI_TransmitReceive+0x5c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_SPI_TransmitReceive+0x5c>
 8002ef8:	887b      	ldrh	r3, [r7, #2]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e174      	b.n	80031ec <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_SPI_TransmitReceive+0x6e>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e16d      	b.n	80031ec <HAL_SPI_TransmitReceive+0x34a>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d003      	beq.n	8002f2c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2205      	movs	r2, #5
 8002f28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	887a      	ldrh	r2, [r7, #2]
 8002f42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	887a      	ldrh	r2, [r7, #2]
 8002f4e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	887a      	ldrh	r2, [r7, #2]
 8002f54:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f6c:	2b40      	cmp	r3, #64	@ 0x40
 8002f6e:	d007      	beq.n	8002f80 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f88:	d17e      	bne.n	8003088 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <HAL_SPI_TransmitReceive+0xf6>
 8002f92:	8afb      	ldrh	r3, [r7, #22]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d16c      	bne.n	8003072 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9c:	881a      	ldrh	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa8:	1c9a      	adds	r2, r3, #2
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fbc:	e059      	b.n	8003072 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d11b      	bne.n	8003004 <HAL_SPI_TransmitReceive+0x162>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d016      	beq.n	8003004 <HAL_SPI_TransmitReceive+0x162>
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d113      	bne.n	8003004 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe0:	881a      	ldrh	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fec:	1c9a      	adds	r2, r3, #2
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d119      	bne.n	8003046 <HAL_SPI_TransmitReceive+0x1a4>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d014      	beq.n	8003046 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003026:	b292      	uxth	r2, r2
 8003028:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302e:	1c9a      	adds	r2, r3, #2
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003038:	b29b      	uxth	r3, r3
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003042:	2301      	movs	r3, #1
 8003044:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003046:	f7fe fca7 	bl	8001998 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003052:	429a      	cmp	r2, r3
 8003054:	d80d      	bhi.n	8003072 <HAL_SPI_TransmitReceive+0x1d0>
 8003056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305c:	d009      	beq.n	8003072 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e0bc      	b.n	80031ec <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1a0      	bne.n	8002fbe <HAL_SPI_TransmitReceive+0x11c>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003080:	b29b      	uxth	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d19b      	bne.n	8002fbe <HAL_SPI_TransmitReceive+0x11c>
 8003086:	e082      	b.n	800318e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <HAL_SPI_TransmitReceive+0x1f4>
 8003090:	8afb      	ldrh	r3, [r7, #22]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d171      	bne.n	800317a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	330c      	adds	r3, #12
 80030a0:	7812      	ldrb	r2, [r2, #0]
 80030a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030bc:	e05d      	b.n	800317a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d11c      	bne.n	8003106 <HAL_SPI_TransmitReceive+0x264>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d017      	beq.n	8003106 <HAL_SPI_TransmitReceive+0x264>
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d114      	bne.n	8003106 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	330c      	adds	r3, #12
 80030e6:	7812      	ldrb	r2, [r2, #0]
 80030e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d119      	bne.n	8003148 <HAL_SPI_TransmitReceive+0x2a6>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003118:	b29b      	uxth	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d014      	beq.n	8003148 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003144:	2301      	movs	r3, #1
 8003146:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003148:	f7fe fc26 	bl	8001998 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003154:	429a      	cmp	r2, r3
 8003156:	d803      	bhi.n	8003160 <HAL_SPI_TransmitReceive+0x2be>
 8003158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315e:	d102      	bne.n	8003166 <HAL_SPI_TransmitReceive+0x2c4>
 8003160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e038      	b.n	80031ec <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d19c      	bne.n	80030be <HAL_SPI_TransmitReceive+0x21c>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d197      	bne.n	80030be <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800318e:	6a3a      	ldr	r2, [r7, #32]
 8003190:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f8b6 	bl	8003304 <SPI_EndRxTxTransaction>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d008      	beq.n	80031b0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e01d      	b.n	80031ec <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031b8:	2300      	movs	r3, #0
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80031ea:	2300      	movs	r3, #0
  }
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3728      	adds	r7, #40	@ 0x28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	4613      	mov	r3, r2
 8003202:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003204:	f7fe fbc8 	bl	8001998 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320c:	1a9b      	subs	r3, r3, r2
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	4413      	add	r3, r2
 8003212:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003214:	f7fe fbc0 	bl	8001998 <HAL_GetTick>
 8003218:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800321a:	4b39      	ldr	r3, [pc, #228]	@ (8003300 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	015b      	lsls	r3, r3, #5
 8003220:	0d1b      	lsrs	r3, r3, #20
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	fb02 f303 	mul.w	r3, r2, r3
 8003228:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800322a:	e055      	b.n	80032d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003232:	d051      	beq.n	80032d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003234:	f7fe fbb0 	bl	8001998 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	429a      	cmp	r2, r3
 8003242:	d902      	bls.n	800324a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d13d      	bne.n	80032c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003258:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003262:	d111      	bne.n	8003288 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800326c:	d004      	beq.n	8003278 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003276:	d107      	bne.n	8003288 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003286:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003290:	d10f      	bne.n	80032b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e018      	b.n	80032f8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d102      	bne.n	80032d2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	e002      	b.n	80032d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	3b01      	subs	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	4013      	ands	r3, r2
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	bf0c      	ite	eq
 80032e8:	2301      	moveq	r3, #1
 80032ea:	2300      	movne	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d19a      	bne.n	800322c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3720      	adds	r7, #32
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000004 	.word	0x20000004

08003304 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af02      	add	r7, sp, #8
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2201      	movs	r2, #1
 8003318:	2102      	movs	r1, #2
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f7ff ff6a 	bl	80031f4 <SPI_WaitFlagStateUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d007      	beq.n	8003336 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800332a:	f043 0220 	orr.w	r2, r3, #32
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e032      	b.n	800339c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003336:	4b1b      	ldr	r3, [pc, #108]	@ (80033a4 <SPI_EndRxTxTransaction+0xa0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1b      	ldr	r2, [pc, #108]	@ (80033a8 <SPI_EndRxTxTransaction+0xa4>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	0d5b      	lsrs	r3, r3, #21
 8003342:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003346:	fb02 f303 	mul.w	r3, r2, r3
 800334a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003354:	d112      	bne.n	800337c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2200      	movs	r2, #0
 800335e:	2180      	movs	r1, #128	@ 0x80
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f7ff ff47 	bl	80031f4 <SPI_WaitFlagStateUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d016      	beq.n	800339a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003370:	f043 0220 	orr.w	r2, r3, #32
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e00f      	b.n	800339c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	3b01      	subs	r3, #1
 8003386:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003392:	2b80      	cmp	r3, #128	@ 0x80
 8003394:	d0f2      	beq.n	800337c <SPI_EndRxTxTransaction+0x78>
 8003396:	e000      	b.n	800339a <SPI_EndRxTxTransaction+0x96>
        break;
 8003398:	bf00      	nop
  }

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20000004 	.word	0x20000004
 80033a8:	165e9f81 	.word	0x165e9f81

080033ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e042      	b.n	8003444 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fe f976 	bl	80016c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2224      	movs	r2, #36	@ 0x24
 80033dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fa09 	bl	8003808 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003404:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003414:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003424:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	@ 0x28
 8003450:	af02      	add	r7, sp, #8
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	4613      	mov	r3, r2
 800345a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b20      	cmp	r3, #32
 800346a:	d175      	bne.n	8003558 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <HAL_UART_Transmit+0x2c>
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e06e      	b.n	800355a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2221      	movs	r2, #33	@ 0x21
 8003486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800348a:	f7fe fa85 	bl	8001998 <HAL_GetTick>
 800348e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	88fa      	ldrh	r2, [r7, #6]
 8003494:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	88fa      	ldrh	r2, [r7, #6]
 800349a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034a4:	d108      	bne.n	80034b8 <HAL_UART_Transmit+0x6c>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d104      	bne.n	80034b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	e003      	b.n	80034c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034c0:	e02e      	b.n	8003520 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2200      	movs	r2, #0
 80034ca:	2180      	movs	r1, #128	@ 0x80
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f8df 	bl	8003690 <UART_WaitOnFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e03a      	b.n	800355a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10b      	bne.n	8003502 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	3302      	adds	r3, #2
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	e007      	b.n	8003512 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	781a      	ldrb	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	3301      	adds	r3, #1
 8003510:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1cb      	bne.n	80034c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2200      	movs	r2, #0
 8003532:	2140      	movs	r1, #64	@ 0x40
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f8ab 	bl	8003690 <UART_WaitOnFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e006      	b.n	800355a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	e000      	b.n	800355a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003558:	2302      	movs	r3, #2
  }
}
 800355a:	4618      	mov	r0, r3
 800355c:	3720      	adds	r7, #32
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b08a      	sub	sp, #40	@ 0x28
 8003566:	af02      	add	r7, sp, #8
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	4613      	mov	r3, r2
 8003570:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b20      	cmp	r3, #32
 8003580:	f040 8081 	bne.w	8003686 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <HAL_UART_Receive+0x2e>
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e079      	b.n	8003688 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2222      	movs	r2, #34	@ 0x22
 800359e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035a8:	f7fe f9f6 	bl	8001998 <HAL_GetTick>
 80035ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	88fa      	ldrh	r2, [r7, #6]
 80035b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	88fa      	ldrh	r2, [r7, #6]
 80035b8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035c2:	d108      	bne.n	80035d6 <HAL_UART_Receive+0x74>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d104      	bne.n	80035d6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	61bb      	str	r3, [r7, #24]
 80035d4:	e003      	b.n	80035de <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80035de:	e047      	b.n	8003670 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2200      	movs	r2, #0
 80035e8:	2120      	movs	r1, #32
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f850 	bl	8003690 <UART_WaitOnFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d005      	beq.n	8003602 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e042      	b.n	8003688 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10c      	bne.n	8003622 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	b29b      	uxth	r3, r3
 8003610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003614:	b29a      	uxth	r2, r3
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	3302      	adds	r3, #2
 800361e:	61bb      	str	r3, [r7, #24]
 8003620:	e01f      	b.n	8003662 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800362a:	d007      	beq.n	800363c <HAL_UART_Receive+0xda>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <HAL_UART_Receive+0xe8>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d106      	bne.n	800364a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	b2da      	uxtb	r2, r3
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	e008      	b.n	800365c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003656:	b2da      	uxtb	r2, r3
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	3301      	adds	r3, #1
 8003660:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1b2      	bne.n	80035e0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e000      	b.n	8003688 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003686:	2302      	movs	r3, #2
  }
}
 8003688:	4618      	mov	r0, r3
 800368a:	3720      	adds	r7, #32
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	4613      	mov	r3, r2
 800369e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a0:	e03b      	b.n	800371a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a8:	d037      	beq.n	800371a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036aa:	f7fe f975 	bl	8001998 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	6a3a      	ldr	r2, [r7, #32]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d302      	bcc.n	80036c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e03a      	b.n	800373a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d023      	beq.n	800371a <UART_WaitOnFlagUntilTimeout+0x8a>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b80      	cmp	r3, #128	@ 0x80
 80036d6:	d020      	beq.n	800371a <UART_WaitOnFlagUntilTimeout+0x8a>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b40      	cmp	r3, #64	@ 0x40
 80036dc:	d01d      	beq.n	800371a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d116      	bne.n	800371a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f81d 	bl	8003742 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2208      	movs	r2, #8
 800370c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e00f      	b.n	800373a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4013      	ands	r3, r2
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	429a      	cmp	r2, r3
 8003728:	bf0c      	ite	eq
 800372a:	2301      	moveq	r3, #1
 800372c:	2300      	movne	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	429a      	cmp	r2, r3
 8003736:	d0b4      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003742:	b480      	push	{r7}
 8003744:	b095      	sub	sp, #84	@ 0x54
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	330c      	adds	r3, #12
 8003750:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003754:	e853 3f00 	ldrex	r3, [r3]
 8003758:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800375a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003760:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	330c      	adds	r3, #12
 8003768:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800376a:	643a      	str	r2, [r7, #64]	@ 0x40
 800376c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003770:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e5      	bne.n	800374a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3314      	adds	r3, #20
 8003784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	61fb      	str	r3, [r7, #28]
   return(result);
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f023 0301 	bic.w	r3, r3, #1
 8003794:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3314      	adds	r3, #20
 800379c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800379e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037a6:	e841 2300 	strex	r3, r2, [r1]
 80037aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1e5      	bne.n	800377e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d119      	bne.n	80037ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330c      	adds	r3, #12
 80037c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	e853 3f00 	ldrex	r3, [r3]
 80037c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f023 0310 	bic.w	r3, r3, #16
 80037d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	330c      	adds	r3, #12
 80037d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037da:	61ba      	str	r2, [r7, #24]
 80037dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	6979      	ldr	r1, [r7, #20]
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	613b      	str	r3, [r7, #16]
   return(result);
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e5      	bne.n	80037ba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037fc:	bf00      	nop
 80037fe:	3754      	adds	r7, #84	@ 0x54
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800380c:	b0c0      	sub	sp, #256	@ 0x100
 800380e:	af00      	add	r7, sp, #0
 8003810:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003824:	68d9      	ldr	r1, [r3, #12]
 8003826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	ea40 0301 	orr.w	r3, r0, r1
 8003830:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	431a      	orrs	r2, r3
 8003840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	431a      	orrs	r2, r3
 8003848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003860:	f021 010c 	bic.w	r1, r1, #12
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800386e:	430b      	orrs	r3, r1
 8003870:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800387e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003882:	6999      	ldr	r1, [r3, #24]
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	ea40 0301 	orr.w	r3, r0, r1
 800388e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	4b8f      	ldr	r3, [pc, #572]	@ (8003ad4 <UART_SetConfig+0x2cc>)
 8003898:	429a      	cmp	r2, r3
 800389a:	d005      	beq.n	80038a8 <UART_SetConfig+0xa0>
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	4b8d      	ldr	r3, [pc, #564]	@ (8003ad8 <UART_SetConfig+0x2d0>)
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d104      	bne.n	80038b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038a8:	f7fe fc4c 	bl	8002144 <HAL_RCC_GetPCLK2Freq>
 80038ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80038b0:	e003      	b.n	80038ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038b2:	f7fe fc33 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 80038b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038c4:	f040 810c 	bne.w	8003ae0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038cc:	2200      	movs	r2, #0
 80038ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038da:	4622      	mov	r2, r4
 80038dc:	462b      	mov	r3, r5
 80038de:	1891      	adds	r1, r2, r2
 80038e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038e2:	415b      	adcs	r3, r3
 80038e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038ea:	4621      	mov	r1, r4
 80038ec:	eb12 0801 	adds.w	r8, r2, r1
 80038f0:	4629      	mov	r1, r5
 80038f2:	eb43 0901 	adc.w	r9, r3, r1
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800390a:	4690      	mov	r8, r2
 800390c:	4699      	mov	r9, r3
 800390e:	4623      	mov	r3, r4
 8003910:	eb18 0303 	adds.w	r3, r8, r3
 8003914:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003918:	462b      	mov	r3, r5
 800391a:	eb49 0303 	adc.w	r3, r9, r3
 800391e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800392e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003932:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003936:	460b      	mov	r3, r1
 8003938:	18db      	adds	r3, r3, r3
 800393a:	653b      	str	r3, [r7, #80]	@ 0x50
 800393c:	4613      	mov	r3, r2
 800393e:	eb42 0303 	adc.w	r3, r2, r3
 8003942:	657b      	str	r3, [r7, #84]	@ 0x54
 8003944:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003948:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800394c:	f7fc fcc8 	bl	80002e0 <__aeabi_uldivmod>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4b61      	ldr	r3, [pc, #388]	@ (8003adc <UART_SetConfig+0x2d4>)
 8003956:	fba3 2302 	umull	r2, r3, r3, r2
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	011c      	lsls	r4, r3, #4
 800395e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003962:	2200      	movs	r2, #0
 8003964:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003968:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800396c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003970:	4642      	mov	r2, r8
 8003972:	464b      	mov	r3, r9
 8003974:	1891      	adds	r1, r2, r2
 8003976:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003978:	415b      	adcs	r3, r3
 800397a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800397c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003980:	4641      	mov	r1, r8
 8003982:	eb12 0a01 	adds.w	sl, r2, r1
 8003986:	4649      	mov	r1, r9
 8003988:	eb43 0b01 	adc.w	fp, r3, r1
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003998:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800399c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039a0:	4692      	mov	sl, r2
 80039a2:	469b      	mov	fp, r3
 80039a4:	4643      	mov	r3, r8
 80039a6:	eb1a 0303 	adds.w	r3, sl, r3
 80039aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039ae:	464b      	mov	r3, r9
 80039b0:	eb4b 0303 	adc.w	r3, fp, r3
 80039b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039cc:	460b      	mov	r3, r1
 80039ce:	18db      	adds	r3, r3, r3
 80039d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80039d2:	4613      	mov	r3, r2
 80039d4:	eb42 0303 	adc.w	r3, r2, r3
 80039d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80039da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039e2:	f7fc fc7d 	bl	80002e0 <__aeabi_uldivmod>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4611      	mov	r1, r2
 80039ec:	4b3b      	ldr	r3, [pc, #236]	@ (8003adc <UART_SetConfig+0x2d4>)
 80039ee:	fba3 2301 	umull	r2, r3, r3, r1
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	2264      	movs	r2, #100	@ 0x64
 80039f6:	fb02 f303 	mul.w	r3, r2, r3
 80039fa:	1acb      	subs	r3, r1, r3
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003a02:	4b36      	ldr	r3, [pc, #216]	@ (8003adc <UART_SetConfig+0x2d4>)
 8003a04:	fba3 2302 	umull	r2, r3, r3, r2
 8003a08:	095b      	lsrs	r3, r3, #5
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a10:	441c      	add	r4, r3
 8003a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a24:	4642      	mov	r2, r8
 8003a26:	464b      	mov	r3, r9
 8003a28:	1891      	adds	r1, r2, r2
 8003a2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a2c:	415b      	adcs	r3, r3
 8003a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a34:	4641      	mov	r1, r8
 8003a36:	1851      	adds	r1, r2, r1
 8003a38:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	414b      	adcs	r3, r1
 8003a3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a4c:	4659      	mov	r1, fp
 8003a4e:	00cb      	lsls	r3, r1, #3
 8003a50:	4651      	mov	r1, sl
 8003a52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a56:	4651      	mov	r1, sl
 8003a58:	00ca      	lsls	r2, r1, #3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4642      	mov	r2, r8
 8003a62:	189b      	adds	r3, r3, r2
 8003a64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a68:	464b      	mov	r3, r9
 8003a6a:	460a      	mov	r2, r1
 8003a6c:	eb42 0303 	adc.w	r3, r2, r3
 8003a70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a88:	460b      	mov	r3, r1
 8003a8a:	18db      	adds	r3, r3, r3
 8003a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a8e:	4613      	mov	r3, r2
 8003a90:	eb42 0303 	adc.w	r3, r2, r3
 8003a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a9e:	f7fc fc1f 	bl	80002e0 <__aeabi_uldivmod>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003adc <UART_SetConfig+0x2d4>)
 8003aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8003aac:	095b      	lsrs	r3, r3, #5
 8003aae:	2164      	movs	r1, #100	@ 0x64
 8003ab0:	fb01 f303 	mul.w	r3, r1, r3
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	3332      	adds	r3, #50	@ 0x32
 8003aba:	4a08      	ldr	r2, [pc, #32]	@ (8003adc <UART_SetConfig+0x2d4>)
 8003abc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	f003 0207 	and.w	r2, r3, #7
 8003ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4422      	add	r2, r4
 8003ace:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ad0:	e106      	b.n	8003ce0 <UART_SetConfig+0x4d8>
 8003ad2:	bf00      	nop
 8003ad4:	40011000 	.word	0x40011000
 8003ad8:	40011400 	.word	0x40011400
 8003adc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003aea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003aee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003af2:	4642      	mov	r2, r8
 8003af4:	464b      	mov	r3, r9
 8003af6:	1891      	adds	r1, r2, r2
 8003af8:	6239      	str	r1, [r7, #32]
 8003afa:	415b      	adcs	r3, r3
 8003afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003afe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b02:	4641      	mov	r1, r8
 8003b04:	1854      	adds	r4, r2, r1
 8003b06:	4649      	mov	r1, r9
 8003b08:	eb43 0501 	adc.w	r5, r3, r1
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	00eb      	lsls	r3, r5, #3
 8003b16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b1a:	00e2      	lsls	r2, r4, #3
 8003b1c:	4614      	mov	r4, r2
 8003b1e:	461d      	mov	r5, r3
 8003b20:	4643      	mov	r3, r8
 8003b22:	18e3      	adds	r3, r4, r3
 8003b24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b28:	464b      	mov	r3, r9
 8003b2a:	eb45 0303 	adc.w	r3, r5, r3
 8003b2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b4e:	4629      	mov	r1, r5
 8003b50:	008b      	lsls	r3, r1, #2
 8003b52:	4621      	mov	r1, r4
 8003b54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b58:	4621      	mov	r1, r4
 8003b5a:	008a      	lsls	r2, r1, #2
 8003b5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b60:	f7fc fbbe 	bl	80002e0 <__aeabi_uldivmod>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4b60      	ldr	r3, [pc, #384]	@ (8003cec <UART_SetConfig+0x4e4>)
 8003b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	011c      	lsls	r4, r3, #4
 8003b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b76:	2200      	movs	r2, #0
 8003b78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b84:	4642      	mov	r2, r8
 8003b86:	464b      	mov	r3, r9
 8003b88:	1891      	adds	r1, r2, r2
 8003b8a:	61b9      	str	r1, [r7, #24]
 8003b8c:	415b      	adcs	r3, r3
 8003b8e:	61fb      	str	r3, [r7, #28]
 8003b90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b94:	4641      	mov	r1, r8
 8003b96:	1851      	adds	r1, r2, r1
 8003b98:	6139      	str	r1, [r7, #16]
 8003b9a:	4649      	mov	r1, r9
 8003b9c:	414b      	adcs	r3, r1
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bac:	4659      	mov	r1, fp
 8003bae:	00cb      	lsls	r3, r1, #3
 8003bb0:	4651      	mov	r1, sl
 8003bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bb6:	4651      	mov	r1, sl
 8003bb8:	00ca      	lsls	r2, r1, #3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	189b      	adds	r3, r3, r2
 8003bc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bc8:	464b      	mov	r3, r9
 8003bca:	460a      	mov	r2, r1
 8003bcc:	eb42 0303 	adc.w	r3, r2, r3
 8003bd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bde:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003bec:	4649      	mov	r1, r9
 8003bee:	008b      	lsls	r3, r1, #2
 8003bf0:	4641      	mov	r1, r8
 8003bf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bf6:	4641      	mov	r1, r8
 8003bf8:	008a      	lsls	r2, r1, #2
 8003bfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bfe:	f7fc fb6f 	bl	80002e0 <__aeabi_uldivmod>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4611      	mov	r1, r2
 8003c08:	4b38      	ldr	r3, [pc, #224]	@ (8003cec <UART_SetConfig+0x4e4>)
 8003c0a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	2264      	movs	r2, #100	@ 0x64
 8003c12:	fb02 f303 	mul.w	r3, r2, r3
 8003c16:	1acb      	subs	r3, r1, r3
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	3332      	adds	r3, #50	@ 0x32
 8003c1c:	4a33      	ldr	r2, [pc, #204]	@ (8003cec <UART_SetConfig+0x4e4>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c28:	441c      	add	r4, r3
 8003c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c2e:	2200      	movs	r2, #0
 8003c30:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c32:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c38:	4642      	mov	r2, r8
 8003c3a:	464b      	mov	r3, r9
 8003c3c:	1891      	adds	r1, r2, r2
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	415b      	adcs	r3, r3
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c48:	4641      	mov	r1, r8
 8003c4a:	1851      	adds	r1, r2, r1
 8003c4c:	6039      	str	r1, [r7, #0]
 8003c4e:	4649      	mov	r1, r9
 8003c50:	414b      	adcs	r3, r1
 8003c52:	607b      	str	r3, [r7, #4]
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c60:	4659      	mov	r1, fp
 8003c62:	00cb      	lsls	r3, r1, #3
 8003c64:	4651      	mov	r1, sl
 8003c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c6a:	4651      	mov	r1, sl
 8003c6c:	00ca      	lsls	r2, r1, #3
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	4603      	mov	r3, r0
 8003c74:	4642      	mov	r2, r8
 8003c76:	189b      	adds	r3, r3, r2
 8003c78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	460a      	mov	r2, r1
 8003c7e:	eb42 0303 	adc.w	r3, r2, r3
 8003c82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c9c:	4649      	mov	r1, r9
 8003c9e:	008b      	lsls	r3, r1, #2
 8003ca0:	4641      	mov	r1, r8
 8003ca2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ca6:	4641      	mov	r1, r8
 8003ca8:	008a      	lsls	r2, r1, #2
 8003caa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003cae:	f7fc fb17 	bl	80002e0 <__aeabi_uldivmod>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cec <UART_SetConfig+0x4e4>)
 8003cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cbc:	095b      	lsrs	r3, r3, #5
 8003cbe:	2164      	movs	r1, #100	@ 0x64
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	3332      	adds	r3, #50	@ 0x32
 8003cca:	4a08      	ldr	r2, [pc, #32]	@ (8003cec <UART_SetConfig+0x4e4>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	f003 020f 	and.w	r2, r3, #15
 8003cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4422      	add	r2, r4
 8003cde:	609a      	str	r2, [r3, #8]
}
 8003ce0:	bf00      	nop
 8003ce2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cec:	51eb851f 	.word	0x51eb851f

08003cf0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003cf4:	4904      	ldr	r1, [pc, #16]	@ (8003d08 <MX_FATFS_Init+0x18>)
 8003cf6:	4805      	ldr	r0, [pc, #20]	@ (8003d0c <MX_FATFS_Init+0x1c>)
 8003cf8:	f003 f9a2 	bl	8007040 <FATFS_LinkDriver>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4b03      	ldr	r3, [pc, #12]	@ (8003d10 <MX_FATFS_Init+0x20>)
 8003d02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003d04:	bf00      	nop
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20002580 	.word	0x20002580
 8003d0c:	20000010 	.word	0x20000010
 8003d10:	2000257c 	.word	0x2000257c

08003d14 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003d18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN INIT */
//Stat = STA_NOINIT;
//return Stat;
SD_disk_initialize(pdrv);
 8003d2e:	79fb      	ldrb	r3, [r7, #7]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fc fe2d 	bl	8000990 <SD_disk_initialize>
/* USER CODE END INIT */
}
 8003d36:	bf00      	nop
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
SD_disk_status(pdrv);
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fc ff0b 	bl	8000b68 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8003d52:	bf00      	nop
 8003d54:	4618      	mov	r0, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	4603      	mov	r3, r0
 8003d6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
SD_disk_read(pdrv, buff, sector, count);
 8003d6c:	7bf8      	ldrb	r0, [r7, #15]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	f7fc ff0e 	bl	8000b94 <SD_disk_read>
  /* USER CODE END READ */
}
 8003d78:	bf00      	nop
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	4603      	mov	r3, r0
 8003d90:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
SD_disk_write(pdrv, buff, sector, count);
 8003d92:	7bf8      	ldrb	r0, [r7, #15]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	f7fc ff65 	bl	8000c68 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8003d9e:	bf00      	nop
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	603a      	str	r2, [r7, #0]
 8003db2:	71fb      	strb	r3, [r7, #7]
 8003db4:	460b      	mov	r3, r1
 8003db6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
SD_disk_ioctl(pdrv, cmd, buff);
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	79b9      	ldrb	r1, [r7, #6]
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fc ffd6 	bl	8000d70 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8003dc4:	bf00      	nop
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	4a08      	ldr	r2, [pc, #32]	@ (8003e00 <disk_status+0x30>)
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	79fa      	ldrb	r2, [r7, #7]
 8003de8:	4905      	ldr	r1, [pc, #20]	@ (8003e00 <disk_status+0x30>)
 8003dea:	440a      	add	r2, r1
 8003dec:	7a12      	ldrb	r2, [r2, #8]
 8003dee:	4610      	mov	r0, r2
 8003df0:	4798      	blx	r3
 8003df2:	4603      	mov	r3, r0
 8003df4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	200027ac 	.word	0x200027ac

08003e04 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	4a0e      	ldr	r2, [pc, #56]	@ (8003e50 <disk_initialize+0x4c>)
 8003e16:	5cd3      	ldrb	r3, [r2, r3]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d114      	bne.n	8003e46 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003e1c:	79fb      	ldrb	r3, [r7, #7]
 8003e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8003e50 <disk_initialize+0x4c>)
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	79fa      	ldrb	r2, [r7, #7]
 8003e2a:	4909      	ldr	r1, [pc, #36]	@ (8003e50 <disk_initialize+0x4c>)
 8003e2c:	440a      	add	r2, r1
 8003e2e:	7a12      	ldrb	r2, [r2, #8]
 8003e30:	4610      	mov	r0, r2
 8003e32:	4798      	blx	r3
 8003e34:	4603      	mov	r3, r0
 8003e36:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d103      	bne.n	8003e46 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	4a03      	ldr	r2, [pc, #12]	@ (8003e50 <disk_initialize+0x4c>)
 8003e42:	2101      	movs	r1, #1
 8003e44:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	200027ac 	.word	0x200027ac

08003e54 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003e54:	b590      	push	{r4, r7, lr}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	4603      	mov	r3, r0
 8003e62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	4a0a      	ldr	r2, [pc, #40]	@ (8003e90 <disk_read+0x3c>)
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	689c      	ldr	r4, [r3, #8]
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	4a07      	ldr	r2, [pc, #28]	@ (8003e90 <disk_read+0x3c>)
 8003e74:	4413      	add	r3, r2
 8003e76:	7a18      	ldrb	r0, [r3, #8]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	68b9      	ldr	r1, [r7, #8]
 8003e7e:	47a0      	blx	r4
 8003e80:	4603      	mov	r3, r0
 8003e82:	75fb      	strb	r3, [r7, #23]
  return res;
 8003e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd90      	pop	{r4, r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	200027ac 	.word	0x200027ac

08003e94 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003e94:	b590      	push	{r4, r7, lr}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed0 <disk_write+0x3c>)
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	68dc      	ldr	r4, [r3, #12]
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	4a07      	ldr	r2, [pc, #28]	@ (8003ed0 <disk_write+0x3c>)
 8003eb4:	4413      	add	r3, r2
 8003eb6:	7a18      	ldrb	r0, [r3, #8]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68b9      	ldr	r1, [r7, #8]
 8003ebe:	47a0      	blx	r4
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	75fb      	strb	r3, [r7, #23]
  return res;
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd90      	pop	{r4, r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	200027ac 	.word	0x200027ac

08003ed4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	603a      	str	r2, [r7, #0]
 8003ede:	71fb      	strb	r3, [r7, #7]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	4a09      	ldr	r2, [pc, #36]	@ (8003f0c <disk_ioctl+0x38>)
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	79fa      	ldrb	r2, [r7, #7]
 8003ef2:	4906      	ldr	r1, [pc, #24]	@ (8003f0c <disk_ioctl+0x38>)
 8003ef4:	440a      	add	r2, r1
 8003ef6:	7a10      	ldrb	r0, [r2, #8]
 8003ef8:	79b9      	ldrb	r1, [r7, #6]
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	4798      	blx	r3
 8003efe:	4603      	mov	r3, r0
 8003f00:	73fb      	strb	r3, [r7, #15]
  return res;
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	200027ac 	.word	0x200027ac

08003f10 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003f20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	b21a      	sxth	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	b21b      	sxth	r3, r3
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	b21b      	sxth	r3, r3
 8003f32:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003f34:	89fb      	ldrh	r3, [r7, #14]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003f42:	b480      	push	{r7}
 8003f44:	b085      	sub	sp, #20
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3303      	adds	r3, #3
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	3202      	adds	r2, #2
 8003f5a:	7812      	ldrb	r2, [r2, #0]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	3201      	adds	r2, #1
 8003f68:	7812      	ldrb	r2, [r2, #0]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	021b      	lsls	r3, r3, #8
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	7812      	ldrb	r2, [r2, #0]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
	return rv;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	607a      	str	r2, [r7, #4]
 8003f9a:	887a      	ldrh	r2, [r7, #2]
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	701a      	strb	r2, [r3, #0]
 8003fa0:	887b      	ldrh	r3, [r7, #2]
 8003fa2:	0a1b      	lsrs	r3, r3, #8
 8003fa4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	887a      	ldrh	r2, [r7, #2]
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	607a      	str	r2, [r7, #4]
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	701a      	strb	r2, [r3, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	0a1b      	lsrs	r3, r3, #8
 8003fea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	701a      	strb	r2, [r3, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	0a1b      	lsrs	r3, r3, #8
 8003ffc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004016:	b480      	push	{r7}
 8004018:	b087      	sub	sp, #28
 800401a:	af00      	add	r7, sp, #0
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00d      	beq.n	800404c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	1c53      	adds	r3, r2, #1
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	1c59      	adds	r1, r3, #1
 800403a:	6179      	str	r1, [r7, #20]
 800403c:	7812      	ldrb	r2, [r2, #0]
 800403e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3b01      	subs	r3, #1
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f1      	bne.n	8004030 <mem_cpy+0x1a>
	}
}
 800404c:	bf00      	nop
 800404e:	371c      	adds	r7, #28
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	617a      	str	r2, [r7, #20]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3b01      	subs	r3, #1
 8004078:	607b      	str	r3, [r7, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f3      	bne.n	8004068 <mem_set+0x10>
}
 8004080:	bf00      	nop
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800408e:	b480      	push	{r7}
 8004090:	b089      	sub	sp, #36	@ 0x24
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	61fa      	str	r2, [r7, #28]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	4619      	mov	r1, r3
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	61ba      	str	r2, [r7, #24]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	1acb      	subs	r3, r1, r3
 80040ba:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3b01      	subs	r3, #1
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <mem_cmp+0x40>
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0eb      	beq.n	80040a6 <mem_cmp+0x18>

	return r;
 80040ce:	697b      	ldr	r3, [r7, #20]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3724      	adds	r7, #36	@ 0x24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80040e6:	e002      	b.n	80040ee <chk_chr+0x12>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3301      	adds	r3, #1
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <chk_chr+0x26>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	4293      	cmp	r3, r2
 8004100:	d1f2      	bne.n	80040e8 <chk_chr+0xc>
	return *str;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	781b      	ldrb	r3, [r3, #0]
}
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800411e:	2300      	movs	r3, #0
 8004120:	60bb      	str	r3, [r7, #8]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	e029      	b.n	800417c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004128:	4a27      	ldr	r2, [pc, #156]	@ (80041c8 <chk_lock+0xb4>)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	4413      	add	r3, r2
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01d      	beq.n	8004172 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004136:	4a24      	ldr	r2, [pc, #144]	@ (80041c8 <chk_lock+0xb4>)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	4413      	add	r3, r2
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d116      	bne.n	8004176 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004148:	4a1f      	ldr	r2, [pc, #124]	@ (80041c8 <chk_lock+0xb4>)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	4413      	add	r3, r2
 8004150:	3304      	adds	r3, #4
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004158:	429a      	cmp	r2, r3
 800415a:	d10c      	bne.n	8004176 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800415c:	4a1a      	ldr	r2, [pc, #104]	@ (80041c8 <chk_lock+0xb4>)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	4413      	add	r3, r2
 8004164:	3308      	adds	r3, #8
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800416c:	429a      	cmp	r2, r3
 800416e:	d102      	bne.n	8004176 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004170:	e007      	b.n	8004182 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004172:	2301      	movs	r3, #1
 8004174:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3301      	adds	r3, #1
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d9d2      	bls.n	8004128 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d109      	bne.n	800419c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d102      	bne.n	8004194 <chk_lock+0x80>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b02      	cmp	r3, #2
 8004192:	d101      	bne.n	8004198 <chk_lock+0x84>
 8004194:	2300      	movs	r3, #0
 8004196:	e010      	b.n	80041ba <chk_lock+0xa6>
 8004198:	2312      	movs	r3, #18
 800419a:	e00e      	b.n	80041ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d108      	bne.n	80041b4 <chk_lock+0xa0>
 80041a2:	4a09      	ldr	r2, [pc, #36]	@ (80041c8 <chk_lock+0xb4>)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	4413      	add	r3, r2
 80041aa:	330c      	adds	r3, #12
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041b2:	d101      	bne.n	80041b8 <chk_lock+0xa4>
 80041b4:	2310      	movs	r3, #16
 80041b6:	e000      	b.n	80041ba <chk_lock+0xa6>
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	2000258c 	.word	0x2000258c

080041cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80041d2:	2300      	movs	r3, #0
 80041d4:	607b      	str	r3, [r7, #4]
 80041d6:	e002      	b.n	80041de <enq_lock+0x12>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3301      	adds	r3, #1
 80041dc:	607b      	str	r3, [r7, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d806      	bhi.n	80041f2 <enq_lock+0x26>
 80041e4:	4a09      	ldr	r2, [pc, #36]	@ (800420c <enq_lock+0x40>)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	4413      	add	r3, r2
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f2      	bne.n	80041d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	bf14      	ite	ne
 80041f8:	2301      	movne	r3, #1
 80041fa:	2300      	moveq	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
}
 80041fe:	4618      	mov	r0, r3
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	2000258c 	.word	0x2000258c

08004210 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	e01f      	b.n	8004260 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004220:	4a41      	ldr	r2, [pc, #260]	@ (8004328 <inc_lock+0x118>)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	4413      	add	r3, r2
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d113      	bne.n	800425a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004232:	4a3d      	ldr	r2, [pc, #244]	@ (8004328 <inc_lock+0x118>)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	4413      	add	r3, r2
 800423a:	3304      	adds	r3, #4
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004242:	429a      	cmp	r2, r3
 8004244:	d109      	bne.n	800425a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004246:	4a38      	ldr	r2, [pc, #224]	@ (8004328 <inc_lock+0x118>)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	4413      	add	r3, r2
 800424e:	3308      	adds	r3, #8
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004256:	429a      	cmp	r2, r3
 8004258:	d006      	beq.n	8004268 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	3301      	adds	r3, #1
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d9dc      	bls.n	8004220 <inc_lock+0x10>
 8004266:	e000      	b.n	800426a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004268:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b02      	cmp	r3, #2
 800426e:	d132      	bne.n	80042d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004270:	2300      	movs	r3, #0
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	e002      	b.n	800427c <inc_lock+0x6c>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	3301      	adds	r3, #1
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d806      	bhi.n	8004290 <inc_lock+0x80>
 8004282:	4a29      	ldr	r2, [pc, #164]	@ (8004328 <inc_lock+0x118>)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	4413      	add	r3, r2
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1f2      	bne.n	8004276 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d101      	bne.n	800429a <inc_lock+0x8a>
 8004296:	2300      	movs	r3, #0
 8004298:	e040      	b.n	800431c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	4922      	ldr	r1, [pc, #136]	@ (8004328 <inc_lock+0x118>)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	440b      	add	r3, r1
 80042a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	491e      	ldr	r1, [pc, #120]	@ (8004328 <inc_lock+0x118>)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	440b      	add	r3, r1
 80042b4:	3304      	adds	r3, #4
 80042b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	695a      	ldr	r2, [r3, #20]
 80042bc:	491a      	ldr	r1, [pc, #104]	@ (8004328 <inc_lock+0x118>)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	440b      	add	r3, r1
 80042c4:	3308      	adds	r3, #8
 80042c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80042c8:	4a17      	ldr	r2, [pc, #92]	@ (8004328 <inc_lock+0x118>)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	4413      	add	r3, r2
 80042d0:	330c      	adds	r3, #12
 80042d2:	2200      	movs	r2, #0
 80042d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d009      	beq.n	80042f0 <inc_lock+0xe0>
 80042dc:	4a12      	ldr	r2, [pc, #72]	@ (8004328 <inc_lock+0x118>)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	4413      	add	r3, r2
 80042e4:	330c      	adds	r3, #12
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <inc_lock+0xe0>
 80042ec:	2300      	movs	r3, #0
 80042ee:	e015      	b.n	800431c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d108      	bne.n	8004308 <inc_lock+0xf8>
 80042f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004328 <inc_lock+0x118>)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	4413      	add	r3, r2
 80042fe:	330c      	adds	r3, #12
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	3301      	adds	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	e001      	b.n	800430c <inc_lock+0xfc>
 8004308:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800430c:	4906      	ldr	r1, [pc, #24]	@ (8004328 <inc_lock+0x118>)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	440b      	add	r3, r1
 8004314:	330c      	adds	r3, #12
 8004316:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3301      	adds	r3, #1
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	2000258c 	.word	0x2000258c

0800432c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3b01      	subs	r3, #1
 8004338:	607b      	str	r3, [r7, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d825      	bhi.n	800438c <dec_lock+0x60>
		n = Files[i].ctr;
 8004340:	4a17      	ldr	r2, [pc, #92]	@ (80043a0 <dec_lock+0x74>)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	4413      	add	r3, r2
 8004348:	330c      	adds	r3, #12
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800434e:	89fb      	ldrh	r3, [r7, #14]
 8004350:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004354:	d101      	bne.n	800435a <dec_lock+0x2e>
 8004356:	2300      	movs	r3, #0
 8004358:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800435a:	89fb      	ldrh	r3, [r7, #14]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <dec_lock+0x3a>
 8004360:	89fb      	ldrh	r3, [r7, #14]
 8004362:	3b01      	subs	r3, #1
 8004364:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004366:	4a0e      	ldr	r2, [pc, #56]	@ (80043a0 <dec_lock+0x74>)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	4413      	add	r3, r2
 800436e:	330c      	adds	r3, #12
 8004370:	89fa      	ldrh	r2, [r7, #14]
 8004372:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004374:	89fb      	ldrh	r3, [r7, #14]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d105      	bne.n	8004386 <dec_lock+0x5a>
 800437a:	4a09      	ldr	r2, [pc, #36]	@ (80043a0 <dec_lock+0x74>)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	4413      	add	r3, r2
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	737b      	strb	r3, [r7, #13]
 800438a:	e001      	b.n	8004390 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800438c:	2302      	movs	r3, #2
 800438e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004390:	7b7b      	ldrb	r3, [r7, #13]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	2000258c 	.word	0x2000258c

080043a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e010      	b.n	80043d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80043b2:	4a0d      	ldr	r2, [pc, #52]	@ (80043e8 <clear_lock+0x44>)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	4413      	add	r3, r2
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d105      	bne.n	80043ce <clear_lock+0x2a>
 80043c2:	4a09      	ldr	r2, [pc, #36]	@ (80043e8 <clear_lock+0x44>)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	4413      	add	r3, r2
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3301      	adds	r3, #1
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d9eb      	bls.n	80043b2 <clear_lock+0xe>
	}
}
 80043da:	bf00      	nop
 80043dc:	bf00      	nop
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	2000258c 	.word	0x2000258c

080043ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	78db      	ldrb	r3, [r3, #3]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d034      	beq.n	800446a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004404:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	7858      	ldrb	r0, [r3, #1]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004410:	2301      	movs	r3, #1
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	f7ff fd3e 	bl	8003e94 <disk_write>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <sync_window+0x38>
			res = FR_DISK_ERR;
 800441e:	2301      	movs	r3, #1
 8004420:	73fb      	strb	r3, [r7, #15]
 8004422:	e022      	b.n	800446a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	1ad2      	subs	r2, r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	429a      	cmp	r2, r3
 8004438:	d217      	bcs.n	800446a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	789b      	ldrb	r3, [r3, #2]
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	e010      	b.n	8004464 <sync_window+0x78>
					wsect += fs->fsize;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4413      	add	r3, r2
 800444a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	7858      	ldrb	r0, [r3, #1]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004456:	2301      	movs	r3, #1
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	f7ff fd1b 	bl	8003e94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	3b01      	subs	r3, #1
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d8eb      	bhi.n	8004442 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800446a:	7bfb      	ldrb	r3, [r7, #15]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d01b      	beq.n	80044c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7ff ffad 	bl	80043ec <sync_window>
 8004492:	4603      	mov	r3, r0
 8004494:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d113      	bne.n	80044c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	7858      	ldrb	r0, [r3, #1]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80044a6:	2301      	movs	r3, #1
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	f7ff fcd3 	bl	8003e54 <disk_read>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d004      	beq.n	80044be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80044b4:	f04f 33ff 	mov.w	r3, #4294967295
 80044b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff ff87 	bl	80043ec <sync_window>
 80044de:	4603      	mov	r3, r0
 80044e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d159      	bne.n	800459c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d149      	bne.n	8004584 <sync_fs+0xb4>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	791b      	ldrb	r3, [r3, #4]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d145      	bne.n	8004584 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	899b      	ldrh	r3, [r3, #12]
 8004502:	461a      	mov	r2, r3
 8004504:	2100      	movs	r1, #0
 8004506:	f7ff fda7 	bl	8004058 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3338      	adds	r3, #56	@ 0x38
 800450e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004512:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff fd36 	bl	8003f88 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3338      	adds	r3, #56	@ 0x38
 8004520:	4921      	ldr	r1, [pc, #132]	@ (80045a8 <sync_fs+0xd8>)
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff fd4b 	bl	8003fbe <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3338      	adds	r3, #56	@ 0x38
 800452c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004530:	491e      	ldr	r1, [pc, #120]	@ (80045ac <sync_fs+0xdc>)
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff fd43 	bl	8003fbe <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3338      	adds	r3, #56	@ 0x38
 800453c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	4619      	mov	r1, r3
 8004546:	4610      	mov	r0, r2
 8004548:	f7ff fd39 	bl	8003fbe <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3338      	adds	r3, #56	@ 0x38
 8004550:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	4619      	mov	r1, r3
 800455a:	4610      	mov	r0, r2
 800455c:	f7ff fd2f 	bl	8003fbe <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	7858      	ldrb	r0, [r3, #1]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004578:	2301      	movs	r3, #1
 800457a:	f7ff fc8b 	bl	8003e94 <disk_write>
			fs->fsi_flag = 0;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	785b      	ldrb	r3, [r3, #1]
 8004588:	2200      	movs	r2, #0
 800458a:	2100      	movs	r1, #0
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff fca1 	bl	8003ed4 <disk_ioctl>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <sync_fs+0xcc>
 8004598:	2301      	movs	r3, #1
 800459a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800459c:	7bfb      	ldrb	r3, [r7, #15]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	41615252 	.word	0x41615252
 80045ac:	61417272 	.word	0x61417272

080045b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	3b02      	subs	r3, #2
 80045be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	3b02      	subs	r3, #2
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d301      	bcc.n	80045d0 <clust2sect+0x20>
 80045cc:	2300      	movs	r3, #0
 80045ce:	e008      	b.n	80045e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	895b      	ldrh	r3, [r3, #10]
 80045d4:	461a      	mov	r2, r3
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	fb03 f202 	mul.w	r2, r3, r2
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e0:	4413      	add	r3, r2
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b086      	sub	sp, #24
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d904      	bls.n	800460e <get_fat+0x20>
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d302      	bcc.n	8004614 <get_fat+0x26>
		val = 1;	/* Internal error */
 800460e:	2301      	movs	r3, #1
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	e0ba      	b.n	800478a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004614:	f04f 33ff 	mov.w	r3, #4294967295
 8004618:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b03      	cmp	r3, #3
 8004620:	f000 8082 	beq.w	8004728 <get_fat+0x13a>
 8004624:	2b03      	cmp	r3, #3
 8004626:	f300 80a6 	bgt.w	8004776 <get_fat+0x188>
 800462a:	2b01      	cmp	r3, #1
 800462c:	d002      	beq.n	8004634 <get_fat+0x46>
 800462e:	2b02      	cmp	r3, #2
 8004630:	d055      	beq.n	80046de <get_fat+0xf0>
 8004632:	e0a0      	b.n	8004776 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	085b      	lsrs	r3, r3, #1
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4413      	add	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	899b      	ldrh	r3, [r3, #12]
 800464a:	4619      	mov	r1, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004652:	4413      	add	r3, r2
 8004654:	4619      	mov	r1, r3
 8004656:	6938      	ldr	r0, [r7, #16]
 8004658:	f7ff ff0c 	bl	8004474 <move_window>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	f040 808c 	bne.w	800477c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	60fa      	str	r2, [r7, #12]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	8992      	ldrh	r2, [r2, #12]
 800466e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004672:	fb01 f202 	mul.w	r2, r1, r2
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4413      	add	r3, r2
 800467c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004680:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	899b      	ldrh	r3, [r3, #12]
 800468a:	4619      	mov	r1, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004692:	4413      	add	r3, r2
 8004694:	4619      	mov	r1, r3
 8004696:	6938      	ldr	r0, [r7, #16]
 8004698:	f7ff feec 	bl	8004474 <move_window>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d16e      	bne.n	8004780 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	899b      	ldrh	r3, [r3, #12]
 80046a6:	461a      	mov	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80046ae:	fb01 f202 	mul.w	r2, r1, r2
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4413      	add	r3, r2
 80046b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80046bc:	021b      	lsls	r3, r3, #8
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <get_fat+0xe6>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	e002      	b.n	80046da <get_fat+0xec>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046da:	617b      	str	r3, [r7, #20]
			break;
 80046dc:	e055      	b.n	800478a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	899b      	ldrh	r3, [r3, #12]
 80046e6:	085b      	lsrs	r3, r3, #1
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	4619      	mov	r1, r3
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80046f2:	4413      	add	r3, r2
 80046f4:	4619      	mov	r1, r3
 80046f6:	6938      	ldr	r0, [r7, #16]
 80046f8:	f7ff febc 	bl	8004474 <move_window>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d140      	bne.n	8004784 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	8992      	ldrh	r2, [r2, #12]
 8004710:	fbb3 f0f2 	udiv	r0, r3, r2
 8004714:	fb00 f202 	mul.w	r2, r0, r2
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	440b      	add	r3, r1
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff fbf7 	bl	8003f10 <ld_word>
 8004722:	4603      	mov	r3, r0
 8004724:	617b      	str	r3, [r7, #20]
			break;
 8004726:	e030      	b.n	800478a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	899b      	ldrh	r3, [r3, #12]
 8004730:	089b      	lsrs	r3, r3, #2
 8004732:	b29b      	uxth	r3, r3
 8004734:	4619      	mov	r1, r3
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	fbb3 f3f1 	udiv	r3, r3, r1
 800473c:	4413      	add	r3, r2
 800473e:	4619      	mov	r1, r3
 8004740:	6938      	ldr	r0, [r7, #16]
 8004742:	f7ff fe97 	bl	8004474 <move_window>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d11d      	bne.n	8004788 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	8992      	ldrh	r2, [r2, #12]
 800475a:	fbb3 f0f2 	udiv	r0, r3, r2
 800475e:	fb00 f202 	mul.w	r2, r0, r2
 8004762:	1a9b      	subs	r3, r3, r2
 8004764:	440b      	add	r3, r1
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fbeb 	bl	8003f42 <ld_dword>
 800476c:	4603      	mov	r3, r0
 800476e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004772:	617b      	str	r3, [r7, #20]
			break;
 8004774:	e009      	b.n	800478a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004776:	2301      	movs	r3, #1
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	e006      	b.n	800478a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800477c:	bf00      	nop
 800477e:	e004      	b.n	800478a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004780:	bf00      	nop
 8004782:	e002      	b.n	800478a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004784:	bf00      	nop
 8004786:	e000      	b.n	800478a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004788:	bf00      	nop
		}
	}

	return val;
 800478a:	697b      	ldr	r3, [r7, #20]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004794:	b590      	push	{r4, r7, lr}
 8004796:	b089      	sub	sp, #36	@ 0x24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80047a0:	2302      	movs	r3, #2
 80047a2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	f240 8109 	bls.w	80049be <put_fat+0x22a>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	f080 8103 	bcs.w	80049be <put_fat+0x22a>
		switch (fs->fs_type) {
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b03      	cmp	r3, #3
 80047be:	f000 80b6 	beq.w	800492e <put_fat+0x19a>
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	f300 80fb 	bgt.w	80049be <put_fat+0x22a>
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d003      	beq.n	80047d4 <put_fat+0x40>
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	f000 8083 	beq.w	80048d8 <put_fat+0x144>
 80047d2:	e0f4      	b.n	80049be <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	61bb      	str	r3, [r7, #24]
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	085b      	lsrs	r3, r3, #1
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4413      	add	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	899b      	ldrh	r3, [r3, #12]
 80047ea:	4619      	mov	r1, r3
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80047f2:	4413      	add	r3, r2
 80047f4:	4619      	mov	r1, r3
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f7ff fe3c 	bl	8004474 <move_window>
 80047fc:	4603      	mov	r3, r0
 80047fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004800:	7ffb      	ldrb	r3, [r7, #31]
 8004802:	2b00      	cmp	r3, #0
 8004804:	f040 80d4 	bne.w	80049b0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	61ba      	str	r2, [r7, #24]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	8992      	ldrh	r2, [r2, #12]
 8004818:	fbb3 f0f2 	udiv	r0, r3, r2
 800481c:	fb00 f202 	mul.w	r2, r0, r2
 8004820:	1a9b      	subs	r3, r3, r2
 8004822:	440b      	add	r3, r1
 8004824:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00d      	beq.n	800484c <put_fat+0xb8>
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	b25b      	sxtb	r3, r3
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	b25a      	sxtb	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	b25b      	sxtb	r3, r3
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	b25b      	sxtb	r3, r3
 8004844:	4313      	orrs	r3, r2
 8004846:	b25b      	sxtb	r3, r3
 8004848:	b2db      	uxtb	r3, r3
 800484a:	e001      	b.n	8004850 <put_fat+0xbc>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	b2db      	uxtb	r3, r3
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	899b      	ldrh	r3, [r3, #12]
 8004862:	4619      	mov	r1, r3
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	fbb3 f3f1 	udiv	r3, r3, r1
 800486a:	4413      	add	r3, r2
 800486c:	4619      	mov	r1, r3
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f7ff fe00 	bl	8004474 <move_window>
 8004874:	4603      	mov	r3, r0
 8004876:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004878:	7ffb      	ldrb	r3, [r7, #31]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f040 809a 	bne.w	80049b4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	899b      	ldrh	r3, [r3, #12]
 800488a:	461a      	mov	r2, r3
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004892:	fb00 f202 	mul.w	r2, r0, r2
 8004896:	1a9b      	subs	r3, r3, r2
 8004898:	440b      	add	r3, r1
 800489a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <put_fat+0x11a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	091b      	lsrs	r3, r3, #4
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	e00e      	b.n	80048cc <put_fat+0x138>
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	b25b      	sxtb	r3, r3
 80048b4:	f023 030f 	bic.w	r3, r3, #15
 80048b8:	b25a      	sxtb	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	0a1b      	lsrs	r3, r3, #8
 80048be:	b25b      	sxtb	r3, r3
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	b25b      	sxtb	r3, r3
 80048c6:	4313      	orrs	r3, r2
 80048c8:	b25b      	sxtb	r3, r3
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	70da      	strb	r2, [r3, #3]
			break;
 80048d6:	e072      	b.n	80049be <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	899b      	ldrh	r3, [r3, #12]
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	4619      	mov	r1, r3
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80048ec:	4413      	add	r3, r2
 80048ee:	4619      	mov	r1, r3
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f7ff fdbf 	bl	8004474 <move_window>
 80048f6:	4603      	mov	r3, r0
 80048f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80048fa:	7ffb      	ldrb	r3, [r7, #31]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d15b      	bne.n	80049b8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	8992      	ldrh	r2, [r2, #12]
 800490e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004912:	fb00 f202 	mul.w	r2, r0, r2
 8004916:	1a9b      	subs	r3, r3, r2
 8004918:	440b      	add	r3, r1
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	b292      	uxth	r2, r2
 800491e:	4611      	mov	r1, r2
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff fb31 	bl	8003f88 <st_word>
			fs->wflag = 1;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	70da      	strb	r2, [r3, #3]
			break;
 800492c:	e047      	b.n	80049be <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	899b      	ldrh	r3, [r3, #12]
 8004936:	089b      	lsrs	r3, r3, #2
 8004938:	b29b      	uxth	r3, r3
 800493a:	4619      	mov	r1, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004942:	4413      	add	r3, r2
 8004944:	4619      	mov	r1, r3
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f7ff fd94 	bl	8004474 <move_window>
 800494c:	4603      	mov	r3, r0
 800494e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004950:	7ffb      	ldrb	r3, [r7, #31]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d132      	bne.n	80049bc <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	8992      	ldrh	r2, [r2, #12]
 800496a:	fbb3 f0f2 	udiv	r0, r3, r2
 800496e:	fb00 f202 	mul.w	r2, r0, r2
 8004972:	1a9b      	subs	r3, r3, r2
 8004974:	440b      	add	r3, r1
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff fae3 	bl	8003f42 <ld_dword>
 800497c:	4603      	mov	r3, r0
 800497e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004982:	4323      	orrs	r3, r4
 8004984:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	8992      	ldrh	r2, [r2, #12]
 8004994:	fbb3 f0f2 	udiv	r0, r3, r2
 8004998:	fb00 f202 	mul.w	r2, r0, r2
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	440b      	add	r3, r1
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff fb0b 	bl	8003fbe <st_dword>
			fs->wflag = 1;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2201      	movs	r2, #1
 80049ac:	70da      	strb	r2, [r3, #3]
			break;
 80049ae:	e006      	b.n	80049be <put_fat+0x22a>
			if (res != FR_OK) break;
 80049b0:	bf00      	nop
 80049b2:	e004      	b.n	80049be <put_fat+0x22a>
			if (res != FR_OK) break;
 80049b4:	bf00      	nop
 80049b6:	e002      	b.n	80049be <put_fat+0x22a>
			if (res != FR_OK) break;
 80049b8:	bf00      	nop
 80049ba:	e000      	b.n	80049be <put_fat+0x22a>
			if (res != FR_OK) break;
 80049bc:	bf00      	nop
		}
	}
	return res;
 80049be:	7ffb      	ldrb	r3, [r7, #31]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3724      	adds	r7, #36	@ 0x24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd90      	pop	{r4, r7, pc}

080049c8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d904      	bls.n	80049ee <remove_chain+0x26>
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d301      	bcc.n	80049f2 <remove_chain+0x2a>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e04b      	b.n	8004a8a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00c      	beq.n	8004a12 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80049f8:	f04f 32ff 	mov.w	r2, #4294967295
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	69b8      	ldr	r0, [r7, #24]
 8004a00:	f7ff fec8 	bl	8004794 <put_fat>
 8004a04:	4603      	mov	r3, r0
 8004a06:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004a08:	7ffb      	ldrb	r3, [r7, #31]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <remove_chain+0x4a>
 8004a0e:	7ffb      	ldrb	r3, [r7, #31]
 8004a10:	e03b      	b.n	8004a8a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f7ff fdea 	bl	80045ee <get_fat>
 8004a1a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d031      	beq.n	8004a86 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <remove_chain+0x64>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e02e      	b.n	8004a8a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a32:	d101      	bne.n	8004a38 <remove_chain+0x70>
 8004a34:	2301      	movs	r3, #1
 8004a36:	e028      	b.n	8004a8a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004a38:	2200      	movs	r2, #0
 8004a3a:	68b9      	ldr	r1, [r7, #8]
 8004a3c:	69b8      	ldr	r0, [r7, #24]
 8004a3e:	f7ff fea9 	bl	8004794 <put_fat>
 8004a42:	4603      	mov	r3, r0
 8004a44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004a46:	7ffb      	ldrb	r3, [r7, #31]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <remove_chain+0x88>
 8004a4c:	7ffb      	ldrb	r3, [r7, #31]
 8004a4e:	e01c      	b.n	8004a8a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	699a      	ldr	r2, [r3, #24]
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	3b02      	subs	r3, #2
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d20b      	bcs.n	8004a76 <remove_chain+0xae>
			fs->free_clst++;
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	791b      	ldrb	r3, [r3, #4]
 8004a6c:	f043 0301 	orr.w	r3, r3, #1
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d3c6      	bcc.n	8004a12 <remove_chain+0x4a>
 8004a84:	e000      	b.n	8004a88 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004a86:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3720      	adds	r7, #32
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b088      	sub	sp, #32
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10d      	bne.n	8004ac4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d004      	beq.n	8004abe <create_chain+0x2c>
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d31b      	bcc.n	8004af6 <create_chain+0x64>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	e018      	b.n	8004af6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004ac4:	6839      	ldr	r1, [r7, #0]
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff fd91 	bl	80045ee <get_fat>
 8004acc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d801      	bhi.n	8004ad8 <create_chain+0x46>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e070      	b.n	8004bba <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ade:	d101      	bne.n	8004ae4 <create_chain+0x52>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	e06a      	b.n	8004bba <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d201      	bcs.n	8004af2 <create_chain+0x60>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	e063      	b.n	8004bba <create_chain+0x128>
		scl = clst;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	3301      	adds	r3, #1
 8004afe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d307      	bcc.n	8004b1a <create_chain+0x88>
				ncl = 2;
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d901      	bls.n	8004b1a <create_chain+0x88>
 8004b16:	2300      	movs	r3, #0
 8004b18:	e04f      	b.n	8004bba <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004b1a:	69f9      	ldr	r1, [r7, #28]
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7ff fd66 	bl	80045ee <get_fat>
 8004b22:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00e      	beq.n	8004b48 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d003      	beq.n	8004b38 <create_chain+0xa6>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d101      	bne.n	8004b3c <create_chain+0xaa>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	e03e      	b.n	8004bba <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d1da      	bne.n	8004afa <create_chain+0x68>
 8004b44:	2300      	movs	r3, #0
 8004b46:	e038      	b.n	8004bba <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004b48:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b4e:	69f9      	ldr	r1, [r7, #28]
 8004b50:	6938      	ldr	r0, [r7, #16]
 8004b52:	f7ff fe1f 	bl	8004794 <put_fat>
 8004b56:	4603      	mov	r3, r0
 8004b58:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004b5a:	7dfb      	ldrb	r3, [r7, #23]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d109      	bne.n	8004b74 <create_chain+0xe2>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d006      	beq.n	8004b74 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	6839      	ldr	r1, [r7, #0]
 8004b6a:	6938      	ldr	r0, [r7, #16]
 8004b6c:	f7ff fe12 	bl	8004794 <put_fat>
 8004b70:	4603      	mov	r3, r0
 8004b72:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004b74:	7dfb      	ldrb	r3, [r7, #23]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d116      	bne.n	8004ba8 <create_chain+0x116>
		fs->last_clst = ncl;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	69fa      	ldr	r2, [r7, #28]
 8004b7e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	699a      	ldr	r2, [r3, #24]
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	3b02      	subs	r3, #2
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d804      	bhi.n	8004b98 <create_chain+0x106>
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	1e5a      	subs	r2, r3, #1
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	791b      	ldrb	r3, [r3, #4]
 8004b9c:	f043 0301 	orr.w	r3, r3, #1
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	711a      	strb	r2, [r3, #4]
 8004ba6:	e007      	b.n	8004bb8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004ba8:	7dfb      	ldrb	r3, [r7, #23]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d102      	bne.n	8004bb4 <create_chain+0x122>
 8004bae:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb2:	e000      	b.n	8004bb6 <create_chain+0x124>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004bb8:	69fb      	ldr	r3, [r7, #28]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3720      	adds	r7, #32
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b087      	sub	sp, #28
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	899b      	ldrh	r3, [r3, #12]
 8004bde:	461a      	mov	r2, r3
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	8952      	ldrh	r2, [r2, #10]
 8004bea:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bee:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1d1a      	adds	r2, r3, #4
 8004bf4:	613a      	str	r2, [r7, #16]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <clmt_clust+0x42>
 8004c00:	2300      	movs	r3, #0
 8004c02:	e010      	b.n	8004c26 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d307      	bcc.n	8004c1c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	3304      	adds	r3, #4
 8004c18:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c1a:	e7e9      	b.n	8004bf0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004c1c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	4413      	add	r3, r2
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b086      	sub	sp, #24
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c48:	d204      	bcs.n	8004c54 <dir_sdi+0x22>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	f003 031f 	and.w	r3, r3, #31
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004c54:	2302      	movs	r3, #2
 8004c56:	e071      	b.n	8004d3c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <dir_sdi+0x46>
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d902      	bls.n	8004c78 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c76:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10c      	bne.n	8004c98 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	8912      	ldrh	r2, [r2, #8]
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d301      	bcc.n	8004c8e <dir_sdi+0x5c>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e056      	b.n	8004d3c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	61da      	str	r2, [r3, #28]
 8004c96:	e02d      	b.n	8004cf4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	895b      	ldrh	r3, [r3, #10]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	899b      	ldrh	r3, [r3, #12]
 8004ca2:	fb02 f303 	mul.w	r3, r2, r3
 8004ca6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004ca8:	e019      	b.n	8004cde <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6979      	ldr	r1, [r7, #20]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fc9d 	bl	80045ee <get_fat>
 8004cb4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbc:	d101      	bne.n	8004cc2 <dir_sdi+0x90>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e03c      	b.n	8004d3c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d904      	bls.n	8004cd2 <dir_sdi+0xa0>
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d301      	bcc.n	8004cd6 <dir_sdi+0xa4>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e032      	b.n	8004d3c <dir_sdi+0x10a>
			ofs -= csz;
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d2e1      	bcs.n	8004caa <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004ce6:	6979      	ldr	r1, [r7, #20]
 8004ce8:	6938      	ldr	r0, [r7, #16]
 8004cea:	f7ff fc61 	bl	80045b0 <clust2sect>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <dir_sdi+0xd4>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e01a      	b.n	8004d3c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69da      	ldr	r2, [r3, #28]
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	899b      	ldrh	r3, [r3, #12]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d16:	441a      	add	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	899b      	ldrh	r3, [r3, #12]
 8004d26:	461a      	mov	r2, r3
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d2e:	fb00 f202 	mul.w	r2, r0, r2
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	18ca      	adds	r2, r1, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	3320      	adds	r3, #32
 8004d5a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <dir_next+0x28>
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d6a:	d301      	bcc.n	8004d70 <dir_next+0x2c>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	e0bb      	b.n	8004ee8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	899b      	ldrh	r3, [r3, #12]
 8004d74:	461a      	mov	r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d7c:	fb01 f202 	mul.w	r2, r1, r2
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f040 809d 	bne.w	8004ec2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10b      	bne.n	8004db2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	8912      	ldrh	r2, [r2, #8]
 8004da2:	4293      	cmp	r3, r2
 8004da4:	f0c0 808d 	bcc.w	8004ec2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	61da      	str	r2, [r3, #28]
 8004dae:	2304      	movs	r3, #4
 8004db0:	e09a      	b.n	8004ee8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	899b      	ldrh	r3, [r3, #12]
 8004db6:	461a      	mov	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	8952      	ldrh	r2, [r2, #10]
 8004dc2:	3a01      	subs	r2, #1
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d17b      	bne.n	8004ec2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	f7ff fc0b 	bl	80045ee <get_fat>
 8004dd8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d801      	bhi.n	8004de4 <dir_next+0xa0>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e081      	b.n	8004ee8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dea:	d101      	bne.n	8004df0 <dir_next+0xac>
 8004dec:	2301      	movs	r3, #1
 8004dee:	e07b      	b.n	8004ee8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d359      	bcc.n	8004eae <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	61da      	str	r2, [r3, #28]
 8004e06:	2304      	movs	r3, #4
 8004e08:	e06e      	b.n	8004ee8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	4619      	mov	r1, r3
 8004e12:	4610      	mov	r0, r2
 8004e14:	f7ff fe3d 	bl	8004a92 <create_chain>
 8004e18:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <dir_next+0xe0>
 8004e20:	2307      	movs	r3, #7
 8004e22:	e061      	b.n	8004ee8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <dir_next+0xea>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	e05c      	b.n	8004ee8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e34:	d101      	bne.n	8004e3a <dir_next+0xf6>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e056      	b.n	8004ee8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f7ff fad6 	bl	80043ec <sync_window>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <dir_next+0x106>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e04e      	b.n	8004ee8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	899b      	ldrh	r3, [r3, #12]
 8004e54:	461a      	mov	r2, r3
 8004e56:	2100      	movs	r1, #0
 8004e58:	f7ff f8fe 	bl	8004058 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	6979      	ldr	r1, [r7, #20]
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f7ff fba4 	bl	80045b0 <clust2sect>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e6e:	e012      	b.n	8004e96 <dir_next+0x152>
						fs->wflag = 1;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2201      	movs	r2, #1
 8004e74:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f7ff fab8 	bl	80043ec <sync_window>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <dir_next+0x142>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e030      	b.n	8004ee8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	895b      	ldrh	r3, [r3, #10]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d3e6      	bcc.n	8004e70 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad2      	subs	r2, r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004eb4:	6979      	ldr	r1, [r7, #20]
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f7ff fb7a 	bl	80045b0 <clust2sect>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	899b      	ldrh	r3, [r3, #12]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	fbb3 f0f2 	udiv	r0, r3, r2
 8004eda:	fb00 f202 	mul.w	r2, r0, r2
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	18ca      	adds	r2, r1, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004f00:	2100      	movs	r1, #0
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff fe95 	bl	8004c32 <dir_sdi>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d12b      	bne.n	8004f6a <dir_alloc+0x7a>
		n = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f7ff faa9 	bl	8004474 <move_window>
 8004f22:	4603      	mov	r3, r0
 8004f24:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004f26:	7dfb      	ldrb	r3, [r7, #23]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d11d      	bne.n	8004f68 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2be5      	cmp	r3, #229	@ 0xe5
 8004f34:	d004      	beq.n	8004f40 <dir_alloc+0x50>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d107      	bne.n	8004f50 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	3301      	adds	r3, #1
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d102      	bne.n	8004f54 <dir_alloc+0x64>
 8004f4e:	e00c      	b.n	8004f6a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004f50:	2300      	movs	r3, #0
 8004f52:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004f54:	2101      	movs	r1, #1
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff fef4 	bl	8004d44 <dir_next>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004f60:	7dfb      	ldrb	r3, [r7, #23]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0d7      	beq.n	8004f16 <dir_alloc+0x26>
 8004f66:	e000      	b.n	8004f6a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004f68:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004f6a:	7dfb      	ldrb	r3, [r7, #23]
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d101      	bne.n	8004f74 <dir_alloc+0x84>
 8004f70:	2307      	movs	r3, #7
 8004f72:	75fb      	strb	r3, [r7, #23]
	return res;
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	331a      	adds	r3, #26
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fe ffbf 	bl	8003f10 <ld_word>
 8004f92:	4603      	mov	r3, r0
 8004f94:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d109      	bne.n	8004fb2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	3314      	adds	r3, #20
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fe ffb4 	bl	8003f10 <ld_word>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	041b      	lsls	r3, r3, #16
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	331a      	adds	r3, #26
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	b292      	uxth	r2, r2
 8004fd0:	4611      	mov	r1, r2
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fe ffd8 	bl	8003f88 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d109      	bne.n	8004ff4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f103 0214 	add.w	r2, r3, #20
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	0c1b      	lsrs	r3, r3, #16
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	4619      	mov	r1, r3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	f7fe ffca 	bl	8003f88 <st_word>
	}
}
 8004ff4:	bf00      	nop
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	331a      	adds	r3, #26
 800500a:	4618      	mov	r0, r3
 800500c:	f7fe ff80 	bl	8003f10 <ld_word>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <cmp_lfn+0x1e>
 8005016:	2300      	movs	r3, #0
 8005018:	e059      	b.n	80050ce <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005022:	1e5a      	subs	r2, r3, #1
 8005024:	4613      	mov	r3, r2
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005030:	2301      	movs	r3, #1
 8005032:	81fb      	strh	r3, [r7, #14]
 8005034:	2300      	movs	r3, #0
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	e033      	b.n	80050a2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800503a:	4a27      	ldr	r2, [pc, #156]	@ (80050d8 <cmp_lfn+0xdc>)
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	4413      	add	r3, r2
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	4413      	add	r3, r2
 8005048:	4618      	mov	r0, r3
 800504a:	f7fe ff61 	bl	8003f10 <ld_word>
 800504e:	4603      	mov	r3, r0
 8005050:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005052:	89fb      	ldrh	r3, [r7, #14]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01a      	beq.n	800508e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2bfe      	cmp	r3, #254	@ 0xfe
 800505c:	d812      	bhi.n	8005084 <cmp_lfn+0x88>
 800505e:	89bb      	ldrh	r3, [r7, #12]
 8005060:	4618      	mov	r0, r3
 8005062:	f002 f839 	bl	80070d8 <ff_wtoupper>
 8005066:	4603      	mov	r3, r0
 8005068:	461c      	mov	r4, r3
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	617a      	str	r2, [r7, #20]
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4413      	add	r3, r2
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	4618      	mov	r0, r3
 800507a:	f002 f82d 	bl	80070d8 <ff_wtoupper>
 800507e:	4603      	mov	r3, r0
 8005080:	429c      	cmp	r4, r3
 8005082:	d001      	beq.n	8005088 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005084:	2300      	movs	r3, #0
 8005086:	e022      	b.n	80050ce <cmp_lfn+0xd2>
			}
			wc = uc;
 8005088:	89bb      	ldrh	r3, [r7, #12]
 800508a:	81fb      	strh	r3, [r7, #14]
 800508c:	e006      	b.n	800509c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800508e:	89bb      	ldrh	r3, [r7, #12]
 8005090:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005094:	4293      	cmp	r3, r2
 8005096:	d001      	beq.n	800509c <cmp_lfn+0xa0>
 8005098:	2300      	movs	r3, #0
 800509a:	e018      	b.n	80050ce <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	3301      	adds	r3, #1
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	2b0c      	cmp	r3, #12
 80050a6:	d9c8      	bls.n	800503a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00b      	beq.n	80050cc <cmp_lfn+0xd0>
 80050b4:	89fb      	ldrh	r3, [r7, #14]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d008      	beq.n	80050cc <cmp_lfn+0xd0>
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	4413      	add	r3, r2
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <cmp_lfn+0xd0>
 80050c8:	2300      	movs	r3, #0
 80050ca:	e000      	b.n	80050ce <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80050cc:	2301      	movs	r3, #1
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd90      	pop	{r4, r7, pc}
 80050d6:	bf00      	nop
 80050d8:	08007ef4 	.word	0x08007ef4

080050dc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	331a      	adds	r3, #26
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7fe ff10 	bl	8003f10 <ld_word>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <pick_lfn+0x1e>
 80050f6:	2300      	movs	r3, #0
 80050f8:	e04d      	b.n	8005196 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005102:	1e5a      	subs	r2, r3, #1
 8005104:	4613      	mov	r3, r2
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	4413      	add	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005110:	2301      	movs	r3, #1
 8005112:	81fb      	strh	r3, [r7, #14]
 8005114:	2300      	movs	r3, #0
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	e028      	b.n	800516c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800511a:	4a21      	ldr	r2, [pc, #132]	@ (80051a0 <pick_lfn+0xc4>)
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	4413      	add	r3, r2
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	4413      	add	r3, r2
 8005128:	4618      	mov	r0, r3
 800512a:	f7fe fef1 	bl	8003f10 <ld_word>
 800512e:	4603      	mov	r3, r0
 8005130:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005132:	89fb      	ldrh	r3, [r7, #14]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00f      	beq.n	8005158 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2bfe      	cmp	r3, #254	@ 0xfe
 800513c:	d901      	bls.n	8005142 <pick_lfn+0x66>
 800513e:	2300      	movs	r3, #0
 8005140:	e029      	b.n	8005196 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8005142:	89bb      	ldrh	r3, [r7, #12]
 8005144:	81fb      	strh	r3, [r7, #14]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	617a      	str	r2, [r7, #20]
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	4413      	add	r3, r2
 8005152:	89fa      	ldrh	r2, [r7, #14]
 8005154:	801a      	strh	r2, [r3, #0]
 8005156:	e006      	b.n	8005166 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005158:	89bb      	ldrh	r3, [r7, #12]
 800515a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800515e:	4293      	cmp	r3, r2
 8005160:	d001      	beq.n	8005166 <pick_lfn+0x8a>
 8005162:	2300      	movs	r3, #0
 8005164:	e017      	b.n	8005196 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	3301      	adds	r3, #1
 800516a:	613b      	str	r3, [r7, #16]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	2b0c      	cmp	r3, #12
 8005170:	d9d3      	bls.n	800511a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2bfe      	cmp	r3, #254	@ 0xfe
 8005182:	d901      	bls.n	8005188 <pick_lfn+0xac>
 8005184:	2300      	movs	r3, #0
 8005186:	e006      	b.n	8005196 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	4413      	add	r3, r2
 8005190:	2200      	movs	r2, #0
 8005192:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8005194:	2301      	movs	r3, #1
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	08007ef4 	.word	0x08007ef4

080051a4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	4611      	mov	r1, r2
 80051b0:	461a      	mov	r2, r3
 80051b2:	460b      	mov	r3, r1
 80051b4:	71fb      	strb	r3, [r7, #7]
 80051b6:	4613      	mov	r3, r2
 80051b8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	330d      	adds	r3, #13
 80051be:	79ba      	ldrb	r2, [r7, #6]
 80051c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	330b      	adds	r3, #11
 80051c6:	220f      	movs	r2, #15
 80051c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	330c      	adds	r3, #12
 80051ce:	2200      	movs	r2, #0
 80051d0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	331a      	adds	r3, #26
 80051d6:	2100      	movs	r1, #0
 80051d8:	4618      	mov	r0, r3
 80051da:	f7fe fed5 	bl	8003f88 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	1e5a      	subs	r2, r3, #1
 80051e2:	4613      	mov	r3, r2
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	82fb      	strh	r3, [r7, #22]
 80051f2:	2300      	movs	r3, #0
 80051f4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80051f6:	8afb      	ldrh	r3, [r7, #22]
 80051f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d007      	beq.n	8005210 <put_lfn+0x6c>
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	61fa      	str	r2, [r7, #28]
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005210:	4a17      	ldr	r2, [pc, #92]	@ (8005270 <put_lfn+0xcc>)
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	4413      	add	r3, r2
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4413      	add	r3, r2
 800521e:	8afa      	ldrh	r2, [r7, #22]
 8005220:	4611      	mov	r1, r2
 8005222:	4618      	mov	r0, r3
 8005224:	f7fe feb0 	bl	8003f88 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005228:	8afb      	ldrh	r3, [r7, #22]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d102      	bne.n	8005234 <put_lfn+0x90>
 800522e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005232:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	3301      	adds	r3, #1
 8005238:	61bb      	str	r3, [r7, #24]
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	2b0c      	cmp	r3, #12
 800523e:	d9da      	bls.n	80051f6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005240:	8afb      	ldrh	r3, [r7, #22]
 8005242:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005246:	4293      	cmp	r3, r2
 8005248:	d006      	beq.n	8005258 <put_lfn+0xb4>
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4413      	add	r3, r2
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <put_lfn+0xbc>
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800525e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	79fa      	ldrb	r2, [r7, #7]
 8005264:	701a      	strb	r2, [r3, #0]
}
 8005266:	bf00      	nop
 8005268:	3720      	adds	r7, #32
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	08007ef4 	.word	0x08007ef4

08005274 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08c      	sub	sp, #48	@ 0x30
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005282:	220b      	movs	r2, #11
 8005284:	68b9      	ldr	r1, [r7, #8]
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f7fe fec5 	bl	8004016 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b05      	cmp	r3, #5
 8005290:	d92b      	bls.n	80052ea <gen_numname+0x76>
		sr = seq;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005296:	e022      	b.n	80052de <gen_numname+0x6a>
			wc = *lfn++;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	1c9a      	adds	r2, r3, #2
 800529c:	607a      	str	r2, [r7, #4]
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80052a2:	2300      	movs	r3, #0
 80052a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052a6:	e017      	b.n	80052d8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	005a      	lsls	r2, r3, #1
 80052ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	4413      	add	r3, r2
 80052b4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80052b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80052b8:	085b      	lsrs	r3, r3, #1
 80052ba:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d005      	beq.n	80052d2 <gen_numname+0x5e>
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80052cc:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80052d0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80052d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d4:	3301      	adds	r3, #1
 80052d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052da:	2b0f      	cmp	r3, #15
 80052dc:	d9e4      	bls.n	80052a8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1d8      	bne.n	8005298 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80052ea:	2307      	movs	r3, #7
 80052ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	3330      	adds	r3, #48	@ 0x30
 80052fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80052fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005302:	2b39      	cmp	r3, #57	@ 0x39
 8005304:	d904      	bls.n	8005310 <gen_numname+0x9c>
 8005306:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800530a:	3307      	adds	r3, #7
 800530c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005312:	1e5a      	subs	r2, r3, #1
 8005314:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005316:	3330      	adds	r3, #48	@ 0x30
 8005318:	443b      	add	r3, r7
 800531a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800531e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	091b      	lsrs	r3, r3, #4
 8005326:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1df      	bne.n	80052ee <gen_numname+0x7a>
	ns[i] = '~';
 800532e:	f107 0214 	add.w	r2, r7, #20
 8005332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005334:	4413      	add	r3, r2
 8005336:	227e      	movs	r2, #126	@ 0x7e
 8005338:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800533a:	2300      	movs	r3, #0
 800533c:	627b      	str	r3, [r7, #36]	@ 0x24
 800533e:	e002      	b.n	8005346 <gen_numname+0xd2>
 8005340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005342:	3301      	adds	r3, #1
 8005344:	627b      	str	r3, [r7, #36]	@ 0x24
 8005346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534a:	429a      	cmp	r2, r3
 800534c:	d205      	bcs.n	800535a <gen_numname+0xe6>
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005352:	4413      	add	r3, r2
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2b20      	cmp	r3, #32
 8005358:	d1f2      	bne.n	8005340 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800535a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535c:	2b07      	cmp	r3, #7
 800535e:	d807      	bhi.n	8005370 <gen_numname+0xfc>
 8005360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005366:	3330      	adds	r3, #48	@ 0x30
 8005368:	443b      	add	r3, r7
 800536a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800536e:	e000      	b.n	8005372 <gen_numname+0xfe>
 8005370:	2120      	movs	r1, #32
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	627a      	str	r2, [r7, #36]	@ 0x24
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4413      	add	r3, r2
 800537c:	460a      	mov	r2, r1
 800537e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005382:	2b07      	cmp	r3, #7
 8005384:	d9e9      	bls.n	800535a <gen_numname+0xe6>
}
 8005386:	bf00      	nop
 8005388:	bf00      	nop
 800538a:	3730      	adds	r7, #48	@ 0x30
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800539c:	230b      	movs	r3, #11
 800539e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	0852      	lsrs	r2, r2, #1
 80053a6:	01db      	lsls	r3, r3, #7
 80053a8:	4313      	orrs	r3, r2
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	1c59      	adds	r1, r3, #1
 80053b0:	6079      	str	r1, [r7, #4]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	4413      	add	r3, r2
 80053b6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	60bb      	str	r3, [r7, #8]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1ed      	bne.n	80053a0 <sum_sfn+0x10>
	return sum;
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b086      	sub	sp, #24
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80053dc:	2304      	movs	r3, #4
 80053de:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80053e6:	23ff      	movs	r3, #255	@ 0xff
 80053e8:	757b      	strb	r3, [r7, #21]
 80053ea:	23ff      	movs	r3, #255	@ 0xff
 80053ec:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80053ee:	e081      	b.n	80054f4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	4619      	mov	r1, r3
 80053f6:	6938      	ldr	r0, [r7, #16]
 80053f8:	f7ff f83c 	bl	8004474 <move_window>
 80053fc:	4603      	mov	r3, r0
 80053fe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005400:	7dfb      	ldrb	r3, [r7, #23]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d17c      	bne.n	8005500 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800540e:	7dbb      	ldrb	r3, [r7, #22]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d102      	bne.n	800541a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005414:	2304      	movs	r3, #4
 8005416:	75fb      	strb	r3, [r7, #23]
 8005418:	e077      	b.n	800550a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	330b      	adds	r3, #11
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005426:	73fb      	strb	r3, [r7, #15]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	7bfa      	ldrb	r2, [r7, #15]
 800542c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800542e:	7dbb      	ldrb	r3, [r7, #22]
 8005430:	2be5      	cmp	r3, #229	@ 0xe5
 8005432:	d00e      	beq.n	8005452 <dir_read+0x80>
 8005434:	7dbb      	ldrb	r3, [r7, #22]
 8005436:	2b2e      	cmp	r3, #46	@ 0x2e
 8005438:	d00b      	beq.n	8005452 <dir_read+0x80>
 800543a:	7bfb      	ldrb	r3, [r7, #15]
 800543c:	f023 0320 	bic.w	r3, r3, #32
 8005440:	2b08      	cmp	r3, #8
 8005442:	bf0c      	ite	eq
 8005444:	2301      	moveq	r3, #1
 8005446:	2300      	movne	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	4293      	cmp	r3, r2
 8005450:	d002      	beq.n	8005458 <dir_read+0x86>
				ord = 0xFF;
 8005452:	23ff      	movs	r3, #255	@ 0xff
 8005454:	757b      	strb	r3, [r7, #21]
 8005456:	e044      	b.n	80054e2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	2b0f      	cmp	r3, #15
 800545c:	d12f      	bne.n	80054be <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800545e:	7dbb      	ldrb	r3, [r7, #22]
 8005460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00d      	beq.n	8005484 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	7b5b      	ldrb	r3, [r3, #13]
 800546e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8005470:	7dbb      	ldrb	r3, [r7, #22]
 8005472:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005476:	75bb      	strb	r3, [r7, #22]
 8005478:	7dbb      	ldrb	r3, [r7, #22]
 800547a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	695a      	ldr	r2, [r3, #20]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005484:	7dba      	ldrb	r2, [r7, #22]
 8005486:	7d7b      	ldrb	r3, [r7, #21]
 8005488:	429a      	cmp	r2, r3
 800548a:	d115      	bne.n	80054b8 <dir_read+0xe6>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	330d      	adds	r3, #13
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	7d3a      	ldrb	r2, [r7, #20]
 8005496:	429a      	cmp	r2, r3
 8005498:	d10e      	bne.n	80054b8 <dir_read+0xe6>
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	691a      	ldr	r2, [r3, #16]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	4619      	mov	r1, r3
 80054a4:	4610      	mov	r0, r2
 80054a6:	f7ff fe19 	bl	80050dc <pick_lfn>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <dir_read+0xe6>
 80054b0:	7d7b      	ldrb	r3, [r7, #21]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	e000      	b.n	80054ba <dir_read+0xe8>
 80054b8:	23ff      	movs	r3, #255	@ 0xff
 80054ba:	757b      	strb	r3, [r7, #21]
 80054bc:	e011      	b.n	80054e2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80054be:	7d7b      	ldrb	r3, [r7, #21]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d109      	bne.n	80054d8 <dir_read+0x106>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7ff ff61 	bl	8005390 <sum_sfn>
 80054ce:	4603      	mov	r3, r0
 80054d0:	461a      	mov	r2, r3
 80054d2:	7d3b      	ldrb	r3, [r7, #20]
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d015      	beq.n	8005504 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f04f 32ff 	mov.w	r2, #4294967295
 80054de:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 80054e0:	e010      	b.n	8005504 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80054e2:	2100      	movs	r1, #0
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff fc2d 	bl	8004d44 <dir_next>
 80054ea:	4603      	mov	r3, r0
 80054ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80054ee:	7dfb      	ldrb	r3, [r7, #23]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d109      	bne.n	8005508 <dir_read+0x136>
	while (dp->sect) {
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f47f af79 	bne.w	80053f0 <dir_read+0x1e>
 80054fe:	e004      	b.n	800550a <dir_read+0x138>
		if (res != FR_OK) break;
 8005500:	bf00      	nop
 8005502:	e002      	b.n	800550a <dir_read+0x138>
					break;
 8005504:	bf00      	nop
 8005506:	e000      	b.n	800550a <dir_read+0x138>
		if (res != FR_OK) break;
 8005508:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800550a:	7dfb      	ldrb	r3, [r7, #23]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <dir_read+0x144>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	61da      	str	r2, [r3, #28]
	return res;
 8005516:	7dfb      	ldrb	r3, [r7, #23]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800552e:	2100      	movs	r1, #0
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff fb7e 	bl	8004c32 <dir_sdi>
 8005536:	4603      	mov	r3, r0
 8005538:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800553a:	7dfb      	ldrb	r3, [r7, #23]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <dir_find+0x24>
 8005540:	7dfb      	ldrb	r3, [r7, #23]
 8005542:	e0a9      	b.n	8005698 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005544:	23ff      	movs	r3, #255	@ 0xff
 8005546:	753b      	strb	r3, [r7, #20]
 8005548:	7d3b      	ldrb	r3, [r7, #20]
 800554a:	757b      	strb	r3, [r7, #21]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f04f 32ff 	mov.w	r2, #4294967295
 8005552:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	4619      	mov	r1, r3
 800555a:	6938      	ldr	r0, [r7, #16]
 800555c:	f7fe ff8a 	bl	8004474 <move_window>
 8005560:	4603      	mov	r3, r0
 8005562:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005564:	7dfb      	ldrb	r3, [r7, #23]
 8005566:	2b00      	cmp	r3, #0
 8005568:	f040 8090 	bne.w	800568c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005574:	7dbb      	ldrb	r3, [r7, #22]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d102      	bne.n	8005580 <dir_find+0x60>
 800557a:	2304      	movs	r3, #4
 800557c:	75fb      	strb	r3, [r7, #23]
 800557e:	e08a      	b.n	8005696 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	330b      	adds	r3, #11
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800558c:	73fb      	strb	r3, [r7, #15]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	7bfa      	ldrb	r2, [r7, #15]
 8005592:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005594:	7dbb      	ldrb	r3, [r7, #22]
 8005596:	2be5      	cmp	r3, #229	@ 0xe5
 8005598:	d007      	beq.n	80055aa <dir_find+0x8a>
 800559a:	7bfb      	ldrb	r3, [r7, #15]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d009      	beq.n	80055b8 <dir_find+0x98>
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	2b0f      	cmp	r3, #15
 80055a8:	d006      	beq.n	80055b8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80055aa:	23ff      	movs	r3, #255	@ 0xff
 80055ac:	757b      	strb	r3, [r7, #21]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f04f 32ff 	mov.w	r2, #4294967295
 80055b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80055b6:	e05e      	b.n	8005676 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	2b0f      	cmp	r3, #15
 80055bc:	d136      	bne.n	800562c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80055c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d154      	bne.n	8005676 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80055cc:	7dbb      	ldrb	r3, [r7, #22]
 80055ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00d      	beq.n	80055f2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	7b5b      	ldrb	r3, [r3, #13]
 80055dc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80055de:	7dbb      	ldrb	r3, [r7, #22]
 80055e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055e4:	75bb      	strb	r3, [r7, #22]
 80055e6:	7dbb      	ldrb	r3, [r7, #22]
 80055e8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695a      	ldr	r2, [r3, #20]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80055f2:	7dba      	ldrb	r2, [r7, #22]
 80055f4:	7d7b      	ldrb	r3, [r7, #21]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d115      	bne.n	8005626 <dir_find+0x106>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	330d      	adds	r3, #13
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	7d3a      	ldrb	r2, [r7, #20]
 8005604:	429a      	cmp	r2, r3
 8005606:	d10e      	bne.n	8005626 <dir_find+0x106>
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	4619      	mov	r1, r3
 8005612:	4610      	mov	r0, r2
 8005614:	f7ff fcf2 	bl	8004ffc <cmp_lfn>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <dir_find+0x106>
 800561e:	7d7b      	ldrb	r3, [r7, #21]
 8005620:	3b01      	subs	r3, #1
 8005622:	b2db      	uxtb	r3, r3
 8005624:	e000      	b.n	8005628 <dir_find+0x108>
 8005626:	23ff      	movs	r3, #255	@ 0xff
 8005628:	757b      	strb	r3, [r7, #21]
 800562a:	e024      	b.n	8005676 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800562c:	7d7b      	ldrb	r3, [r7, #21]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <dir_find+0x126>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff feaa 	bl	8005390 <sum_sfn>
 800563c:	4603      	mov	r3, r0
 800563e:	461a      	mov	r2, r3
 8005640:	7d3b      	ldrb	r3, [r7, #20]
 8005642:	4293      	cmp	r3, r2
 8005644:	d024      	beq.n	8005690 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10a      	bne.n	800566a <dir_find+0x14a>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a18      	ldr	r0, [r3, #32]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3324      	adds	r3, #36	@ 0x24
 800565c:	220b      	movs	r2, #11
 800565e:	4619      	mov	r1, r3
 8005660:	f7fe fd15 	bl	800408e <mem_cmp>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d014      	beq.n	8005694 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800566a:	23ff      	movs	r3, #255	@ 0xff
 800566c:	757b      	strb	r3, [r7, #21]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f04f 32ff 	mov.w	r2, #4294967295
 8005674:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005676:	2100      	movs	r1, #0
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7ff fb63 	bl	8004d44 <dir_next>
 800567e:	4603      	mov	r3, r0
 8005680:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005682:	7dfb      	ldrb	r3, [r7, #23]
 8005684:	2b00      	cmp	r3, #0
 8005686:	f43f af65 	beq.w	8005554 <dir_find+0x34>
 800568a:	e004      	b.n	8005696 <dir_find+0x176>
		if (res != FR_OK) break;
 800568c:	bf00      	nop
 800568e:	e002      	b.n	8005696 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005690:	bf00      	nop
 8005692:	e000      	b.n	8005696 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005694:	bf00      	nop

	return res;
 8005696:	7dfb      	ldrb	r3, [r7, #23]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08c      	sub	sp, #48	@ 0x30
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80056b4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <dir_register+0x20>
 80056bc:	2306      	movs	r3, #6
 80056be:	e0e0      	b.n	8005882 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80056c0:	2300      	movs	r3, #0
 80056c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c4:	e002      	b.n	80056cc <dir_register+0x2c>
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	3301      	adds	r3, #1
 80056ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	4413      	add	r3, r2
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1f4      	bne.n	80056c6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80056e2:	f107 030c 	add.w	r3, r7, #12
 80056e6:	220c      	movs	r2, #12
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fe fc94 	bl	8004016 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80056ee:	7dfb      	ldrb	r3, [r7, #23]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d032      	beq.n	800575e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2240      	movs	r2, #64	@ 0x40
 80056fc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8005700:	2301      	movs	r3, #1
 8005702:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005704:	e016      	b.n	8005734 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	f107 010c 	add.w	r1, r7, #12
 8005714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005716:	f7ff fdad 	bl	8005274 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff ff00 	bl	8005520 <dir_find>
 8005720:	4603      	mov	r3, r0
 8005722:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8005726:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800572a:	2b00      	cmp	r3, #0
 800572c:	d106      	bne.n	800573c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800572e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005730:	3301      	adds	r3, #1
 8005732:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005736:	2b63      	cmp	r3, #99	@ 0x63
 8005738:	d9e5      	bls.n	8005706 <dir_register+0x66>
 800573a:	e000      	b.n	800573e <dir_register+0x9e>
			if (res != FR_OK) break;
 800573c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005740:	2b64      	cmp	r3, #100	@ 0x64
 8005742:	d101      	bne.n	8005748 <dir_register+0xa8>
 8005744:	2307      	movs	r3, #7
 8005746:	e09c      	b.n	8005882 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005748:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800574c:	2b04      	cmp	r3, #4
 800574e:	d002      	beq.n	8005756 <dir_register+0xb6>
 8005750:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005754:	e095      	b.n	8005882 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005756:	7dfa      	ldrb	r2, [r7, #23]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800575e:	7dfb      	ldrb	r3, [r7, #23]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d007      	beq.n	8005778 <dir_register+0xd8>
 8005768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576a:	330c      	adds	r3, #12
 800576c:	4a47      	ldr	r2, [pc, #284]	@ (800588c <dir_register+0x1ec>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	089b      	lsrs	r3, r3, #2
 8005774:	3301      	adds	r3, #1
 8005776:	e000      	b.n	800577a <dir_register+0xda>
 8005778:	2301      	movs	r3, #1
 800577a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800577c:	6a39      	ldr	r1, [r7, #32]
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff fbb6 	bl	8004ef0 <dir_alloc>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800578a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800578e:	2b00      	cmp	r3, #0
 8005790:	d148      	bne.n	8005824 <dir_register+0x184>
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	3b01      	subs	r3, #1
 8005796:	623b      	str	r3, [r7, #32]
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d042      	beq.n	8005824 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695a      	ldr	r2, [r3, #20]
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	015b      	lsls	r3, r3, #5
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	4619      	mov	r1, r3
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff fa41 	bl	8004c32 <dir_sdi>
 80057b0:	4603      	mov	r3, r0
 80057b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80057b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d132      	bne.n	8005824 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3324      	adds	r3, #36	@ 0x24
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff fde4 	bl	8005390 <sum_sfn>
 80057c8:	4603      	mov	r3, r0
 80057ca:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	4619      	mov	r1, r3
 80057d2:	69f8      	ldr	r0, [r7, #28]
 80057d4:	f7fe fe4e 	bl	8004474 <move_window>
 80057d8:	4603      	mov	r3, r0
 80057da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80057de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d11d      	bne.n	8005822 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	6918      	ldr	r0, [r3, #16]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a19      	ldr	r1, [r3, #32]
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	7efb      	ldrb	r3, [r7, #27]
 80057f4:	f7ff fcd6 	bl	80051a4 <put_lfn>
				fs->wflag = 1;
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	2201      	movs	r2, #1
 80057fc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80057fe:	2100      	movs	r1, #0
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff fa9f 	bl	8004d44 <dir_next>
 8005806:	4603      	mov	r3, r0
 8005808:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800580c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005810:	2b00      	cmp	r3, #0
 8005812:	d107      	bne.n	8005824 <dir_register+0x184>
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	3b01      	subs	r3, #1
 8005818:	623b      	str	r3, [r7, #32]
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1d5      	bne.n	80057cc <dir_register+0x12c>
 8005820:	e000      	b.n	8005824 <dir_register+0x184>
				if (res != FR_OK) break;
 8005822:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005824:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005828:	2b00      	cmp	r3, #0
 800582a:	d128      	bne.n	800587e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	4619      	mov	r1, r3
 8005832:	69f8      	ldr	r0, [r7, #28]
 8005834:	f7fe fe1e 	bl	8004474 <move_window>
 8005838:	4603      	mov	r3, r0
 800583a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800583e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005842:	2b00      	cmp	r3, #0
 8005844:	d11b      	bne.n	800587e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	2220      	movs	r2, #32
 800584c:	2100      	movs	r1, #0
 800584e:	4618      	mov	r0, r3
 8005850:	f7fe fc02 	bl	8004058 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a18      	ldr	r0, [r3, #32]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3324      	adds	r3, #36	@ 0x24
 800585c:	220b      	movs	r2, #11
 800585e:	4619      	mov	r1, r3
 8005860:	f7fe fbd9 	bl	8004016 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	330c      	adds	r3, #12
 8005870:	f002 0218 	and.w	r2, r2, #24
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	2201      	movs	r2, #1
 800587c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800587e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005882:	4618      	mov	r0, r3
 8005884:	3730      	adds	r7, #48	@ 0x30
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	4ec4ec4f 	.word	0x4ec4ec4f

08005890 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2200      	movs	r2, #0
 80058a4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 80ca 	beq.w	8005a44 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b8:	d032      	beq.n	8005920 <get_fileinfo+0x90>
			i = j = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80058c2:	e01b      	b.n	80058fc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80058c4:	89fb      	ldrh	r3, [r7, #14]
 80058c6:	2100      	movs	r1, #0
 80058c8:	4618      	mov	r0, r3
 80058ca:	f001 fbc9 	bl	8007060 <ff_convert>
 80058ce:	4603      	mov	r3, r0
 80058d0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80058d2:	89fb      	ldrh	r3, [r7, #14]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d102      	bne.n	80058de <get_fileinfo+0x4e>
 80058d8:	2300      	movs	r3, #0
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	e01a      	b.n	8005914 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80058e2:	d902      	bls.n	80058ea <get_fileinfo+0x5a>
 80058e4:	2300      	movs	r3, #0
 80058e6:	61fb      	str	r3, [r7, #28]
 80058e8:	e014      	b.n	8005914 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	61fa      	str	r2, [r7, #28]
 80058f0:	89fa      	ldrh	r2, [r7, #14]
 80058f2:	b2d1      	uxtb	r1, r2
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	4413      	add	r3, r2
 80058f8:	460a      	mov	r2, r1
 80058fa:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	691a      	ldr	r2, [r3, #16]
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	1c59      	adds	r1, r3, #1
 8005904:	61b9      	str	r1, [r7, #24]
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	4413      	add	r3, r2
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	81fb      	strh	r3, [r7, #14]
 800590e:	89fb      	ldrh	r3, [r7, #14]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1d7      	bne.n	80058c4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	3316      	adds	r3, #22
 800591c:	2200      	movs	r2, #0
 800591e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	61bb      	str	r3, [r7, #24]
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	4413      	add	r3, r2
 800592e:	3316      	adds	r3, #22
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8005934:	e04d      	b.n	80059d2 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1a      	ldr	r2, [r3, #32]
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	1c59      	adds	r1, r3, #1
 800593e:	61f9      	str	r1, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8005946:	7dfb      	ldrb	r3, [r7, #23]
 8005948:	2b20      	cmp	r3, #32
 800594a:	d041      	beq.n	80059d0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800594c:	7dfb      	ldrb	r3, [r7, #23]
 800594e:	2b05      	cmp	r3, #5
 8005950:	d101      	bne.n	8005956 <get_fileinfo+0xc6>
 8005952:	23e5      	movs	r3, #229	@ 0xe5
 8005954:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	2b09      	cmp	r3, #9
 800595a:	d10f      	bne.n	800597c <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800595c:	89bb      	ldrh	r3, [r7, #12]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d105      	bne.n	800596e <get_fileinfo+0xde>
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	4413      	add	r3, r2
 8005968:	3316      	adds	r3, #22
 800596a:	222e      	movs	r2, #46	@ 0x2e
 800596c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	61ba      	str	r2, [r7, #24]
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	4413      	add	r3, r2
 8005978:	222e      	movs	r2, #46	@ 0x2e
 800597a:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	4413      	add	r3, r2
 8005982:	3309      	adds	r3, #9
 8005984:	7dfa      	ldrb	r2, [r7, #23]
 8005986:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8005988:	89bb      	ldrh	r3, [r7, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d11c      	bne.n	80059c8 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	2b40      	cmp	r3, #64	@ 0x40
 8005992:	d913      	bls.n	80059bc <get_fileinfo+0x12c>
 8005994:	7dfb      	ldrb	r3, [r7, #23]
 8005996:	2b5a      	cmp	r3, #90	@ 0x5a
 8005998:	d810      	bhi.n	80059bc <get_fileinfo+0x12c>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	330c      	adds	r3, #12
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d901      	bls.n	80059ae <get_fileinfo+0x11e>
 80059aa:	2310      	movs	r3, #16
 80059ac:	e000      	b.n	80059b0 <get_fileinfo+0x120>
 80059ae:	2308      	movs	r3, #8
 80059b0:	4013      	ands	r3, r2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 80059b6:	7dfb      	ldrb	r3, [r7, #23]
 80059b8:	3320      	adds	r3, #32
 80059ba:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	4413      	add	r3, r2
 80059c2:	3316      	adds	r3, #22
 80059c4:	7dfa      	ldrb	r2, [r7, #23]
 80059c6:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	3301      	adds	r3, #1
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	e000      	b.n	80059d2 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 80059d0:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	2b0a      	cmp	r3, #10
 80059d6:	d9ae      	bls.n	8005936 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80059d8:	89bb      	ldrh	r3, [r7, #12]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10d      	bne.n	80059fa <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	4413      	add	r3, r2
 80059e4:	3316      	adds	r3, #22
 80059e6:	2200      	movs	r2, #0
 80059e8:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	330c      	adds	r3, #12
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <get_fileinfo+0x16a>
 80059f6:	2300      	movs	r3, #0
 80059f8:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	4413      	add	r3, r2
 8005a00:	3309      	adds	r3, #9
 8005a02:	2200      	movs	r2, #0
 8005a04:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	7ada      	ldrb	r2, [r3, #11]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	331c      	adds	r3, #28
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fe fa93 	bl	8003f42 <ld_dword>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	3316      	adds	r3, #22
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fe fa8a 	bl	8003f42 <ld_dword>
 8005a2e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	80da      	strh	r2, [r3, #6]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	0c1b      	lsrs	r3, r3, #16
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	809a      	strh	r2, [r3, #4]
 8005a42:	e000      	b.n	8005a46 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005a44:	bf00      	nop
}
 8005a46:	3720      	adds	r7, #32
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08a      	sub	sp, #40	@ 0x28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	613b      	str	r3, [r7, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	2300      	movs	r3, #0
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	61ba      	str	r2, [r7, #24]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	4413      	add	r3, r2
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005a7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a7c:	2b1f      	cmp	r3, #31
 8005a7e:	d940      	bls.n	8005b02 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005a80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a82:	2b2f      	cmp	r3, #47	@ 0x2f
 8005a84:	d006      	beq.n	8005a94 <create_name+0x48>
 8005a86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a88:	2b5c      	cmp	r3, #92	@ 0x5c
 8005a8a:	d110      	bne.n	8005aae <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005a8c:	e002      	b.n	8005a94 <create_name+0x48>
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	3301      	adds	r3, #1
 8005a92:	61bb      	str	r3, [r7, #24]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	4413      	add	r3, r2
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b2f      	cmp	r3, #47	@ 0x2f
 8005a9e:	d0f6      	beq.n	8005a8e <create_name+0x42>
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b5c      	cmp	r3, #92	@ 0x5c
 8005aaa:	d0f0      	beq.n	8005a8e <create_name+0x42>
			break;
 8005aac:	e02a      	b.n	8005b04 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2bfe      	cmp	r3, #254	@ 0xfe
 8005ab2:	d901      	bls.n	8005ab8 <create_name+0x6c>
 8005ab4:	2306      	movs	r3, #6
 8005ab6:	e17d      	b.n	8005db4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005ab8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005abe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f001 facc 	bl	8007060 <ff_convert>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005acc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <create_name+0x8a>
 8005ad2:	2306      	movs	r3, #6
 8005ad4:	e16e      	b.n	8005db4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005ad6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ad8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ada:	d809      	bhi.n	8005af0 <create_name+0xa4>
 8005adc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ade:	4619      	mov	r1, r3
 8005ae0:	488d      	ldr	r0, [pc, #564]	@ (8005d18 <create_name+0x2cc>)
 8005ae2:	f7fe fafb 	bl	80040dc <chk_chr>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <create_name+0xa4>
 8005aec:	2306      	movs	r3, #6
 8005aee:	e161      	b.n	8005db4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	617a      	str	r2, [r7, #20]
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005afe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005b00:	e7b4      	b.n	8005a6c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005b02:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	441a      	add	r2, r3
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005b0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b10:	2b1f      	cmp	r3, #31
 8005b12:	d801      	bhi.n	8005b18 <create_name+0xcc>
 8005b14:	2304      	movs	r3, #4
 8005b16:	e000      	b.n	8005b1a <create_name+0xce>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005b1e:	e011      	b.n	8005b44 <create_name+0xf8>
		w = lfn[di - 1];
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005b26:	3b01      	subs	r3, #1
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8005b32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b34:	2b20      	cmp	r3, #32
 8005b36:	d002      	beq.n	8005b3e <create_name+0xf2>
 8005b38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b3c:	d106      	bne.n	8005b4c <create_name+0x100>
		di--;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	3b01      	subs	r3, #1
 8005b42:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1ea      	bne.n	8005b20 <create_name+0xd4>
 8005b4a:	e000      	b.n	8005b4e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005b4c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4413      	add	r3, r2
 8005b56:	2200      	movs	r2, #0
 8005b58:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <create_name+0x118>
 8005b60:	2306      	movs	r3, #6
 8005b62:	e127      	b.n	8005db4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3324      	adds	r3, #36	@ 0x24
 8005b68:	220b      	movs	r2, #11
 8005b6a:	2120      	movs	r1, #32
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fe fa73 	bl	8004058 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005b72:	2300      	movs	r3, #0
 8005b74:	61bb      	str	r3, [r7, #24]
 8005b76:	e002      	b.n	8005b7e <create_name+0x132>
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4413      	add	r3, r2
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	d0f5      	beq.n	8005b78 <create_name+0x12c>
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4413      	add	r3, r2
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b98:	d0ee      	beq.n	8005b78 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d009      	beq.n	8005bb4 <create_name+0x168>
 8005ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ba4:	f043 0303 	orr.w	r3, r3, #3
 8005ba8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005bac:	e002      	b.n	8005bb4 <create_name+0x168>
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d009      	beq.n	8005bce <create_name+0x182>
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bcc:	d1ef      	bne.n	8005bae <create_name+0x162>

	i = b = 0; ni = 8;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	623b      	str	r3, [r7, #32]
 8005bd8:	2308      	movs	r3, #8
 8005bda:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	61ba      	str	r2, [r7, #24]
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	4413      	add	r3, r2
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005bec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 8090 	beq.w	8005d14 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005bf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	d006      	beq.n	8005c08 <create_name+0x1bc>
 8005bfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bfe:	d10a      	bne.n	8005c16 <create_name+0x1ca>
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d006      	beq.n	8005c16 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005c08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c0c:	f043 0303 	orr.w	r3, r3, #3
 8005c10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005c14:	e07d      	b.n	8005d12 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005c16:	6a3a      	ldr	r2, [r7, #32]
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d203      	bcs.n	8005c26 <create_name+0x1da>
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d123      	bne.n	8005c6e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	2b0b      	cmp	r3, #11
 8005c2a:	d106      	bne.n	8005c3a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c30:	f043 0303 	orr.w	r3, r3, #3
 8005c34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005c38:	e075      	b.n	8005d26 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d005      	beq.n	8005c4e <create_name+0x202>
 8005c42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c46:	f043 0303 	orr.w	r3, r3, #3
 8005c4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d866      	bhi.n	8005d24 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	2308      	movs	r3, #8
 8005c5c:	623b      	str	r3, [r7, #32]
 8005c5e:	230b      	movs	r3, #11
 8005c60:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005c62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005c6c:	e051      	b.n	8005d12 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005c6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c70:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c72:	d914      	bls.n	8005c9e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005c74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c76:	2100      	movs	r1, #0
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f001 f9f1 	bl	8007060 <ff_convert>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005c82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d004      	beq.n	8005c92 <create_name+0x246>
 8005c88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c8a:	3b80      	subs	r3, #128	@ 0x80
 8005c8c:	4a23      	ldr	r2, [pc, #140]	@ (8005d1c <create_name+0x2d0>)
 8005c8e:	5cd3      	ldrb	r3, [r2, r3]
 8005c90:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005c92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c96:	f043 0302 	orr.w	r3, r3, #2
 8005c9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005c9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d007      	beq.n	8005cb4 <create_name+0x268>
 8005ca4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	481d      	ldr	r0, [pc, #116]	@ (8005d20 <create_name+0x2d4>)
 8005caa:	f7fe fa17 	bl	80040dc <chk_chr>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d008      	beq.n	8005cc6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005cb4:	235f      	movs	r3, #95	@ 0x5f
 8005cb6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cbc:	f043 0303 	orr.w	r3, r3, #3
 8005cc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005cc4:	e01b      	b.n	8005cfe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005cc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cc8:	2b40      	cmp	r3, #64	@ 0x40
 8005cca:	d909      	bls.n	8005ce0 <create_name+0x294>
 8005ccc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cce:	2b5a      	cmp	r3, #90	@ 0x5a
 8005cd0:	d806      	bhi.n	8005ce0 <create_name+0x294>
					b |= 2;
 8005cd2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005cd6:	f043 0302 	orr.w	r3, r3, #2
 8005cda:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005cde:	e00e      	b.n	8005cfe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005ce0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ce2:	2b60      	cmp	r3, #96	@ 0x60
 8005ce4:	d90b      	bls.n	8005cfe <create_name+0x2b2>
 8005ce6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ce8:	2b7a      	cmp	r3, #122	@ 0x7a
 8005cea:	d808      	bhi.n	8005cfe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005cec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005cf0:	f043 0301 	orr.w	r3, r3, #1
 8005cf4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005cf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cfa:	3b20      	subs	r3, #32
 8005cfc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	623a      	str	r2, [r7, #32]
 8005d04:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d06:	b2d1      	uxtb	r1, r2
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	460a      	mov	r2, r1
 8005d0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005d12:	e763      	b.n	8005bdc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005d14:	bf00      	nop
 8005d16:	e006      	b.n	8005d26 <create_name+0x2da>
 8005d18:	08007e14 	.word	0x08007e14
 8005d1c:	08007e74 	.word	0x08007e74
 8005d20:	08007e20 	.word	0x08007e20
			if (si > di) break;			/* No extension */
 8005d24:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d2c:	2be5      	cmp	r3, #229	@ 0xe5
 8005d2e:	d103      	bne.n	8005d38 <create_name+0x2ec>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2205      	movs	r2, #5
 8005d34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	2b08      	cmp	r3, #8
 8005d3c:	d104      	bne.n	8005d48 <create_name+0x2fc>
 8005d3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005d48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d4c:	f003 030c 	and.w	r3, r3, #12
 8005d50:	2b0c      	cmp	r3, #12
 8005d52:	d005      	beq.n	8005d60 <create_name+0x314>
 8005d54:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d58:	f003 0303 	and.w	r3, r3, #3
 8005d5c:	2b03      	cmp	r3, #3
 8005d5e:	d105      	bne.n	8005d6c <create_name+0x320>
 8005d60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d64:	f043 0302 	orr.w	r3, r3, #2
 8005d68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d117      	bne.n	8005da8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005d78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d7c:	f003 0303 	and.w	r3, r3, #3
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d105      	bne.n	8005d90 <create_name+0x344>
 8005d84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d88:	f043 0310 	orr.w	r3, r3, #16
 8005d8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005d90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d94:	f003 030c 	and.w	r3, r3, #12
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d105      	bne.n	8005da8 <create_name+0x35c>
 8005d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005da0:	f043 0308 	orr.w	r3, r3, #8
 8005da4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005dae:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8005db2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3728      	adds	r7, #40	@ 0x28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005dd0:	e002      	b.n	8005dd8 <follow_path+0x1c>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b2f      	cmp	r3, #47	@ 0x2f
 8005dde:	d0f8      	beq.n	8005dd2 <follow_path+0x16>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b5c      	cmp	r3, #92	@ 0x5c
 8005de6:	d0f4      	beq.n	8005dd2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	2200      	movs	r2, #0
 8005dec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b1f      	cmp	r3, #31
 8005df4:	d80a      	bhi.n	8005e0c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2280      	movs	r2, #128	@ 0x80
 8005dfa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8005dfe:	2100      	movs	r1, #0
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7fe ff16 	bl	8004c32 <dir_sdi>
 8005e06:	4603      	mov	r3, r0
 8005e08:	75fb      	strb	r3, [r7, #23]
 8005e0a:	e048      	b.n	8005e9e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005e0c:	463b      	mov	r3, r7
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff fe1b 	bl	8005a4c <create_name>
 8005e16:	4603      	mov	r3, r0
 8005e18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d139      	bne.n	8005e94 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7ff fb7d 	bl	8005520 <dir_find>
 8005e26:	4603      	mov	r3, r0
 8005e28:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005e30:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005e32:	7dfb      	ldrb	r3, [r7, #23]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00a      	beq.n	8005e4e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005e38:	7dfb      	ldrb	r3, [r7, #23]
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d12c      	bne.n	8005e98 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005e3e:	7afb      	ldrb	r3, [r7, #11]
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d127      	bne.n	8005e98 <follow_path+0xdc>
 8005e48:	2305      	movs	r3, #5
 8005e4a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005e4c:	e024      	b.n	8005e98 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005e4e:	7afb      	ldrb	r3, [r7, #11]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d121      	bne.n	8005e9c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	799b      	ldrb	r3, [r3, #6]
 8005e5c:	f003 0310 	and.w	r3, r3, #16
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005e64:	2305      	movs	r3, #5
 8005e66:	75fb      	strb	r3, [r7, #23]
 8005e68:	e019      	b.n	8005e9e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	8992      	ldrh	r2, [r2, #12]
 8005e78:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e7c:	fb00 f202 	mul.w	r2, r0, r2
 8005e80:	1a9b      	subs	r3, r3, r2
 8005e82:	440b      	add	r3, r1
 8005e84:	4619      	mov	r1, r3
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f7ff f879 	bl	8004f7e <ld_clust>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005e92:	e7bb      	b.n	8005e0c <follow_path+0x50>
			if (res != FR_OK) break;
 8005e94:	bf00      	nop
 8005e96:	e002      	b.n	8005e9e <follow_path+0xe2>
				break;
 8005e98:	bf00      	nop
 8005e9a:	e000      	b.n	8005e9e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005e9c:	bf00      	nop
			}
		}
	}

	return res;
 8005e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d031      	beq.n	8005f22 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	e002      	b.n	8005ecc <get_ldnumber+0x24>
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b1f      	cmp	r3, #31
 8005ed2:	d903      	bls.n	8005edc <get_ldnumber+0x34>
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	2b3a      	cmp	r3, #58	@ 0x3a
 8005eda:	d1f4      	bne.n	8005ec6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b3a      	cmp	r3, #58	@ 0x3a
 8005ee2:	d11c      	bne.n	8005f1e <get_ldnumber+0x76>
			tp = *path;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	60fa      	str	r2, [r7, #12]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	3b30      	subs	r3, #48	@ 0x30
 8005ef4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b09      	cmp	r3, #9
 8005efa:	d80e      	bhi.n	8005f1a <get_ldnumber+0x72>
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d10a      	bne.n	8005f1a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d107      	bne.n	8005f1a <get_ldnumber+0x72>
					vol = (int)i;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	3301      	adds	r3, #1
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	e002      	b.n	8005f24 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005f1e:	2300      	movs	r3, #0
 8005f20:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005f22:	693b      	ldr	r3, [r7, #16]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	70da      	strb	r2, [r3, #3]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f04f 32ff 	mov.w	r2, #4294967295
 8005f46:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005f48:	6839      	ldr	r1, [r7, #0]
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fe fa92 	bl	8004474 <move_window>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <check_fs+0x2a>
 8005f56:	2304      	movs	r3, #4
 8005f58:	e038      	b.n	8005fcc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3338      	adds	r3, #56	@ 0x38
 8005f5e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fd ffd4 	bl	8003f10 <ld_word>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d001      	beq.n	8005f78 <check_fs+0x48>
 8005f74:	2303      	movs	r3, #3
 8005f76:	e029      	b.n	8005fcc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005f7e:	2be9      	cmp	r3, #233	@ 0xe9
 8005f80:	d009      	beq.n	8005f96 <check_fs+0x66>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005f88:	2beb      	cmp	r3, #235	@ 0xeb
 8005f8a:	d11e      	bne.n	8005fca <check_fs+0x9a>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005f92:	2b90      	cmp	r3, #144	@ 0x90
 8005f94:	d119      	bne.n	8005fca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3338      	adds	r3, #56	@ 0x38
 8005f9a:	3336      	adds	r3, #54	@ 0x36
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fd ffd0 	bl	8003f42 <ld_dword>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8005fd4 <check_fs+0xa4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d101      	bne.n	8005fb2 <check_fs+0x82>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	e00c      	b.n	8005fcc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3338      	adds	r3, #56	@ 0x38
 8005fb6:	3352      	adds	r3, #82	@ 0x52
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fd ffc2 	bl	8003f42 <ld_dword>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	4a05      	ldr	r2, [pc, #20]	@ (8005fd8 <check_fs+0xa8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d101      	bne.n	8005fca <check_fs+0x9a>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	e000      	b.n	8005fcc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005fca:	2302      	movs	r3, #2
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	00544146 	.word	0x00544146
 8005fd8:	33544146 	.word	0x33544146

08005fdc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b096      	sub	sp, #88	@ 0x58
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f7ff ff59 	bl	8005ea8 <get_ldnumber>
 8005ff6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	da01      	bge.n	8006002 <find_volume+0x26>
 8005ffe:	230b      	movs	r3, #11
 8006000:	e265      	b.n	80064ce <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006002:	4a9f      	ldr	r2, [pc, #636]	@ (8006280 <find_volume+0x2a4>)
 8006004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800600a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800600c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <find_volume+0x3a>
 8006012:	230c      	movs	r3, #12
 8006014:	e25b      	b.n	80064ce <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800601a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800601c:	79fb      	ldrb	r3, [r7, #7]
 800601e:	f023 0301 	bic.w	r3, r3, #1
 8006022:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01a      	beq.n	8006062 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800602c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800602e:	785b      	ldrb	r3, [r3, #1]
 8006030:	4618      	mov	r0, r3
 8006032:	f7fd fecd 	bl	8003dd0 <disk_status>
 8006036:	4603      	mov	r3, r0
 8006038:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800603c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10c      	bne.n	8006062 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006048:	79fb      	ldrb	r3, [r7, #7]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d007      	beq.n	800605e <find_volume+0x82>
 800604e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800605a:	230a      	movs	r3, #10
 800605c:	e237      	b.n	80064ce <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800605e:	2300      	movs	r3, #0
 8006060:	e235      	b.n	80064ce <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006064:	2200      	movs	r2, #0
 8006066:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800606a:	b2da      	uxtb	r2, r3
 800606c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800606e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006072:	785b      	ldrb	r3, [r3, #1]
 8006074:	4618      	mov	r0, r3
 8006076:	f7fd fec5 	bl	8003e04 <disk_initialize>
 800607a:	4603      	mov	r3, r0
 800607c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006080:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800608c:	2303      	movs	r3, #3
 800608e:	e21e      	b.n	80064ce <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006090:	79fb      	ldrb	r3, [r7, #7]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d007      	beq.n	80060a6 <find_volume+0xca>
 8006096:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800609a:	f003 0304 	and.w	r3, r3, #4
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80060a2:	230a      	movs	r3, #10
 80060a4:	e213      	b.n	80064ce <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80060a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a8:	7858      	ldrb	r0, [r3, #1]
 80060aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ac:	330c      	adds	r3, #12
 80060ae:	461a      	mov	r2, r3
 80060b0:	2102      	movs	r1, #2
 80060b2:	f7fd ff0f 	bl	8003ed4 <disk_ioctl>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <find_volume+0xe4>
 80060bc:	2301      	movs	r3, #1
 80060be:	e206      	b.n	80064ce <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80060c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c2:	899b      	ldrh	r3, [r3, #12]
 80060c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060c8:	d80d      	bhi.n	80060e6 <find_volume+0x10a>
 80060ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060cc:	899b      	ldrh	r3, [r3, #12]
 80060ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060d2:	d308      	bcc.n	80060e6 <find_volume+0x10a>
 80060d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d6:	899b      	ldrh	r3, [r3, #12]
 80060d8:	461a      	mov	r2, r3
 80060da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060dc:	899b      	ldrh	r3, [r3, #12]
 80060de:	3b01      	subs	r3, #1
 80060e0:	4013      	ands	r3, r2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <find_volume+0x10e>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e1f1      	b.n	80064ce <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80060ea:	2300      	movs	r3, #0
 80060ec:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80060ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80060f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80060f2:	f7ff ff1d 	bl	8005f30 <check_fs>
 80060f6:	4603      	mov	r3, r0
 80060f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80060fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006100:	2b02      	cmp	r3, #2
 8006102:	d149      	bne.n	8006198 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006104:	2300      	movs	r3, #0
 8006106:	643b      	str	r3, [r7, #64]	@ 0x40
 8006108:	e01e      	b.n	8006148 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800610a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006118:	4413      	add	r3, r2
 800611a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	3304      	adds	r3, #4
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d006      	beq.n	8006134 <find_volume+0x158>
 8006126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006128:	3308      	adds	r3, #8
 800612a:	4618      	mov	r0, r3
 800612c:	f7fd ff09 	bl	8003f42 <ld_dword>
 8006130:	4602      	mov	r2, r0
 8006132:	e000      	b.n	8006136 <find_volume+0x15a>
 8006134:	2200      	movs	r2, #0
 8006136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	3358      	adds	r3, #88	@ 0x58
 800613c:	443b      	add	r3, r7
 800613e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006144:	3301      	adds	r3, #1
 8006146:	643b      	str	r3, [r7, #64]	@ 0x40
 8006148:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800614a:	2b03      	cmp	r3, #3
 800614c:	d9dd      	bls.n	800610a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800614e:	2300      	movs	r3, #0
 8006150:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <find_volume+0x182>
 8006158:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800615a:	3b01      	subs	r3, #1
 800615c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800615e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	3358      	adds	r3, #88	@ 0x58
 8006164:	443b      	add	r3, r7
 8006166:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800616a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800616c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800616e:	2b00      	cmp	r3, #0
 8006170:	d005      	beq.n	800617e <find_volume+0x1a2>
 8006172:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006174:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006176:	f7ff fedb 	bl	8005f30 <check_fs>
 800617a:	4603      	mov	r3, r0
 800617c:	e000      	b.n	8006180 <find_volume+0x1a4>
 800617e:	2303      	movs	r3, #3
 8006180:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006184:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006188:	2b01      	cmp	r3, #1
 800618a:	d905      	bls.n	8006198 <find_volume+0x1bc>
 800618c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800618e:	3301      	adds	r3, #1
 8006190:	643b      	str	r3, [r7, #64]	@ 0x40
 8006192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006194:	2b03      	cmp	r3, #3
 8006196:	d9e2      	bls.n	800615e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006198:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800619c:	2b04      	cmp	r3, #4
 800619e:	d101      	bne.n	80061a4 <find_volume+0x1c8>
 80061a0:	2301      	movs	r3, #1
 80061a2:	e194      	b.n	80064ce <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80061a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d901      	bls.n	80061b0 <find_volume+0x1d4>
 80061ac:	230d      	movs	r3, #13
 80061ae:	e18e      	b.n	80064ce <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80061b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b2:	3338      	adds	r3, #56	@ 0x38
 80061b4:	330b      	adds	r3, #11
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fd feaa 	bl	8003f10 <ld_word>
 80061bc:	4603      	mov	r3, r0
 80061be:	461a      	mov	r2, r3
 80061c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c2:	899b      	ldrh	r3, [r3, #12]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d001      	beq.n	80061cc <find_volume+0x1f0>
 80061c8:	230d      	movs	r3, #13
 80061ca:	e180      	b.n	80064ce <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80061cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ce:	3338      	adds	r3, #56	@ 0x38
 80061d0:	3316      	adds	r3, #22
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fd fe9c 	bl	8003f10 <ld_word>
 80061d8:	4603      	mov	r3, r0
 80061da:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80061dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <find_volume+0x214>
 80061e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e4:	3338      	adds	r3, #56	@ 0x38
 80061e6:	3324      	adds	r3, #36	@ 0x24
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fd feaa 	bl	8003f42 <ld_dword>
 80061ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80061f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061f4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80061f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80061fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006202:	789b      	ldrb	r3, [r3, #2]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d005      	beq.n	8006214 <find_volume+0x238>
 8006208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620a:	789b      	ldrb	r3, [r3, #2]
 800620c:	2b02      	cmp	r3, #2
 800620e:	d001      	beq.n	8006214 <find_volume+0x238>
 8006210:	230d      	movs	r3, #13
 8006212:	e15c      	b.n	80064ce <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006216:	789b      	ldrb	r3, [r3, #2]
 8006218:	461a      	mov	r2, r3
 800621a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800621c:	fb02 f303 	mul.w	r3, r2, r3
 8006220:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006224:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006228:	461a      	mov	r2, r3
 800622a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800622c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800622e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006230:	895b      	ldrh	r3, [r3, #10]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d008      	beq.n	8006248 <find_volume+0x26c>
 8006236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006238:	895b      	ldrh	r3, [r3, #10]
 800623a:	461a      	mov	r2, r3
 800623c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623e:	895b      	ldrh	r3, [r3, #10]
 8006240:	3b01      	subs	r3, #1
 8006242:	4013      	ands	r3, r2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <find_volume+0x270>
 8006248:	230d      	movs	r3, #13
 800624a:	e140      	b.n	80064ce <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800624c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624e:	3338      	adds	r3, #56	@ 0x38
 8006250:	3311      	adds	r3, #17
 8006252:	4618      	mov	r0, r3
 8006254:	f7fd fe5c 	bl	8003f10 <ld_word>
 8006258:	4603      	mov	r3, r0
 800625a:	461a      	mov	r2, r3
 800625c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800625e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006262:	891b      	ldrh	r3, [r3, #8]
 8006264:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006266:	8992      	ldrh	r2, [r2, #12]
 8006268:	0952      	lsrs	r2, r2, #5
 800626a:	b292      	uxth	r2, r2
 800626c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006270:	fb01 f202 	mul.w	r2, r1, r2
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	b29b      	uxth	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <find_volume+0x2a8>
 800627c:	230d      	movs	r3, #13
 800627e:	e126      	b.n	80064ce <find_volume+0x4f2>
 8006280:	20002584 	.word	0x20002584

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006286:	3338      	adds	r3, #56	@ 0x38
 8006288:	3313      	adds	r3, #19
 800628a:	4618      	mov	r0, r3
 800628c:	f7fd fe40 	bl	8003f10 <ld_word>
 8006290:	4603      	mov	r3, r0
 8006292:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006294:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006296:	2b00      	cmp	r3, #0
 8006298:	d106      	bne.n	80062a8 <find_volume+0x2cc>
 800629a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629c:	3338      	adds	r3, #56	@ 0x38
 800629e:	3320      	adds	r3, #32
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7fd fe4e 	bl	8003f42 <ld_dword>
 80062a6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80062a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062aa:	3338      	adds	r3, #56	@ 0x38
 80062ac:	330e      	adds	r3, #14
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fd fe2e 	bl	8003f10 <ld_word>
 80062b4:	4603      	mov	r3, r0
 80062b6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80062b8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <find_volume+0x2e6>
 80062be:	230d      	movs	r3, #13
 80062c0:	e105      	b.n	80064ce <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80062c2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80062c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062c6:	4413      	add	r3, r2
 80062c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062ca:	8911      	ldrh	r1, [r2, #8]
 80062cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062ce:	8992      	ldrh	r2, [r2, #12]
 80062d0:	0952      	lsrs	r2, r2, #5
 80062d2:	b292      	uxth	r2, r2
 80062d4:	fbb1 f2f2 	udiv	r2, r1, r2
 80062d8:	b292      	uxth	r2, r2
 80062da:	4413      	add	r3, r2
 80062dc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80062de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d201      	bcs.n	80062ea <find_volume+0x30e>
 80062e6:	230d      	movs	r3, #13
 80062e8:	e0f1      	b.n	80064ce <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80062ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062f2:	8952      	ldrh	r2, [r2, #10]
 80062f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80062f8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80062fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <find_volume+0x328>
 8006300:	230d      	movs	r3, #13
 8006302:	e0e4      	b.n	80064ce <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006304:	2303      	movs	r3, #3
 8006306:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800630a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006310:	4293      	cmp	r3, r2
 8006312:	d802      	bhi.n	800631a <find_volume+0x33e>
 8006314:	2302      	movs	r3, #2
 8006316:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006320:	4293      	cmp	r3, r2
 8006322:	d802      	bhi.n	800632a <find_volume+0x34e>
 8006324:	2301      	movs	r3, #1
 8006326:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632c:	1c9a      	adds	r2, r3, #2
 800632e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006330:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006334:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006336:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006338:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800633a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800633c:	441a      	add	r2, r3
 800633e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006340:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006342:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006346:	441a      	add	r2, r3
 8006348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800634a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800634c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006350:	2b03      	cmp	r3, #3
 8006352:	d11e      	bne.n	8006392 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006356:	3338      	adds	r3, #56	@ 0x38
 8006358:	332a      	adds	r3, #42	@ 0x2a
 800635a:	4618      	mov	r0, r3
 800635c:	f7fd fdd8 	bl	8003f10 <ld_word>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <find_volume+0x38e>
 8006366:	230d      	movs	r3, #13
 8006368:	e0b1      	b.n	80064ce <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800636a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636c:	891b      	ldrh	r3, [r3, #8]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <find_volume+0x39a>
 8006372:	230d      	movs	r3, #13
 8006374:	e0ab      	b.n	80064ce <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006378:	3338      	adds	r3, #56	@ 0x38
 800637a:	332c      	adds	r3, #44	@ 0x2c
 800637c:	4618      	mov	r0, r3
 800637e:	f7fd fde0 	bl	8003f42 <ld_dword>
 8006382:	4602      	mov	r2, r0
 8006384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006386:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006390:	e01f      	b.n	80063d2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006394:	891b      	ldrh	r3, [r3, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <find_volume+0x3c2>
 800639a:	230d      	movs	r3, #13
 800639c:	e097      	b.n	80064ce <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800639e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063a4:	441a      	add	r2, r3
 80063a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a8:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80063aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d103      	bne.n	80063ba <find_volume+0x3de>
 80063b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	005b      	lsls	r3, r3, #1
 80063b8:	e00a      	b.n	80063d0 <find_volume+0x3f4>
 80063ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063bc:	69da      	ldr	r2, [r3, #28]
 80063be:	4613      	mov	r3, r2
 80063c0:	005b      	lsls	r3, r3, #1
 80063c2:	4413      	add	r3, r2
 80063c4:	085a      	lsrs	r2, r3, #1
 80063c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80063d0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80063d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d4:	6a1a      	ldr	r2, [r3, #32]
 80063d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d8:	899b      	ldrh	r3, [r3, #12]
 80063da:	4619      	mov	r1, r3
 80063dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063de:	440b      	add	r3, r1
 80063e0:	3b01      	subs	r3, #1
 80063e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80063e4:	8989      	ldrh	r1, [r1, #12]
 80063e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d201      	bcs.n	80063f2 <find_volume+0x416>
 80063ee:	230d      	movs	r3, #13
 80063f0:	e06d      	b.n	80064ce <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80063f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f4:	f04f 32ff 	mov.w	r2, #4294967295
 80063f8:	619a      	str	r2, [r3, #24]
 80063fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006400:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006404:	2280      	movs	r2, #128	@ 0x80
 8006406:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006408:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800640c:	2b03      	cmp	r3, #3
 800640e:	d149      	bne.n	80064a4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006412:	3338      	adds	r3, #56	@ 0x38
 8006414:	3330      	adds	r3, #48	@ 0x30
 8006416:	4618      	mov	r0, r3
 8006418:	f7fd fd7a 	bl	8003f10 <ld_word>
 800641c:	4603      	mov	r3, r0
 800641e:	2b01      	cmp	r3, #1
 8006420:	d140      	bne.n	80064a4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006424:	3301      	adds	r3, #1
 8006426:	4619      	mov	r1, r3
 8006428:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800642a:	f7fe f823 	bl	8004474 <move_window>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d137      	bne.n	80064a4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006436:	2200      	movs	r2, #0
 8006438:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800643a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800643c:	3338      	adds	r3, #56	@ 0x38
 800643e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006442:	4618      	mov	r0, r3
 8006444:	f7fd fd64 	bl	8003f10 <ld_word>
 8006448:	4603      	mov	r3, r0
 800644a:	461a      	mov	r2, r3
 800644c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006450:	429a      	cmp	r2, r3
 8006452:	d127      	bne.n	80064a4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006456:	3338      	adds	r3, #56	@ 0x38
 8006458:	4618      	mov	r0, r3
 800645a:	f7fd fd72 	bl	8003f42 <ld_dword>
 800645e:	4603      	mov	r3, r0
 8006460:	4a1d      	ldr	r2, [pc, #116]	@ (80064d8 <find_volume+0x4fc>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d11e      	bne.n	80064a4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006468:	3338      	adds	r3, #56	@ 0x38
 800646a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800646e:	4618      	mov	r0, r3
 8006470:	f7fd fd67 	bl	8003f42 <ld_dword>
 8006474:	4603      	mov	r3, r0
 8006476:	4a19      	ldr	r2, [pc, #100]	@ (80064dc <find_volume+0x500>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d113      	bne.n	80064a4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800647c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647e:	3338      	adds	r3, #56	@ 0x38
 8006480:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006484:	4618      	mov	r0, r3
 8006486:	f7fd fd5c 	bl	8003f42 <ld_dword>
 800648a:	4602      	mov	r2, r0
 800648c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800648e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006492:	3338      	adds	r3, #56	@ 0x38
 8006494:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006498:	4618      	mov	r0, r3
 800649a:	f7fd fd52 	bl	8003f42 <ld_dword>
 800649e:	4602      	mov	r2, r0
 80064a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80064a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80064aa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80064ac:	4b0c      	ldr	r3, [pc, #48]	@ (80064e0 <find_volume+0x504>)
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	3301      	adds	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	4b0a      	ldr	r3, [pc, #40]	@ (80064e0 <find_volume+0x504>)
 80064b6:	801a      	strh	r2, [r3, #0]
 80064b8:	4b09      	ldr	r3, [pc, #36]	@ (80064e0 <find_volume+0x504>)
 80064ba:	881a      	ldrh	r2, [r3, #0]
 80064bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064be:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80064c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c2:	4a08      	ldr	r2, [pc, #32]	@ (80064e4 <find_volume+0x508>)
 80064c4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80064c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80064c8:	f7fd ff6c 	bl	80043a4 <clear_lock>
#endif
	return FR_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3758      	adds	r7, #88	@ 0x58
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	41615252 	.word	0x41615252
 80064dc:	61417272 	.word	0x61417272
 80064e0:	20002588 	.word	0x20002588
 80064e4:	200025ac 	.word	0x200025ac

080064e8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80064f2:	2309      	movs	r3, #9
 80064f4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01c      	beq.n	8006536 <validate+0x4e>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d018      	beq.n	8006536 <validate+0x4e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d013      	beq.n	8006536 <validate+0x4e>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	889a      	ldrh	r2, [r3, #4]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	88db      	ldrh	r3, [r3, #6]
 8006518:	429a      	cmp	r2, r3
 800651a:	d10c      	bne.n	8006536 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	785b      	ldrb	r3, [r3, #1]
 8006522:	4618      	mov	r0, r3
 8006524:	f7fd fc54 	bl	8003dd0 <disk_status>
 8006528:	4603      	mov	r3, r0
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <validate+0x4e>
			res = FR_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d102      	bne.n	8006542 <validate+0x5a>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	e000      	b.n	8006544 <validate+0x5c>
 8006542:	2300      	movs	r3, #0
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	6013      	str	r3, [r2, #0]
	return res;
 8006548:	7bfb      	ldrb	r3, [r7, #15]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	4613      	mov	r3, r2
 8006560:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006566:	f107 0310 	add.w	r3, r7, #16
 800656a:	4618      	mov	r0, r3
 800656c:	f7ff fc9c 	bl	8005ea8 <get_ldnumber>
 8006570:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	2b00      	cmp	r3, #0
 8006576:	da01      	bge.n	800657c <f_mount+0x28>
 8006578:	230b      	movs	r3, #11
 800657a:	e02b      	b.n	80065d4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800657c:	4a17      	ldr	r2, [pc, #92]	@ (80065dc <f_mount+0x88>)
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006584:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d005      	beq.n	8006598 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800658c:	69b8      	ldr	r0, [r7, #24]
 800658e:	f7fd ff09 	bl	80043a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	2200      	movs	r2, #0
 8006596:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	490d      	ldr	r1, [pc, #52]	@ (80065dc <f_mount+0x88>)
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <f_mount+0x66>
 80065b4:	79fb      	ldrb	r3, [r7, #7]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d001      	beq.n	80065be <f_mount+0x6a>
 80065ba:	2300      	movs	r3, #0
 80065bc:	e00a      	b.n	80065d4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80065be:	f107 010c 	add.w	r1, r7, #12
 80065c2:	f107 0308 	add.w	r3, r7, #8
 80065c6:	2200      	movs	r2, #0
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff fd07 	bl	8005fdc <find_volume>
 80065ce:	4603      	mov	r3, r0
 80065d0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3720      	adds	r7, #32
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	20002584 	.word	0x20002584

080065e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b09a      	sub	sp, #104	@ 0x68
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	4613      	mov	r3, r2
 80065ec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <f_open+0x18>
 80065f4:	2309      	movs	r3, #9
 80065f6:	e1b7      	b.n	8006968 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80065f8:	79fb      	ldrb	r3, [r7, #7]
 80065fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065fe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006600:	79fa      	ldrb	r2, [r7, #7]
 8006602:	f107 0114 	add.w	r1, r7, #20
 8006606:	f107 0308 	add.w	r3, r7, #8
 800660a:	4618      	mov	r0, r3
 800660c:	f7ff fce6 	bl	8005fdc <find_volume>
 8006610:	4603      	mov	r3, r0
 8006612:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8006616:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800661a:	2b00      	cmp	r3, #0
 800661c:	f040 819b 	bne.w	8006956 <f_open+0x376>
		dj.obj.fs = fs;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	f107 0318 	add.w	r3, r7, #24
 800662a:	4611      	mov	r1, r2
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff fbc5 	bl	8005dbc <follow_path>
 8006632:	4603      	mov	r3, r0
 8006634:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006638:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800663c:	2b00      	cmp	r3, #0
 800663e:	d118      	bne.n	8006672 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006640:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006644:	b25b      	sxtb	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	da03      	bge.n	8006652 <f_open+0x72>
				res = FR_INVALID_NAME;
 800664a:	2306      	movs	r3, #6
 800664c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006650:	e00f      	b.n	8006672 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006652:	79fb      	ldrb	r3, [r7, #7]
 8006654:	2b01      	cmp	r3, #1
 8006656:	bf8c      	ite	hi
 8006658:	2301      	movhi	r3, #1
 800665a:	2300      	movls	r3, #0
 800665c:	b2db      	uxtb	r3, r3
 800665e:	461a      	mov	r2, r3
 8006660:	f107 0318 	add.w	r3, r7, #24
 8006664:	4611      	mov	r1, r2
 8006666:	4618      	mov	r0, r3
 8006668:	f7fd fd54 	bl	8004114 <chk_lock>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006672:	79fb      	ldrb	r3, [r7, #7]
 8006674:	f003 031c 	and.w	r3, r3, #28
 8006678:	2b00      	cmp	r3, #0
 800667a:	d07f      	beq.n	800677c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800667c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006680:	2b00      	cmp	r3, #0
 8006682:	d017      	beq.n	80066b4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006684:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006688:	2b04      	cmp	r3, #4
 800668a:	d10e      	bne.n	80066aa <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800668c:	f7fd fd9e 	bl	80041cc <enq_lock>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d006      	beq.n	80066a4 <f_open+0xc4>
 8006696:	f107 0318 	add.w	r3, r7, #24
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff f800 	bl	80056a0 <dir_register>
 80066a0:	4603      	mov	r3, r0
 80066a2:	e000      	b.n	80066a6 <f_open+0xc6>
 80066a4:	2312      	movs	r3, #18
 80066a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80066aa:	79fb      	ldrb	r3, [r7, #7]
 80066ac:	f043 0308 	orr.w	r3, r3, #8
 80066b0:	71fb      	strb	r3, [r7, #7]
 80066b2:	e010      	b.n	80066d6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80066b4:	7fbb      	ldrb	r3, [r7, #30]
 80066b6:	f003 0311 	and.w	r3, r3, #17
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <f_open+0xe6>
					res = FR_DENIED;
 80066be:	2307      	movs	r3, #7
 80066c0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80066c4:	e007      	b.n	80066d6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	f003 0304 	and.w	r3, r3, #4
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <f_open+0xf6>
 80066d0:	2308      	movs	r3, #8
 80066d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80066d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d168      	bne.n	80067b0 <f_open+0x1d0>
 80066de:	79fb      	ldrb	r3, [r7, #7]
 80066e0:	f003 0308 	and.w	r3, r3, #8
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d063      	beq.n	80067b0 <f_open+0x1d0>
				dw = GET_FATTIME();
 80066e8:	f7fd fb14 	bl	8003d14 <get_fattime>
 80066ec:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80066ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f0:	330e      	adds	r3, #14
 80066f2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fd fc62 	bl	8003fbe <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80066fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fc:	3316      	adds	r3, #22
 80066fe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006700:	4618      	mov	r0, r3
 8006702:	f7fd fc5c 	bl	8003fbe <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006708:	330b      	adds	r3, #11
 800670a:	2220      	movs	r2, #32
 800670c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006712:	4611      	mov	r1, r2
 8006714:	4618      	mov	r0, r3
 8006716:	f7fe fc32 	bl	8004f7e <ld_clust>
 800671a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006720:	2200      	movs	r2, #0
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe fc4a 	bl	8004fbc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672a:	331c      	adds	r3, #28
 800672c:	2100      	movs	r1, #0
 800672e:	4618      	mov	r0, r3
 8006730:	f7fd fc45 	bl	8003fbe <st_dword>
					fs->wflag = 1;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2201      	movs	r2, #1
 8006738:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800673a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800673c:	2b00      	cmp	r3, #0
 800673e:	d037      	beq.n	80067b0 <f_open+0x1d0>
						dw = fs->winsect;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006744:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006746:	f107 0318 	add.w	r3, r7, #24
 800674a:	2200      	movs	r2, #0
 800674c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe f93a 	bl	80049c8 <remove_chain>
 8006754:	4603      	mov	r3, r0
 8006756:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800675a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800675e:	2b00      	cmp	r3, #0
 8006760:	d126      	bne.n	80067b0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006766:	4618      	mov	r0, r3
 8006768:	f7fd fe84 	bl	8004474 <move_window>
 800676c:	4603      	mov	r3, r0
 800676e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006776:	3a01      	subs	r2, #1
 8006778:	615a      	str	r2, [r3, #20]
 800677a:	e019      	b.n	80067b0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800677c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006780:	2b00      	cmp	r3, #0
 8006782:	d115      	bne.n	80067b0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006784:	7fbb      	ldrb	r3, [r7, #30]
 8006786:	f003 0310 	and.w	r3, r3, #16
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <f_open+0x1b6>
					res = FR_NO_FILE;
 800678e:	2304      	movs	r3, #4
 8006790:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006794:	e00c      	b.n	80067b0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006796:	79fb      	ldrb	r3, [r7, #7]
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d007      	beq.n	80067b0 <f_open+0x1d0>
 80067a0:	7fbb      	ldrb	r3, [r7, #30]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <f_open+0x1d0>
						res = FR_DENIED;
 80067aa:	2307      	movs	r3, #7
 80067ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80067b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d126      	bne.n	8006806 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80067b8:	79fb      	ldrb	r3, [r7, #7]
 80067ba:	f003 0308 	and.w	r3, r3, #8
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80067c2:	79fb      	ldrb	r3, [r7, #7]
 80067c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067c8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80067d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	bf8c      	ite	hi
 80067de:	2301      	movhi	r3, #1
 80067e0:	2300      	movls	r3, #0
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	461a      	mov	r2, r3
 80067e6:	f107 0318 	add.w	r3, r7, #24
 80067ea:	4611      	mov	r1, r2
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7fd fd0f 	bl	8004210 <inc_lock>
 80067f2:	4602      	mov	r2, r0
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d102      	bne.n	8006806 <f_open+0x226>
 8006800:	2302      	movs	r3, #2
 8006802:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006806:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800680a:	2b00      	cmp	r3, #0
 800680c:	f040 80a3 	bne.w	8006956 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006814:	4611      	mov	r1, r2
 8006816:	4618      	mov	r0, r3
 8006818:	f7fe fbb1 	bl	8004f7e <ld_clust>
 800681c:	4602      	mov	r2, r0
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006824:	331c      	adds	r3, #28
 8006826:	4618      	mov	r0, r3
 8006828:	f7fd fb8b 	bl	8003f42 <ld_dword>
 800682c:	4602      	mov	r2, r0
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	88da      	ldrh	r2, [r3, #6]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	79fa      	ldrb	r2, [r7, #7]
 800684a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	3330      	adds	r3, #48	@ 0x30
 8006862:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006866:	2100      	movs	r1, #0
 8006868:	4618      	mov	r0, r3
 800686a:	f7fd fbf5 	bl	8004058 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800686e:	79fb      	ldrb	r3, [r7, #7]
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	d06e      	beq.n	8006956 <f_open+0x376>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d06a      	beq.n	8006956 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	895b      	ldrh	r3, [r3, #10]
 800688c:	461a      	mov	r2, r3
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	899b      	ldrh	r3, [r3, #12]
 8006892:	fb02 f303 	mul.w	r3, r2, r3
 8006896:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068a4:	e016      	b.n	80068d4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fd fe9f 	bl	80045ee <get_fat>
 80068b0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80068b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d802      	bhi.n	80068be <f_open+0x2de>
 80068b8:	2302      	movs	r3, #2
 80068ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80068be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c4:	d102      	bne.n	80068cc <f_open+0x2ec>
 80068c6:	2301      	movs	r3, #1
 80068c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80068cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80068ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d103      	bne.n	80068e4 <f_open+0x304>
 80068dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80068de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d8e0      	bhi.n	80068a6 <f_open+0x2c6>
				}
				fp->clust = clst;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80068e8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80068ea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d131      	bne.n	8006956 <f_open+0x376>
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	899b      	ldrh	r3, [r3, #12]
 80068f6:	461a      	mov	r2, r3
 80068f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80068fe:	fb01 f202 	mul.w	r2, r1, r2
 8006902:	1a9b      	subs	r3, r3, r2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d026      	beq.n	8006956 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800690c:	4618      	mov	r0, r3
 800690e:	f7fd fe4f 	bl	80045b0 <clust2sect>
 8006912:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8006914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d103      	bne.n	8006922 <f_open+0x342>
						res = FR_INT_ERR;
 800691a:	2302      	movs	r3, #2
 800691c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006920:	e019      	b.n	8006956 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	899b      	ldrh	r3, [r3, #12]
 8006926:	461a      	mov	r2, r3
 8006928:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800692a:	fbb3 f2f2 	udiv	r2, r3, r2
 800692e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006930:	441a      	add	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	7858      	ldrb	r0, [r3, #1]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a1a      	ldr	r2, [r3, #32]
 8006944:	2301      	movs	r3, #1
 8006946:	f7fd fa85 	bl	8003e54 <disk_read>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d002      	beq.n	8006956 <f_open+0x376>
 8006950:	2301      	movs	r3, #1
 8006952:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006956:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <f_open+0x384>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006964:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8006968:	4618      	mov	r0, r3
 800696a:	3768      	adds	r7, #104	@ 0x68
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08e      	sub	sp, #56	@ 0x38
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f107 0214 	add.w	r2, r7, #20
 800698e:	4611      	mov	r1, r2
 8006990:	4618      	mov	r0, r3
 8006992:	f7ff fda9 	bl	80064e8 <validate>
 8006996:	4603      	mov	r3, r0
 8006998:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800699c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d107      	bne.n	80069b4 <f_read+0x44>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	7d5b      	ldrb	r3, [r3, #21]
 80069a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80069ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <f_read+0x4a>
 80069b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069b8:	e135      	b.n	8006c26 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	7d1b      	ldrb	r3, [r3, #20]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <f_read+0x5a>
 80069c6:	2307      	movs	r3, #7
 80069c8:	e12d      	b.n	8006c26 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	68da      	ldr	r2, [r3, #12]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	429a      	cmp	r2, r3
 80069dc:	f240 811e 	bls.w	8006c1c <f_read+0x2ac>
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80069e4:	e11a      	b.n	8006c1c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	8992      	ldrh	r2, [r2, #12]
 80069ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80069f2:	fb01 f202 	mul.w	r2, r1, r2
 80069f6:	1a9b      	subs	r3, r3, r2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f040 80d5 	bne.w	8006ba8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	8992      	ldrh	r2, [r2, #12]
 8006a06:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	8952      	ldrh	r2, [r2, #10]
 8006a0e:	3a01      	subs	r2, #1
 8006a10:	4013      	ands	r3, r2
 8006a12:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d12f      	bne.n	8006a7a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d103      	bne.n	8006a2a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a28:	e013      	b.n	8006a52 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d007      	beq.n	8006a42 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	4619      	mov	r1, r3
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f7fe f8c2 	bl	8004bc2 <clmt_clust>
 8006a3e:	6338      	str	r0, [r7, #48]	@ 0x30
 8006a40:	e007      	b.n	8006a52 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	69db      	ldr	r3, [r3, #28]
 8006a48:	4619      	mov	r1, r3
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	f7fd fdcf 	bl	80045ee <get_fat>
 8006a50:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d804      	bhi.n	8006a62 <f_read+0xf2>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	755a      	strb	r2, [r3, #21]
 8006a5e:	2302      	movs	r3, #2
 8006a60:	e0e1      	b.n	8006c26 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a68:	d104      	bne.n	8006a74 <f_read+0x104>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	755a      	strb	r2, [r3, #21]
 8006a70:	2301      	movs	r3, #1
 8006a72:	e0d8      	b.n	8006c26 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a78:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	4619      	mov	r1, r3
 8006a82:	4610      	mov	r0, r2
 8006a84:	f7fd fd94 	bl	80045b0 <clust2sect>
 8006a88:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d104      	bne.n	8006a9a <f_read+0x12a>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2202      	movs	r2, #2
 8006a94:	755a      	strb	r2, [r3, #21]
 8006a96:	2302      	movs	r3, #2
 8006a98:	e0c5      	b.n	8006c26 <f_read+0x2b6>
			sect += csect;
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	899b      	ldrh	r3, [r3, #12]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aae:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d041      	beq.n	8006b3a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006ab6:	69fa      	ldr	r2, [r7, #28]
 8006ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aba:	4413      	add	r3, r2
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	8952      	ldrh	r2, [r2, #10]
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d905      	bls.n	8006ad0 <f_read+0x160>
					cc = fs->csize - csect;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	895b      	ldrh	r3, [r3, #10]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	7858      	ldrb	r0, [r3, #1]
 8006ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ada:	f7fd f9bb 	bl	8003e54 <disk_read>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d004      	beq.n	8006aee <f_read+0x17e>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	755a      	strb	r2, [r3, #21]
 8006aea:	2301      	movs	r3, #1
 8006aec:	e09b      	b.n	8006c26 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	7d1b      	ldrb	r3, [r3, #20]
 8006af2:	b25b      	sxtb	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	da18      	bge.n	8006b2a <f_read+0x1ba>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a1a      	ldr	r2, [r3, #32]
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d911      	bls.n	8006b2a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a1a      	ldr	r2, [r3, #32]
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	8992      	ldrh	r2, [r2, #12]
 8006b12:	fb02 f303 	mul.w	r3, r2, r3
 8006b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b18:	18d0      	adds	r0, r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	899b      	ldrh	r3, [r3, #12]
 8006b24:	461a      	mov	r2, r3
 8006b26:	f7fd fa76 	bl	8004016 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	899b      	ldrh	r3, [r3, #12]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b32:	fb02 f303 	mul.w	r3, r2, r3
 8006b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8006b38:	e05c      	b.n	8006bf4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d02e      	beq.n	8006ba2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	7d1b      	ldrb	r3, [r3, #20]
 8006b48:	b25b      	sxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	da18      	bge.n	8006b80 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	7858      	ldrb	r0, [r3, #1]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a1a      	ldr	r2, [r3, #32]
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	f7fd f999 	bl	8003e94 <disk_write>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d004      	beq.n	8006b72 <f_read+0x202>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	755a      	strb	r2, [r3, #21]
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e059      	b.n	8006c26 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	7d1b      	ldrb	r3, [r3, #20]
 8006b76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	7858      	ldrb	r0, [r3, #1]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	f7fd f961 	bl	8003e54 <disk_read>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d004      	beq.n	8006ba2 <f_read+0x232>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	755a      	strb	r2, [r3, #21]
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e041      	b.n	8006c26 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	899b      	ldrh	r3, [r3, #12]
 8006bac:	4618      	mov	r0, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	8992      	ldrh	r2, [r2, #12]
 8006bb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bba:	fb01 f202 	mul.w	r2, r1, r2
 8006bbe:	1a9b      	subs	r3, r3, r2
 8006bc0:	1ac3      	subs	r3, r0, r3
 8006bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006bc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d901      	bls.n	8006bd0 <f_read+0x260>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	8992      	ldrh	r2, [r2, #12]
 8006bde:	fbb3 f0f2 	udiv	r0, r3, r2
 8006be2:	fb00 f202 	mul.w	r2, r0, r2
 8006be6:	1a9b      	subs	r3, r3, r2
 8006be8:	440b      	add	r3, r1
 8006bea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bec:	4619      	mov	r1, r3
 8006bee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006bf0:	f7fd fa11 	bl	8004016 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf8:	4413      	add	r3, r2
 8006bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	699a      	ldr	r2, [r3, #24]
 8006c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c02:	441a      	add	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	619a      	str	r2, [r3, #24]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c0e:	441a      	add	r2, r3
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f47f aee1 	bne.w	80069e6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3738      	adds	r7, #56	@ 0x38
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b086      	sub	sp, #24
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f107 0208 	add.w	r2, r7, #8
 8006c3c:	4611      	mov	r1, r2
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff fc52 	bl	80064e8 <validate>
 8006c44:	4603      	mov	r3, r0
 8006c46:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d168      	bne.n	8006d20 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	7d1b      	ldrb	r3, [r3, #20]
 8006c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d062      	beq.n	8006d20 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	7d1b      	ldrb	r3, [r3, #20]
 8006c5e:	b25b      	sxtb	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	da15      	bge.n	8006c90 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	7858      	ldrb	r0, [r3, #1]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1a      	ldr	r2, [r3, #32]
 8006c72:	2301      	movs	r3, #1
 8006c74:	f7fd f90e 	bl	8003e94 <disk_write>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <f_sync+0x54>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e04f      	b.n	8006d22 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	7d1b      	ldrb	r3, [r3, #20]
 8006c86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006c90:	f7fd f840 	bl	8003d14 <get_fattime>
 8006c94:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	4610      	mov	r0, r2
 8006ca0:	f7fd fbe8 	bl	8004474 <move_window>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d138      	bne.n	8006d20 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	330b      	adds	r3, #11
 8006cb8:	781a      	ldrb	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	330b      	adds	r3, #11
 8006cbe:	f042 0220 	orr.w	r2, r2, #32
 8006cc2:	b2d2      	uxtb	r2, r2
 8006cc4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	68f9      	ldr	r1, [r7, #12]
 8006cd2:	f7fe f973 	bl	8004fbc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f103 021c 	add.w	r2, r3, #28
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	f7fd f96b 	bl	8003fbe <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	3316      	adds	r3, #22
 8006cec:	6939      	ldr	r1, [r7, #16]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fd f965 	bl	8003fbe <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	3312      	adds	r3, #18
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fd f944 	bl	8003f88 <st_word>
					fs->wflag = 1;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2201      	movs	r2, #1
 8006d04:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fd fbe1 	bl	80044d0 <sync_fs>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	7d1b      	ldrb	r3, [r3, #20]
 8006d16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b084      	sub	sp, #16
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7ff ff7b 	bl	8006c2e <f_sync>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d118      	bne.n	8006d74 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f107 0208 	add.w	r2, r7, #8
 8006d48:	4611      	mov	r1, r2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7ff fbcc 	bl	80064e8 <validate>
 8006d50:	4603      	mov	r3, r0
 8006d52:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10c      	bne.n	8006d74 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fd fae4 	bl	800432c <dec_lock>
 8006d64:	4603      	mov	r3, r0
 8006d66:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d102      	bne.n	8006d74 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b086      	sub	sp, #24
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <f_opendir+0x14>
 8006d8e:	2309      	movs	r3, #9
 8006d90:	e064      	b.n	8006e5c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8006d96:	f107 010c 	add.w	r1, r7, #12
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff f91c 	bl	8005fdc <find_volume>
 8006da4:	4603      	mov	r3, r0
 8006da6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006da8:	7dfb      	ldrb	r3, [r7, #23]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d14f      	bne.n	8006e4e <f_opendir+0xd0>
		obj->fs = fs;
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7fe ffff 	bl	8005dbc <follow_path>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d13d      	bne.n	8006e44 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006dce:	b25b      	sxtb	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	db12      	blt.n	8006dfa <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	799b      	ldrb	r3, [r3, #6]
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00a      	beq.n	8006df6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	4619      	mov	r1, r3
 8006de8:	4610      	mov	r0, r2
 8006dea:	f7fe f8c8 	bl	8004f7e <ld_clust>
 8006dee:	4602      	mov	r2, r0
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	609a      	str	r2, [r3, #8]
 8006df4:	e001      	b.n	8006dfa <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8006df6:	2305      	movs	r3, #5
 8006df8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8006dfa:	7dfb      	ldrb	r3, [r7, #23]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d121      	bne.n	8006e44 <f_opendir+0xc6>
				obj->id = fs->id;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	88da      	ldrh	r2, [r3, #6]
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8006e08:	2100      	movs	r1, #0
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fd ff11 	bl	8004c32 <dir_sdi>
 8006e10:	4603      	mov	r3, r0
 8006e12:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d114      	bne.n	8006e44 <f_opendir+0xc6>
					if (obj->sclust) {
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00d      	beq.n	8006e3e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8006e22:	2100      	movs	r1, #0
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7fd f9f3 	bl	8004210 <inc_lock>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d105      	bne.n	8006e44 <f_opendir+0xc6>
 8006e38:	2312      	movs	r3, #18
 8006e3a:	75fb      	strb	r3, [r7, #23]
 8006e3c:	e002      	b.n	8006e44 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	2200      	movs	r2, #0
 8006e42:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8006e44:	7dfb      	ldrb	r3, [r7, #23]
 8006e46:	2b04      	cmp	r3, #4
 8006e48:	d101      	bne.n	8006e4e <f_opendir+0xd0>
 8006e4a:	2305      	movs	r3, #5
 8006e4c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <f_opendir+0xdc>
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f107 0208 	add.w	r2, r7, #8
 8006e72:	4611      	mov	r1, r2
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff fb37 	bl	80064e8 <validate>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d110      	bne.n	8006ea6 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d006      	beq.n	8006e9a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fd fa4b 	bl	800432c <dec_lock>
 8006e96:	4603      	mov	r3, r0
 8006e98:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d102      	bne.n	8006ea6 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f107 0208 	add.w	r2, r7, #8
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7ff fb10 	bl	80064e8 <validate>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d126      	bne.n	8006f20 <f_readdir+0x70>
		if (!fno) {
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d106      	bne.n	8006ee6 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8006ed8:	2100      	movs	r1, #0
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7fd fea9 	bl	8004c32 <dir_sdi>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	73fb      	strb	r3, [r7, #15]
 8006ee4:	e01c      	b.n	8006f20 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7fe fa72 	bl	80053d2 <dir_read>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d101      	bne.n	8006efc <f_readdir+0x4c>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10e      	bne.n	8006f20 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7fe fcc3 	bl	8005890 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7fd ff19 	bl	8004d44 <dir_next>
 8006f12:	4603      	mov	r3, r0
 8006f14:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
 8006f18:	2b04      	cmp	r3, #4
 8006f1a:	d101      	bne.n	8006f20 <f_readdir+0x70>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b088      	sub	sp, #32
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006f36:	2300      	movs	r3, #0
 8006f38:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006f3e:	e01c      	b.n	8006f7a <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006f40:	f107 0310 	add.w	r3, r7, #16
 8006f44:	f107 0114 	add.w	r1, r7, #20
 8006f48:	2201      	movs	r2, #1
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7ff fd10 	bl	8006970 <f_read>
		if (rc != 1) break;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d117      	bne.n	8006f86 <f_gets+0x5c>
		c = s[0];
 8006f56:	7d3b      	ldrb	r3, [r7, #20]
 8006f58:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	2b0d      	cmp	r3, #13
 8006f5e:	d00b      	beq.n	8006f78 <f_gets+0x4e>
		*p++ = c;
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	61ba      	str	r2, [r7, #24]
 8006f66:	7dfa      	ldrb	r2, [r7, #23]
 8006f68:	701a      	strb	r2, [r3, #0]
		n++;
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006f70:	7dfb      	ldrb	r3, [r7, #23]
 8006f72:	2b0a      	cmp	r3, #10
 8006f74:	d009      	beq.n	8006f8a <f_gets+0x60>
 8006f76:	e000      	b.n	8006f7a <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006f78:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	69fa      	ldr	r2, [r7, #28]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	dbdd      	blt.n	8006f40 <f_gets+0x16>
 8006f84:	e002      	b.n	8006f8c <f_gets+0x62>
		if (rc != 1) break;
 8006f86:	bf00      	nop
 8006f88:	e000      	b.n	8006f8c <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8006f8a:	bf00      	nop
	}
	*p = 0;
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <f_gets+0x72>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	e000      	b.n	8006f9e <f_gets+0x74>
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3720      	adds	r7, #32
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
	...

08006fa8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800703c <FATFS_LinkDriverEx+0x94>)
 8006fc0:	7a5b      	ldrb	r3, [r3, #9]
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d131      	bne.n	800702c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800703c <FATFS_LinkDriverEx+0x94>)
 8006fca:	7a5b      	ldrb	r3, [r3, #9]
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	461a      	mov	r2, r3
 8006fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800703c <FATFS_LinkDriverEx+0x94>)
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006fd6:	4b19      	ldr	r3, [pc, #100]	@ (800703c <FATFS_LinkDriverEx+0x94>)
 8006fd8:	7a5b      	ldrb	r3, [r3, #9]
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	4a17      	ldr	r2, [pc, #92]	@ (800703c <FATFS_LinkDriverEx+0x94>)
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006fe6:	4b15      	ldr	r3, [pc, #84]	@ (800703c <FATFS_LinkDriverEx+0x94>)
 8006fe8:	7a5b      	ldrb	r3, [r3, #9]
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	461a      	mov	r2, r3
 8006fee:	4b13      	ldr	r3, [pc, #76]	@ (800703c <FATFS_LinkDriverEx+0x94>)
 8006ff0:	4413      	add	r3, r2
 8006ff2:	79fa      	ldrb	r2, [r7, #7]
 8006ff4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006ff6:	4b11      	ldr	r3, [pc, #68]	@ (800703c <FATFS_LinkDriverEx+0x94>)
 8006ff8:	7a5b      	ldrb	r3, [r3, #9]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	1c5a      	adds	r2, r3, #1
 8006ffe:	b2d1      	uxtb	r1, r2
 8007000:	4a0e      	ldr	r2, [pc, #56]	@ (800703c <FATFS_LinkDriverEx+0x94>)
 8007002:	7251      	strb	r1, [r2, #9]
 8007004:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007006:	7dbb      	ldrb	r3, [r7, #22]
 8007008:	3330      	adds	r3, #48	@ 0x30
 800700a:	b2da      	uxtb	r2, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	3301      	adds	r3, #1
 8007014:	223a      	movs	r2, #58	@ 0x3a
 8007016:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	3302      	adds	r3, #2
 800701c:	222f      	movs	r2, #47	@ 0x2f
 800701e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	3303      	adds	r3, #3
 8007024:	2200      	movs	r2, #0
 8007026:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007028:	2300      	movs	r3, #0
 800702a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800702c:	7dfb      	ldrb	r3, [r7, #23]
}
 800702e:	4618      	mov	r0, r3
 8007030:	371c      	adds	r7, #28
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	200027ac 	.word	0x200027ac

08007040 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800704a:	2200      	movs	r2, #0
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7ff ffaa 	bl	8006fa8 <FATFS_LinkDriverEx>
 8007054:	4603      	mov	r3, r0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	4603      	mov	r3, r0
 8007068:	6039      	str	r1, [r7, #0]
 800706a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800706c:	88fb      	ldrh	r3, [r7, #6]
 800706e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007070:	d802      	bhi.n	8007078 <ff_convert+0x18>
		c = chr;
 8007072:	88fb      	ldrh	r3, [r7, #6]
 8007074:	81fb      	strh	r3, [r7, #14]
 8007076:	e025      	b.n	80070c4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00b      	beq.n	8007096 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800707e:	88fb      	ldrh	r3, [r7, #6]
 8007080:	2bff      	cmp	r3, #255	@ 0xff
 8007082:	d805      	bhi.n	8007090 <ff_convert+0x30>
 8007084:	88fb      	ldrh	r3, [r7, #6]
 8007086:	3b80      	subs	r3, #128	@ 0x80
 8007088:	4a12      	ldr	r2, [pc, #72]	@ (80070d4 <ff_convert+0x74>)
 800708a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800708e:	e000      	b.n	8007092 <ff_convert+0x32>
 8007090:	2300      	movs	r3, #0
 8007092:	81fb      	strh	r3, [r7, #14]
 8007094:	e016      	b.n	80070c4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007096:	2300      	movs	r3, #0
 8007098:	81fb      	strh	r3, [r7, #14]
 800709a:	e009      	b.n	80070b0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800709c:	89fb      	ldrh	r3, [r7, #14]
 800709e:	4a0d      	ldr	r2, [pc, #52]	@ (80070d4 <ff_convert+0x74>)
 80070a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070a4:	88fa      	ldrh	r2, [r7, #6]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d006      	beq.n	80070b8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80070aa:	89fb      	ldrh	r3, [r7, #14]
 80070ac:	3301      	adds	r3, #1
 80070ae:	81fb      	strh	r3, [r7, #14]
 80070b0:	89fb      	ldrh	r3, [r7, #14]
 80070b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80070b4:	d9f2      	bls.n	800709c <ff_convert+0x3c>
 80070b6:	e000      	b.n	80070ba <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80070b8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80070ba:	89fb      	ldrh	r3, [r7, #14]
 80070bc:	3380      	adds	r3, #128	@ 0x80
 80070be:	b29b      	uxth	r3, r3
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80070c4:	89fb      	ldrh	r3, [r7, #14]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	08007f04 	.word	0x08007f04

080070d8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	4603      	mov	r3, r0
 80070e0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070e8:	d201      	bcs.n	80070ee <ff_wtoupper+0x16>
 80070ea:	4b3e      	ldr	r3, [pc, #248]	@ (80071e4 <ff_wtoupper+0x10c>)
 80070ec:	e000      	b.n	80070f0 <ff_wtoupper+0x18>
 80070ee:	4b3e      	ldr	r3, [pc, #248]	@ (80071e8 <ff_wtoupper+0x110>)
 80070f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	1c9a      	adds	r2, r3, #2
 80070f6:	617a      	str	r2, [r7, #20]
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80070fc:	8a7b      	ldrh	r3, [r7, #18]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d068      	beq.n	80071d4 <ff_wtoupper+0xfc>
 8007102:	88fa      	ldrh	r2, [r7, #6]
 8007104:	8a7b      	ldrh	r3, [r7, #18]
 8007106:	429a      	cmp	r2, r3
 8007108:	d364      	bcc.n	80071d4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	1c9a      	adds	r2, r3, #2
 800710e:	617a      	str	r2, [r7, #20]
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	823b      	strh	r3, [r7, #16]
 8007114:	8a3b      	ldrh	r3, [r7, #16]
 8007116:	0a1b      	lsrs	r3, r3, #8
 8007118:	81fb      	strh	r3, [r7, #14]
 800711a:	8a3b      	ldrh	r3, [r7, #16]
 800711c:	b2db      	uxtb	r3, r3
 800711e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007120:	88fa      	ldrh	r2, [r7, #6]
 8007122:	8a79      	ldrh	r1, [r7, #18]
 8007124:	8a3b      	ldrh	r3, [r7, #16]
 8007126:	440b      	add	r3, r1
 8007128:	429a      	cmp	r2, r3
 800712a:	da49      	bge.n	80071c0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800712c:	89fb      	ldrh	r3, [r7, #14]
 800712e:	2b08      	cmp	r3, #8
 8007130:	d84f      	bhi.n	80071d2 <ff_wtoupper+0xfa>
 8007132:	a201      	add	r2, pc, #4	@ (adr r2, 8007138 <ff_wtoupper+0x60>)
 8007134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007138:	0800715d 	.word	0x0800715d
 800713c:	0800716f 	.word	0x0800716f
 8007140:	08007185 	.word	0x08007185
 8007144:	0800718d 	.word	0x0800718d
 8007148:	08007195 	.word	0x08007195
 800714c:	0800719d 	.word	0x0800719d
 8007150:	080071a5 	.word	0x080071a5
 8007154:	080071ad 	.word	0x080071ad
 8007158:	080071b5 	.word	0x080071b5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800715c:	88fa      	ldrh	r2, [r7, #6]
 800715e:	8a7b      	ldrh	r3, [r7, #18]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	005b      	lsls	r3, r3, #1
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	4413      	add	r3, r2
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	80fb      	strh	r3, [r7, #6]
 800716c:	e027      	b.n	80071be <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800716e:	88fa      	ldrh	r2, [r7, #6]
 8007170:	8a7b      	ldrh	r3, [r7, #18]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	b29b      	uxth	r3, r3
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	b29b      	uxth	r3, r3
 800717c:	88fa      	ldrh	r2, [r7, #6]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	80fb      	strh	r3, [r7, #6]
 8007182:	e01c      	b.n	80071be <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007184:	88fb      	ldrh	r3, [r7, #6]
 8007186:	3b10      	subs	r3, #16
 8007188:	80fb      	strh	r3, [r7, #6]
 800718a:	e018      	b.n	80071be <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800718c:	88fb      	ldrh	r3, [r7, #6]
 800718e:	3b20      	subs	r3, #32
 8007190:	80fb      	strh	r3, [r7, #6]
 8007192:	e014      	b.n	80071be <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007194:	88fb      	ldrh	r3, [r7, #6]
 8007196:	3b30      	subs	r3, #48	@ 0x30
 8007198:	80fb      	strh	r3, [r7, #6]
 800719a:	e010      	b.n	80071be <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800719c:	88fb      	ldrh	r3, [r7, #6]
 800719e:	3b1a      	subs	r3, #26
 80071a0:	80fb      	strh	r3, [r7, #6]
 80071a2:	e00c      	b.n	80071be <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80071a4:	88fb      	ldrh	r3, [r7, #6]
 80071a6:	3308      	adds	r3, #8
 80071a8:	80fb      	strh	r3, [r7, #6]
 80071aa:	e008      	b.n	80071be <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80071ac:	88fb      	ldrh	r3, [r7, #6]
 80071ae:	3b50      	subs	r3, #80	@ 0x50
 80071b0:	80fb      	strh	r3, [r7, #6]
 80071b2:	e004      	b.n	80071be <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80071b4:	88fb      	ldrh	r3, [r7, #6]
 80071b6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80071ba:	80fb      	strh	r3, [r7, #6]
 80071bc:	bf00      	nop
			}
			break;
 80071be:	e008      	b.n	80071d2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80071c0:	89fb      	ldrh	r3, [r7, #14]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d195      	bne.n	80070f2 <ff_wtoupper+0x1a>
 80071c6:	8a3b      	ldrh	r3, [r7, #16]
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	4413      	add	r3, r2
 80071ce:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80071d0:	e78f      	b.n	80070f2 <ff_wtoupper+0x1a>
			break;
 80071d2:	bf00      	nop
	}

	return chr;
 80071d4:	88fb      	ldrh	r3, [r7, #6]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	371c      	adds	r7, #28
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	08008004 	.word	0x08008004
 80071e8:	080081f8 	.word	0x080081f8

080071ec <siprintf>:
 80071ec:	b40e      	push	{r1, r2, r3}
 80071ee:	b510      	push	{r4, lr}
 80071f0:	b09d      	sub	sp, #116	@ 0x74
 80071f2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80071f4:	9002      	str	r0, [sp, #8]
 80071f6:	9006      	str	r0, [sp, #24]
 80071f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80071fc:	480a      	ldr	r0, [pc, #40]	@ (8007228 <siprintf+0x3c>)
 80071fe:	9107      	str	r1, [sp, #28]
 8007200:	9104      	str	r1, [sp, #16]
 8007202:	490a      	ldr	r1, [pc, #40]	@ (800722c <siprintf+0x40>)
 8007204:	f853 2b04 	ldr.w	r2, [r3], #4
 8007208:	9105      	str	r1, [sp, #20]
 800720a:	2400      	movs	r4, #0
 800720c:	a902      	add	r1, sp, #8
 800720e:	6800      	ldr	r0, [r0, #0]
 8007210:	9301      	str	r3, [sp, #4]
 8007212:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007214:	f000 f9b2 	bl	800757c <_svfiprintf_r>
 8007218:	9b02      	ldr	r3, [sp, #8]
 800721a:	701c      	strb	r4, [r3, #0]
 800721c:	b01d      	add	sp, #116	@ 0x74
 800721e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007222:	b003      	add	sp, #12
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	20000024 	.word	0x20000024
 800722c:	ffff0208 	.word	0xffff0208

08007230 <memset>:
 8007230:	4402      	add	r2, r0
 8007232:	4603      	mov	r3, r0
 8007234:	4293      	cmp	r3, r2
 8007236:	d100      	bne.n	800723a <memset+0xa>
 8007238:	4770      	bx	lr
 800723a:	f803 1b01 	strb.w	r1, [r3], #1
 800723e:	e7f9      	b.n	8007234 <memset+0x4>

08007240 <strrchr>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8007246:	4603      	mov	r3, r0
 8007248:	d10e      	bne.n	8007268 <strrchr+0x28>
 800724a:	4621      	mov	r1, r4
 800724c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007250:	f000 bc36 	b.w	8007ac0 <strchr>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	4605      	mov	r5, r0
 8007258:	4621      	mov	r1, r4
 800725a:	4618      	mov	r0, r3
 800725c:	f000 fc30 	bl	8007ac0 <strchr>
 8007260:	2800      	cmp	r0, #0
 8007262:	d1f7      	bne.n	8007254 <strrchr+0x14>
 8007264:	4628      	mov	r0, r5
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	2500      	movs	r5, #0
 800726a:	e7f5      	b.n	8007258 <strrchr+0x18>

0800726c <__errno>:
 800726c:	4b01      	ldr	r3, [pc, #4]	@ (8007274 <__errno+0x8>)
 800726e:	6818      	ldr	r0, [r3, #0]
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	20000024 	.word	0x20000024

08007278 <__libc_init_array>:
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	4d0d      	ldr	r5, [pc, #52]	@ (80072b0 <__libc_init_array+0x38>)
 800727c:	4c0d      	ldr	r4, [pc, #52]	@ (80072b4 <__libc_init_array+0x3c>)
 800727e:	1b64      	subs	r4, r4, r5
 8007280:	10a4      	asrs	r4, r4, #2
 8007282:	2600      	movs	r6, #0
 8007284:	42a6      	cmp	r6, r4
 8007286:	d109      	bne.n	800729c <__libc_init_array+0x24>
 8007288:	4d0b      	ldr	r5, [pc, #44]	@ (80072b8 <__libc_init_array+0x40>)
 800728a:	4c0c      	ldr	r4, [pc, #48]	@ (80072bc <__libc_init_array+0x44>)
 800728c:	f000 fc7a 	bl	8007b84 <_init>
 8007290:	1b64      	subs	r4, r4, r5
 8007292:	10a4      	asrs	r4, r4, #2
 8007294:	2600      	movs	r6, #0
 8007296:	42a6      	cmp	r6, r4
 8007298:	d105      	bne.n	80072a6 <__libc_init_array+0x2e>
 800729a:	bd70      	pop	{r4, r5, r6, pc}
 800729c:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a0:	4798      	blx	r3
 80072a2:	3601      	adds	r6, #1
 80072a4:	e7ee      	b.n	8007284 <__libc_init_array+0xc>
 80072a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072aa:	4798      	blx	r3
 80072ac:	3601      	adds	r6, #1
 80072ae:	e7f2      	b.n	8007296 <__libc_init_array+0x1e>
 80072b0:	080082f0 	.word	0x080082f0
 80072b4:	080082f0 	.word	0x080082f0
 80072b8:	080082f0 	.word	0x080082f0
 80072bc:	080082f4 	.word	0x080082f4

080072c0 <__retarget_lock_acquire_recursive>:
 80072c0:	4770      	bx	lr

080072c2 <__retarget_lock_release_recursive>:
 80072c2:	4770      	bx	lr

080072c4 <strcpy>:
 80072c4:	4603      	mov	r3, r0
 80072c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072ca:	f803 2b01 	strb.w	r2, [r3], #1
 80072ce:	2a00      	cmp	r2, #0
 80072d0:	d1f9      	bne.n	80072c6 <strcpy+0x2>
 80072d2:	4770      	bx	lr

080072d4 <_free_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	4605      	mov	r5, r0
 80072d8:	2900      	cmp	r1, #0
 80072da:	d041      	beq.n	8007360 <_free_r+0x8c>
 80072dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072e0:	1f0c      	subs	r4, r1, #4
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	bfb8      	it	lt
 80072e6:	18e4      	addlt	r4, r4, r3
 80072e8:	f000 f8e0 	bl	80074ac <__malloc_lock>
 80072ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007364 <_free_r+0x90>)
 80072ee:	6813      	ldr	r3, [r2, #0]
 80072f0:	b933      	cbnz	r3, 8007300 <_free_r+0x2c>
 80072f2:	6063      	str	r3, [r4, #4]
 80072f4:	6014      	str	r4, [r2, #0]
 80072f6:	4628      	mov	r0, r5
 80072f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072fc:	f000 b8dc 	b.w	80074b8 <__malloc_unlock>
 8007300:	42a3      	cmp	r3, r4
 8007302:	d908      	bls.n	8007316 <_free_r+0x42>
 8007304:	6820      	ldr	r0, [r4, #0]
 8007306:	1821      	adds	r1, r4, r0
 8007308:	428b      	cmp	r3, r1
 800730a:	bf01      	itttt	eq
 800730c:	6819      	ldreq	r1, [r3, #0]
 800730e:	685b      	ldreq	r3, [r3, #4]
 8007310:	1809      	addeq	r1, r1, r0
 8007312:	6021      	streq	r1, [r4, #0]
 8007314:	e7ed      	b.n	80072f2 <_free_r+0x1e>
 8007316:	461a      	mov	r2, r3
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	b10b      	cbz	r3, 8007320 <_free_r+0x4c>
 800731c:	42a3      	cmp	r3, r4
 800731e:	d9fa      	bls.n	8007316 <_free_r+0x42>
 8007320:	6811      	ldr	r1, [r2, #0]
 8007322:	1850      	adds	r0, r2, r1
 8007324:	42a0      	cmp	r0, r4
 8007326:	d10b      	bne.n	8007340 <_free_r+0x6c>
 8007328:	6820      	ldr	r0, [r4, #0]
 800732a:	4401      	add	r1, r0
 800732c:	1850      	adds	r0, r2, r1
 800732e:	4283      	cmp	r3, r0
 8007330:	6011      	str	r1, [r2, #0]
 8007332:	d1e0      	bne.n	80072f6 <_free_r+0x22>
 8007334:	6818      	ldr	r0, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	6053      	str	r3, [r2, #4]
 800733a:	4408      	add	r0, r1
 800733c:	6010      	str	r0, [r2, #0]
 800733e:	e7da      	b.n	80072f6 <_free_r+0x22>
 8007340:	d902      	bls.n	8007348 <_free_r+0x74>
 8007342:	230c      	movs	r3, #12
 8007344:	602b      	str	r3, [r5, #0]
 8007346:	e7d6      	b.n	80072f6 <_free_r+0x22>
 8007348:	6820      	ldr	r0, [r4, #0]
 800734a:	1821      	adds	r1, r4, r0
 800734c:	428b      	cmp	r3, r1
 800734e:	bf04      	itt	eq
 8007350:	6819      	ldreq	r1, [r3, #0]
 8007352:	685b      	ldreq	r3, [r3, #4]
 8007354:	6063      	str	r3, [r4, #4]
 8007356:	bf04      	itt	eq
 8007358:	1809      	addeq	r1, r1, r0
 800735a:	6021      	streq	r1, [r4, #0]
 800735c:	6054      	str	r4, [r2, #4]
 800735e:	e7ca      	b.n	80072f6 <_free_r+0x22>
 8007360:	bd38      	pop	{r3, r4, r5, pc}
 8007362:	bf00      	nop
 8007364:	200028fc 	.word	0x200028fc

08007368 <sbrk_aligned>:
 8007368:	b570      	push	{r4, r5, r6, lr}
 800736a:	4e0f      	ldr	r6, [pc, #60]	@ (80073a8 <sbrk_aligned+0x40>)
 800736c:	460c      	mov	r4, r1
 800736e:	6831      	ldr	r1, [r6, #0]
 8007370:	4605      	mov	r5, r0
 8007372:	b911      	cbnz	r1, 800737a <sbrk_aligned+0x12>
 8007374:	f000 fbb2 	bl	8007adc <_sbrk_r>
 8007378:	6030      	str	r0, [r6, #0]
 800737a:	4621      	mov	r1, r4
 800737c:	4628      	mov	r0, r5
 800737e:	f000 fbad 	bl	8007adc <_sbrk_r>
 8007382:	1c43      	adds	r3, r0, #1
 8007384:	d103      	bne.n	800738e <sbrk_aligned+0x26>
 8007386:	f04f 34ff 	mov.w	r4, #4294967295
 800738a:	4620      	mov	r0, r4
 800738c:	bd70      	pop	{r4, r5, r6, pc}
 800738e:	1cc4      	adds	r4, r0, #3
 8007390:	f024 0403 	bic.w	r4, r4, #3
 8007394:	42a0      	cmp	r0, r4
 8007396:	d0f8      	beq.n	800738a <sbrk_aligned+0x22>
 8007398:	1a21      	subs	r1, r4, r0
 800739a:	4628      	mov	r0, r5
 800739c:	f000 fb9e 	bl	8007adc <_sbrk_r>
 80073a0:	3001      	adds	r0, #1
 80073a2:	d1f2      	bne.n	800738a <sbrk_aligned+0x22>
 80073a4:	e7ef      	b.n	8007386 <sbrk_aligned+0x1e>
 80073a6:	bf00      	nop
 80073a8:	200028f8 	.word	0x200028f8

080073ac <_malloc_r>:
 80073ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b0:	1ccd      	adds	r5, r1, #3
 80073b2:	f025 0503 	bic.w	r5, r5, #3
 80073b6:	3508      	adds	r5, #8
 80073b8:	2d0c      	cmp	r5, #12
 80073ba:	bf38      	it	cc
 80073bc:	250c      	movcc	r5, #12
 80073be:	2d00      	cmp	r5, #0
 80073c0:	4606      	mov	r6, r0
 80073c2:	db01      	blt.n	80073c8 <_malloc_r+0x1c>
 80073c4:	42a9      	cmp	r1, r5
 80073c6:	d904      	bls.n	80073d2 <_malloc_r+0x26>
 80073c8:	230c      	movs	r3, #12
 80073ca:	6033      	str	r3, [r6, #0]
 80073cc:	2000      	movs	r0, #0
 80073ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074a8 <_malloc_r+0xfc>
 80073d6:	f000 f869 	bl	80074ac <__malloc_lock>
 80073da:	f8d8 3000 	ldr.w	r3, [r8]
 80073de:	461c      	mov	r4, r3
 80073e0:	bb44      	cbnz	r4, 8007434 <_malloc_r+0x88>
 80073e2:	4629      	mov	r1, r5
 80073e4:	4630      	mov	r0, r6
 80073e6:	f7ff ffbf 	bl	8007368 <sbrk_aligned>
 80073ea:	1c43      	adds	r3, r0, #1
 80073ec:	4604      	mov	r4, r0
 80073ee:	d158      	bne.n	80074a2 <_malloc_r+0xf6>
 80073f0:	f8d8 4000 	ldr.w	r4, [r8]
 80073f4:	4627      	mov	r7, r4
 80073f6:	2f00      	cmp	r7, #0
 80073f8:	d143      	bne.n	8007482 <_malloc_r+0xd6>
 80073fa:	2c00      	cmp	r4, #0
 80073fc:	d04b      	beq.n	8007496 <_malloc_r+0xea>
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	4639      	mov	r1, r7
 8007402:	4630      	mov	r0, r6
 8007404:	eb04 0903 	add.w	r9, r4, r3
 8007408:	f000 fb68 	bl	8007adc <_sbrk_r>
 800740c:	4581      	cmp	r9, r0
 800740e:	d142      	bne.n	8007496 <_malloc_r+0xea>
 8007410:	6821      	ldr	r1, [r4, #0]
 8007412:	1a6d      	subs	r5, r5, r1
 8007414:	4629      	mov	r1, r5
 8007416:	4630      	mov	r0, r6
 8007418:	f7ff ffa6 	bl	8007368 <sbrk_aligned>
 800741c:	3001      	adds	r0, #1
 800741e:	d03a      	beq.n	8007496 <_malloc_r+0xea>
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	442b      	add	r3, r5
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	f8d8 3000 	ldr.w	r3, [r8]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	bb62      	cbnz	r2, 8007488 <_malloc_r+0xdc>
 800742e:	f8c8 7000 	str.w	r7, [r8]
 8007432:	e00f      	b.n	8007454 <_malloc_r+0xa8>
 8007434:	6822      	ldr	r2, [r4, #0]
 8007436:	1b52      	subs	r2, r2, r5
 8007438:	d420      	bmi.n	800747c <_malloc_r+0xd0>
 800743a:	2a0b      	cmp	r2, #11
 800743c:	d917      	bls.n	800746e <_malloc_r+0xc2>
 800743e:	1961      	adds	r1, r4, r5
 8007440:	42a3      	cmp	r3, r4
 8007442:	6025      	str	r5, [r4, #0]
 8007444:	bf18      	it	ne
 8007446:	6059      	strne	r1, [r3, #4]
 8007448:	6863      	ldr	r3, [r4, #4]
 800744a:	bf08      	it	eq
 800744c:	f8c8 1000 	streq.w	r1, [r8]
 8007450:	5162      	str	r2, [r4, r5]
 8007452:	604b      	str	r3, [r1, #4]
 8007454:	4630      	mov	r0, r6
 8007456:	f000 f82f 	bl	80074b8 <__malloc_unlock>
 800745a:	f104 000b 	add.w	r0, r4, #11
 800745e:	1d23      	adds	r3, r4, #4
 8007460:	f020 0007 	bic.w	r0, r0, #7
 8007464:	1ac2      	subs	r2, r0, r3
 8007466:	bf1c      	itt	ne
 8007468:	1a1b      	subne	r3, r3, r0
 800746a:	50a3      	strne	r3, [r4, r2]
 800746c:	e7af      	b.n	80073ce <_malloc_r+0x22>
 800746e:	6862      	ldr	r2, [r4, #4]
 8007470:	42a3      	cmp	r3, r4
 8007472:	bf0c      	ite	eq
 8007474:	f8c8 2000 	streq.w	r2, [r8]
 8007478:	605a      	strne	r2, [r3, #4]
 800747a:	e7eb      	b.n	8007454 <_malloc_r+0xa8>
 800747c:	4623      	mov	r3, r4
 800747e:	6864      	ldr	r4, [r4, #4]
 8007480:	e7ae      	b.n	80073e0 <_malloc_r+0x34>
 8007482:	463c      	mov	r4, r7
 8007484:	687f      	ldr	r7, [r7, #4]
 8007486:	e7b6      	b.n	80073f6 <_malloc_r+0x4a>
 8007488:	461a      	mov	r2, r3
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	42a3      	cmp	r3, r4
 800748e:	d1fb      	bne.n	8007488 <_malloc_r+0xdc>
 8007490:	2300      	movs	r3, #0
 8007492:	6053      	str	r3, [r2, #4]
 8007494:	e7de      	b.n	8007454 <_malloc_r+0xa8>
 8007496:	230c      	movs	r3, #12
 8007498:	6033      	str	r3, [r6, #0]
 800749a:	4630      	mov	r0, r6
 800749c:	f000 f80c 	bl	80074b8 <__malloc_unlock>
 80074a0:	e794      	b.n	80073cc <_malloc_r+0x20>
 80074a2:	6005      	str	r5, [r0, #0]
 80074a4:	e7d6      	b.n	8007454 <_malloc_r+0xa8>
 80074a6:	bf00      	nop
 80074a8:	200028fc 	.word	0x200028fc

080074ac <__malloc_lock>:
 80074ac:	4801      	ldr	r0, [pc, #4]	@ (80074b4 <__malloc_lock+0x8>)
 80074ae:	f7ff bf07 	b.w	80072c0 <__retarget_lock_acquire_recursive>
 80074b2:	bf00      	nop
 80074b4:	200028f4 	.word	0x200028f4

080074b8 <__malloc_unlock>:
 80074b8:	4801      	ldr	r0, [pc, #4]	@ (80074c0 <__malloc_unlock+0x8>)
 80074ba:	f7ff bf02 	b.w	80072c2 <__retarget_lock_release_recursive>
 80074be:	bf00      	nop
 80074c0:	200028f4 	.word	0x200028f4

080074c4 <__ssputs_r>:
 80074c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c8:	688e      	ldr	r6, [r1, #8]
 80074ca:	461f      	mov	r7, r3
 80074cc:	42be      	cmp	r6, r7
 80074ce:	680b      	ldr	r3, [r1, #0]
 80074d0:	4682      	mov	sl, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	4690      	mov	r8, r2
 80074d6:	d82d      	bhi.n	8007534 <__ssputs_r+0x70>
 80074d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80074e0:	d026      	beq.n	8007530 <__ssputs_r+0x6c>
 80074e2:	6965      	ldr	r5, [r4, #20]
 80074e4:	6909      	ldr	r1, [r1, #16]
 80074e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074ea:	eba3 0901 	sub.w	r9, r3, r1
 80074ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074f2:	1c7b      	adds	r3, r7, #1
 80074f4:	444b      	add	r3, r9
 80074f6:	106d      	asrs	r5, r5, #1
 80074f8:	429d      	cmp	r5, r3
 80074fa:	bf38      	it	cc
 80074fc:	461d      	movcc	r5, r3
 80074fe:	0553      	lsls	r3, r2, #21
 8007500:	d527      	bpl.n	8007552 <__ssputs_r+0x8e>
 8007502:	4629      	mov	r1, r5
 8007504:	f7ff ff52 	bl	80073ac <_malloc_r>
 8007508:	4606      	mov	r6, r0
 800750a:	b360      	cbz	r0, 8007566 <__ssputs_r+0xa2>
 800750c:	6921      	ldr	r1, [r4, #16]
 800750e:	464a      	mov	r2, r9
 8007510:	f000 faf4 	bl	8007afc <memcpy>
 8007514:	89a3      	ldrh	r3, [r4, #12]
 8007516:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800751a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800751e:	81a3      	strh	r3, [r4, #12]
 8007520:	6126      	str	r6, [r4, #16]
 8007522:	6165      	str	r5, [r4, #20]
 8007524:	444e      	add	r6, r9
 8007526:	eba5 0509 	sub.w	r5, r5, r9
 800752a:	6026      	str	r6, [r4, #0]
 800752c:	60a5      	str	r5, [r4, #8]
 800752e:	463e      	mov	r6, r7
 8007530:	42be      	cmp	r6, r7
 8007532:	d900      	bls.n	8007536 <__ssputs_r+0x72>
 8007534:	463e      	mov	r6, r7
 8007536:	6820      	ldr	r0, [r4, #0]
 8007538:	4632      	mov	r2, r6
 800753a:	4641      	mov	r1, r8
 800753c:	f000 faa6 	bl	8007a8c <memmove>
 8007540:	68a3      	ldr	r3, [r4, #8]
 8007542:	1b9b      	subs	r3, r3, r6
 8007544:	60a3      	str	r3, [r4, #8]
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	4433      	add	r3, r6
 800754a:	6023      	str	r3, [r4, #0]
 800754c:	2000      	movs	r0, #0
 800754e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007552:	462a      	mov	r2, r5
 8007554:	f000 fae0 	bl	8007b18 <_realloc_r>
 8007558:	4606      	mov	r6, r0
 800755a:	2800      	cmp	r0, #0
 800755c:	d1e0      	bne.n	8007520 <__ssputs_r+0x5c>
 800755e:	6921      	ldr	r1, [r4, #16]
 8007560:	4650      	mov	r0, sl
 8007562:	f7ff feb7 	bl	80072d4 <_free_r>
 8007566:	230c      	movs	r3, #12
 8007568:	f8ca 3000 	str.w	r3, [sl]
 800756c:	89a3      	ldrh	r3, [r4, #12]
 800756e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007572:	81a3      	strh	r3, [r4, #12]
 8007574:	f04f 30ff 	mov.w	r0, #4294967295
 8007578:	e7e9      	b.n	800754e <__ssputs_r+0x8a>
	...

0800757c <_svfiprintf_r>:
 800757c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007580:	4698      	mov	r8, r3
 8007582:	898b      	ldrh	r3, [r1, #12]
 8007584:	061b      	lsls	r3, r3, #24
 8007586:	b09d      	sub	sp, #116	@ 0x74
 8007588:	4607      	mov	r7, r0
 800758a:	460d      	mov	r5, r1
 800758c:	4614      	mov	r4, r2
 800758e:	d510      	bpl.n	80075b2 <_svfiprintf_r+0x36>
 8007590:	690b      	ldr	r3, [r1, #16]
 8007592:	b973      	cbnz	r3, 80075b2 <_svfiprintf_r+0x36>
 8007594:	2140      	movs	r1, #64	@ 0x40
 8007596:	f7ff ff09 	bl	80073ac <_malloc_r>
 800759a:	6028      	str	r0, [r5, #0]
 800759c:	6128      	str	r0, [r5, #16]
 800759e:	b930      	cbnz	r0, 80075ae <_svfiprintf_r+0x32>
 80075a0:	230c      	movs	r3, #12
 80075a2:	603b      	str	r3, [r7, #0]
 80075a4:	f04f 30ff 	mov.w	r0, #4294967295
 80075a8:	b01d      	add	sp, #116	@ 0x74
 80075aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ae:	2340      	movs	r3, #64	@ 0x40
 80075b0:	616b      	str	r3, [r5, #20]
 80075b2:	2300      	movs	r3, #0
 80075b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80075b6:	2320      	movs	r3, #32
 80075b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80075c0:	2330      	movs	r3, #48	@ 0x30
 80075c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007760 <_svfiprintf_r+0x1e4>
 80075c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075ca:	f04f 0901 	mov.w	r9, #1
 80075ce:	4623      	mov	r3, r4
 80075d0:	469a      	mov	sl, r3
 80075d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075d6:	b10a      	cbz	r2, 80075dc <_svfiprintf_r+0x60>
 80075d8:	2a25      	cmp	r2, #37	@ 0x25
 80075da:	d1f9      	bne.n	80075d0 <_svfiprintf_r+0x54>
 80075dc:	ebba 0b04 	subs.w	fp, sl, r4
 80075e0:	d00b      	beq.n	80075fa <_svfiprintf_r+0x7e>
 80075e2:	465b      	mov	r3, fp
 80075e4:	4622      	mov	r2, r4
 80075e6:	4629      	mov	r1, r5
 80075e8:	4638      	mov	r0, r7
 80075ea:	f7ff ff6b 	bl	80074c4 <__ssputs_r>
 80075ee:	3001      	adds	r0, #1
 80075f0:	f000 80a7 	beq.w	8007742 <_svfiprintf_r+0x1c6>
 80075f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075f6:	445a      	add	r2, fp
 80075f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80075fa:	f89a 3000 	ldrb.w	r3, [sl]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f000 809f 	beq.w	8007742 <_svfiprintf_r+0x1c6>
 8007604:	2300      	movs	r3, #0
 8007606:	f04f 32ff 	mov.w	r2, #4294967295
 800760a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800760e:	f10a 0a01 	add.w	sl, sl, #1
 8007612:	9304      	str	r3, [sp, #16]
 8007614:	9307      	str	r3, [sp, #28]
 8007616:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800761a:	931a      	str	r3, [sp, #104]	@ 0x68
 800761c:	4654      	mov	r4, sl
 800761e:	2205      	movs	r2, #5
 8007620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007624:	484e      	ldr	r0, [pc, #312]	@ (8007760 <_svfiprintf_r+0x1e4>)
 8007626:	f7f8 fe0b 	bl	8000240 <memchr>
 800762a:	9a04      	ldr	r2, [sp, #16]
 800762c:	b9d8      	cbnz	r0, 8007666 <_svfiprintf_r+0xea>
 800762e:	06d0      	lsls	r0, r2, #27
 8007630:	bf44      	itt	mi
 8007632:	2320      	movmi	r3, #32
 8007634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007638:	0711      	lsls	r1, r2, #28
 800763a:	bf44      	itt	mi
 800763c:	232b      	movmi	r3, #43	@ 0x2b
 800763e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007642:	f89a 3000 	ldrb.w	r3, [sl]
 8007646:	2b2a      	cmp	r3, #42	@ 0x2a
 8007648:	d015      	beq.n	8007676 <_svfiprintf_r+0xfa>
 800764a:	9a07      	ldr	r2, [sp, #28]
 800764c:	4654      	mov	r4, sl
 800764e:	2000      	movs	r0, #0
 8007650:	f04f 0c0a 	mov.w	ip, #10
 8007654:	4621      	mov	r1, r4
 8007656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800765a:	3b30      	subs	r3, #48	@ 0x30
 800765c:	2b09      	cmp	r3, #9
 800765e:	d94b      	bls.n	80076f8 <_svfiprintf_r+0x17c>
 8007660:	b1b0      	cbz	r0, 8007690 <_svfiprintf_r+0x114>
 8007662:	9207      	str	r2, [sp, #28]
 8007664:	e014      	b.n	8007690 <_svfiprintf_r+0x114>
 8007666:	eba0 0308 	sub.w	r3, r0, r8
 800766a:	fa09 f303 	lsl.w	r3, r9, r3
 800766e:	4313      	orrs	r3, r2
 8007670:	9304      	str	r3, [sp, #16]
 8007672:	46a2      	mov	sl, r4
 8007674:	e7d2      	b.n	800761c <_svfiprintf_r+0xa0>
 8007676:	9b03      	ldr	r3, [sp, #12]
 8007678:	1d19      	adds	r1, r3, #4
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	9103      	str	r1, [sp, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	bfbb      	ittet	lt
 8007682:	425b      	neglt	r3, r3
 8007684:	f042 0202 	orrlt.w	r2, r2, #2
 8007688:	9307      	strge	r3, [sp, #28]
 800768a:	9307      	strlt	r3, [sp, #28]
 800768c:	bfb8      	it	lt
 800768e:	9204      	strlt	r2, [sp, #16]
 8007690:	7823      	ldrb	r3, [r4, #0]
 8007692:	2b2e      	cmp	r3, #46	@ 0x2e
 8007694:	d10a      	bne.n	80076ac <_svfiprintf_r+0x130>
 8007696:	7863      	ldrb	r3, [r4, #1]
 8007698:	2b2a      	cmp	r3, #42	@ 0x2a
 800769a:	d132      	bne.n	8007702 <_svfiprintf_r+0x186>
 800769c:	9b03      	ldr	r3, [sp, #12]
 800769e:	1d1a      	adds	r2, r3, #4
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	9203      	str	r2, [sp, #12]
 80076a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076a8:	3402      	adds	r4, #2
 80076aa:	9305      	str	r3, [sp, #20]
 80076ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007770 <_svfiprintf_r+0x1f4>
 80076b0:	7821      	ldrb	r1, [r4, #0]
 80076b2:	2203      	movs	r2, #3
 80076b4:	4650      	mov	r0, sl
 80076b6:	f7f8 fdc3 	bl	8000240 <memchr>
 80076ba:	b138      	cbz	r0, 80076cc <_svfiprintf_r+0x150>
 80076bc:	9b04      	ldr	r3, [sp, #16]
 80076be:	eba0 000a 	sub.w	r0, r0, sl
 80076c2:	2240      	movs	r2, #64	@ 0x40
 80076c4:	4082      	lsls	r2, r0
 80076c6:	4313      	orrs	r3, r2
 80076c8:	3401      	adds	r4, #1
 80076ca:	9304      	str	r3, [sp, #16]
 80076cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076d0:	4824      	ldr	r0, [pc, #144]	@ (8007764 <_svfiprintf_r+0x1e8>)
 80076d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076d6:	2206      	movs	r2, #6
 80076d8:	f7f8 fdb2 	bl	8000240 <memchr>
 80076dc:	2800      	cmp	r0, #0
 80076de:	d036      	beq.n	800774e <_svfiprintf_r+0x1d2>
 80076e0:	4b21      	ldr	r3, [pc, #132]	@ (8007768 <_svfiprintf_r+0x1ec>)
 80076e2:	bb1b      	cbnz	r3, 800772c <_svfiprintf_r+0x1b0>
 80076e4:	9b03      	ldr	r3, [sp, #12]
 80076e6:	3307      	adds	r3, #7
 80076e8:	f023 0307 	bic.w	r3, r3, #7
 80076ec:	3308      	adds	r3, #8
 80076ee:	9303      	str	r3, [sp, #12]
 80076f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076f2:	4433      	add	r3, r6
 80076f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80076f6:	e76a      	b.n	80075ce <_svfiprintf_r+0x52>
 80076f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80076fc:	460c      	mov	r4, r1
 80076fe:	2001      	movs	r0, #1
 8007700:	e7a8      	b.n	8007654 <_svfiprintf_r+0xd8>
 8007702:	2300      	movs	r3, #0
 8007704:	3401      	adds	r4, #1
 8007706:	9305      	str	r3, [sp, #20]
 8007708:	4619      	mov	r1, r3
 800770a:	f04f 0c0a 	mov.w	ip, #10
 800770e:	4620      	mov	r0, r4
 8007710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007714:	3a30      	subs	r2, #48	@ 0x30
 8007716:	2a09      	cmp	r2, #9
 8007718:	d903      	bls.n	8007722 <_svfiprintf_r+0x1a6>
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0c6      	beq.n	80076ac <_svfiprintf_r+0x130>
 800771e:	9105      	str	r1, [sp, #20]
 8007720:	e7c4      	b.n	80076ac <_svfiprintf_r+0x130>
 8007722:	fb0c 2101 	mla	r1, ip, r1, r2
 8007726:	4604      	mov	r4, r0
 8007728:	2301      	movs	r3, #1
 800772a:	e7f0      	b.n	800770e <_svfiprintf_r+0x192>
 800772c:	ab03      	add	r3, sp, #12
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	462a      	mov	r2, r5
 8007732:	4b0e      	ldr	r3, [pc, #56]	@ (800776c <_svfiprintf_r+0x1f0>)
 8007734:	a904      	add	r1, sp, #16
 8007736:	4638      	mov	r0, r7
 8007738:	f3af 8000 	nop.w
 800773c:	1c42      	adds	r2, r0, #1
 800773e:	4606      	mov	r6, r0
 8007740:	d1d6      	bne.n	80076f0 <_svfiprintf_r+0x174>
 8007742:	89ab      	ldrh	r3, [r5, #12]
 8007744:	065b      	lsls	r3, r3, #25
 8007746:	f53f af2d 	bmi.w	80075a4 <_svfiprintf_r+0x28>
 800774a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800774c:	e72c      	b.n	80075a8 <_svfiprintf_r+0x2c>
 800774e:	ab03      	add	r3, sp, #12
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	462a      	mov	r2, r5
 8007754:	4b05      	ldr	r3, [pc, #20]	@ (800776c <_svfiprintf_r+0x1f0>)
 8007756:	a904      	add	r1, sp, #16
 8007758:	4638      	mov	r0, r7
 800775a:	f000 f879 	bl	8007850 <_printf_i>
 800775e:	e7ed      	b.n	800773c <_svfiprintf_r+0x1c0>
 8007760:	080082b4 	.word	0x080082b4
 8007764:	080082be 	.word	0x080082be
 8007768:	00000000 	.word	0x00000000
 800776c:	080074c5 	.word	0x080074c5
 8007770:	080082ba 	.word	0x080082ba

08007774 <_printf_common>:
 8007774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007778:	4616      	mov	r6, r2
 800777a:	4698      	mov	r8, r3
 800777c:	688a      	ldr	r2, [r1, #8]
 800777e:	690b      	ldr	r3, [r1, #16]
 8007780:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007784:	4293      	cmp	r3, r2
 8007786:	bfb8      	it	lt
 8007788:	4613      	movlt	r3, r2
 800778a:	6033      	str	r3, [r6, #0]
 800778c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007790:	4607      	mov	r7, r0
 8007792:	460c      	mov	r4, r1
 8007794:	b10a      	cbz	r2, 800779a <_printf_common+0x26>
 8007796:	3301      	adds	r3, #1
 8007798:	6033      	str	r3, [r6, #0]
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	0699      	lsls	r1, r3, #26
 800779e:	bf42      	ittt	mi
 80077a0:	6833      	ldrmi	r3, [r6, #0]
 80077a2:	3302      	addmi	r3, #2
 80077a4:	6033      	strmi	r3, [r6, #0]
 80077a6:	6825      	ldr	r5, [r4, #0]
 80077a8:	f015 0506 	ands.w	r5, r5, #6
 80077ac:	d106      	bne.n	80077bc <_printf_common+0x48>
 80077ae:	f104 0a19 	add.w	sl, r4, #25
 80077b2:	68e3      	ldr	r3, [r4, #12]
 80077b4:	6832      	ldr	r2, [r6, #0]
 80077b6:	1a9b      	subs	r3, r3, r2
 80077b8:	42ab      	cmp	r3, r5
 80077ba:	dc26      	bgt.n	800780a <_printf_common+0x96>
 80077bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077c0:	6822      	ldr	r2, [r4, #0]
 80077c2:	3b00      	subs	r3, #0
 80077c4:	bf18      	it	ne
 80077c6:	2301      	movne	r3, #1
 80077c8:	0692      	lsls	r2, r2, #26
 80077ca:	d42b      	bmi.n	8007824 <_printf_common+0xb0>
 80077cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077d0:	4641      	mov	r1, r8
 80077d2:	4638      	mov	r0, r7
 80077d4:	47c8      	blx	r9
 80077d6:	3001      	adds	r0, #1
 80077d8:	d01e      	beq.n	8007818 <_printf_common+0xa4>
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	6922      	ldr	r2, [r4, #16]
 80077de:	f003 0306 	and.w	r3, r3, #6
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	bf02      	ittt	eq
 80077e6:	68e5      	ldreq	r5, [r4, #12]
 80077e8:	6833      	ldreq	r3, [r6, #0]
 80077ea:	1aed      	subeq	r5, r5, r3
 80077ec:	68a3      	ldr	r3, [r4, #8]
 80077ee:	bf0c      	ite	eq
 80077f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077f4:	2500      	movne	r5, #0
 80077f6:	4293      	cmp	r3, r2
 80077f8:	bfc4      	itt	gt
 80077fa:	1a9b      	subgt	r3, r3, r2
 80077fc:	18ed      	addgt	r5, r5, r3
 80077fe:	2600      	movs	r6, #0
 8007800:	341a      	adds	r4, #26
 8007802:	42b5      	cmp	r5, r6
 8007804:	d11a      	bne.n	800783c <_printf_common+0xc8>
 8007806:	2000      	movs	r0, #0
 8007808:	e008      	b.n	800781c <_printf_common+0xa8>
 800780a:	2301      	movs	r3, #1
 800780c:	4652      	mov	r2, sl
 800780e:	4641      	mov	r1, r8
 8007810:	4638      	mov	r0, r7
 8007812:	47c8      	blx	r9
 8007814:	3001      	adds	r0, #1
 8007816:	d103      	bne.n	8007820 <_printf_common+0xac>
 8007818:	f04f 30ff 	mov.w	r0, #4294967295
 800781c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007820:	3501      	adds	r5, #1
 8007822:	e7c6      	b.n	80077b2 <_printf_common+0x3e>
 8007824:	18e1      	adds	r1, r4, r3
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	2030      	movs	r0, #48	@ 0x30
 800782a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800782e:	4422      	add	r2, r4
 8007830:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007834:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007838:	3302      	adds	r3, #2
 800783a:	e7c7      	b.n	80077cc <_printf_common+0x58>
 800783c:	2301      	movs	r3, #1
 800783e:	4622      	mov	r2, r4
 8007840:	4641      	mov	r1, r8
 8007842:	4638      	mov	r0, r7
 8007844:	47c8      	blx	r9
 8007846:	3001      	adds	r0, #1
 8007848:	d0e6      	beq.n	8007818 <_printf_common+0xa4>
 800784a:	3601      	adds	r6, #1
 800784c:	e7d9      	b.n	8007802 <_printf_common+0x8e>
	...

08007850 <_printf_i>:
 8007850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007854:	7e0f      	ldrb	r7, [r1, #24]
 8007856:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007858:	2f78      	cmp	r7, #120	@ 0x78
 800785a:	4691      	mov	r9, r2
 800785c:	4680      	mov	r8, r0
 800785e:	460c      	mov	r4, r1
 8007860:	469a      	mov	sl, r3
 8007862:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007866:	d807      	bhi.n	8007878 <_printf_i+0x28>
 8007868:	2f62      	cmp	r7, #98	@ 0x62
 800786a:	d80a      	bhi.n	8007882 <_printf_i+0x32>
 800786c:	2f00      	cmp	r7, #0
 800786e:	f000 80d1 	beq.w	8007a14 <_printf_i+0x1c4>
 8007872:	2f58      	cmp	r7, #88	@ 0x58
 8007874:	f000 80b8 	beq.w	80079e8 <_printf_i+0x198>
 8007878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800787c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007880:	e03a      	b.n	80078f8 <_printf_i+0xa8>
 8007882:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007886:	2b15      	cmp	r3, #21
 8007888:	d8f6      	bhi.n	8007878 <_printf_i+0x28>
 800788a:	a101      	add	r1, pc, #4	@ (adr r1, 8007890 <_printf_i+0x40>)
 800788c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007890:	080078e9 	.word	0x080078e9
 8007894:	080078fd 	.word	0x080078fd
 8007898:	08007879 	.word	0x08007879
 800789c:	08007879 	.word	0x08007879
 80078a0:	08007879 	.word	0x08007879
 80078a4:	08007879 	.word	0x08007879
 80078a8:	080078fd 	.word	0x080078fd
 80078ac:	08007879 	.word	0x08007879
 80078b0:	08007879 	.word	0x08007879
 80078b4:	08007879 	.word	0x08007879
 80078b8:	08007879 	.word	0x08007879
 80078bc:	080079fb 	.word	0x080079fb
 80078c0:	08007927 	.word	0x08007927
 80078c4:	080079b5 	.word	0x080079b5
 80078c8:	08007879 	.word	0x08007879
 80078cc:	08007879 	.word	0x08007879
 80078d0:	08007a1d 	.word	0x08007a1d
 80078d4:	08007879 	.word	0x08007879
 80078d8:	08007927 	.word	0x08007927
 80078dc:	08007879 	.word	0x08007879
 80078e0:	08007879 	.word	0x08007879
 80078e4:	080079bd 	.word	0x080079bd
 80078e8:	6833      	ldr	r3, [r6, #0]
 80078ea:	1d1a      	adds	r2, r3, #4
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6032      	str	r2, [r6, #0]
 80078f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078f8:	2301      	movs	r3, #1
 80078fa:	e09c      	b.n	8007a36 <_printf_i+0x1e6>
 80078fc:	6833      	ldr	r3, [r6, #0]
 80078fe:	6820      	ldr	r0, [r4, #0]
 8007900:	1d19      	adds	r1, r3, #4
 8007902:	6031      	str	r1, [r6, #0]
 8007904:	0606      	lsls	r6, r0, #24
 8007906:	d501      	bpl.n	800790c <_printf_i+0xbc>
 8007908:	681d      	ldr	r5, [r3, #0]
 800790a:	e003      	b.n	8007914 <_printf_i+0xc4>
 800790c:	0645      	lsls	r5, r0, #25
 800790e:	d5fb      	bpl.n	8007908 <_printf_i+0xb8>
 8007910:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007914:	2d00      	cmp	r5, #0
 8007916:	da03      	bge.n	8007920 <_printf_i+0xd0>
 8007918:	232d      	movs	r3, #45	@ 0x2d
 800791a:	426d      	negs	r5, r5
 800791c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007920:	4858      	ldr	r0, [pc, #352]	@ (8007a84 <_printf_i+0x234>)
 8007922:	230a      	movs	r3, #10
 8007924:	e011      	b.n	800794a <_printf_i+0xfa>
 8007926:	6821      	ldr	r1, [r4, #0]
 8007928:	6833      	ldr	r3, [r6, #0]
 800792a:	0608      	lsls	r0, r1, #24
 800792c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007930:	d402      	bmi.n	8007938 <_printf_i+0xe8>
 8007932:	0649      	lsls	r1, r1, #25
 8007934:	bf48      	it	mi
 8007936:	b2ad      	uxthmi	r5, r5
 8007938:	2f6f      	cmp	r7, #111	@ 0x6f
 800793a:	4852      	ldr	r0, [pc, #328]	@ (8007a84 <_printf_i+0x234>)
 800793c:	6033      	str	r3, [r6, #0]
 800793e:	bf14      	ite	ne
 8007940:	230a      	movne	r3, #10
 8007942:	2308      	moveq	r3, #8
 8007944:	2100      	movs	r1, #0
 8007946:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800794a:	6866      	ldr	r6, [r4, #4]
 800794c:	60a6      	str	r6, [r4, #8]
 800794e:	2e00      	cmp	r6, #0
 8007950:	db05      	blt.n	800795e <_printf_i+0x10e>
 8007952:	6821      	ldr	r1, [r4, #0]
 8007954:	432e      	orrs	r6, r5
 8007956:	f021 0104 	bic.w	r1, r1, #4
 800795a:	6021      	str	r1, [r4, #0]
 800795c:	d04b      	beq.n	80079f6 <_printf_i+0x1a6>
 800795e:	4616      	mov	r6, r2
 8007960:	fbb5 f1f3 	udiv	r1, r5, r3
 8007964:	fb03 5711 	mls	r7, r3, r1, r5
 8007968:	5dc7      	ldrb	r7, [r0, r7]
 800796a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800796e:	462f      	mov	r7, r5
 8007970:	42bb      	cmp	r3, r7
 8007972:	460d      	mov	r5, r1
 8007974:	d9f4      	bls.n	8007960 <_printf_i+0x110>
 8007976:	2b08      	cmp	r3, #8
 8007978:	d10b      	bne.n	8007992 <_printf_i+0x142>
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	07df      	lsls	r7, r3, #31
 800797e:	d508      	bpl.n	8007992 <_printf_i+0x142>
 8007980:	6923      	ldr	r3, [r4, #16]
 8007982:	6861      	ldr	r1, [r4, #4]
 8007984:	4299      	cmp	r1, r3
 8007986:	bfde      	ittt	le
 8007988:	2330      	movle	r3, #48	@ 0x30
 800798a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800798e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007992:	1b92      	subs	r2, r2, r6
 8007994:	6122      	str	r2, [r4, #16]
 8007996:	f8cd a000 	str.w	sl, [sp]
 800799a:	464b      	mov	r3, r9
 800799c:	aa03      	add	r2, sp, #12
 800799e:	4621      	mov	r1, r4
 80079a0:	4640      	mov	r0, r8
 80079a2:	f7ff fee7 	bl	8007774 <_printf_common>
 80079a6:	3001      	adds	r0, #1
 80079a8:	d14a      	bne.n	8007a40 <_printf_i+0x1f0>
 80079aa:	f04f 30ff 	mov.w	r0, #4294967295
 80079ae:	b004      	add	sp, #16
 80079b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	f043 0320 	orr.w	r3, r3, #32
 80079ba:	6023      	str	r3, [r4, #0]
 80079bc:	4832      	ldr	r0, [pc, #200]	@ (8007a88 <_printf_i+0x238>)
 80079be:	2778      	movs	r7, #120	@ 0x78
 80079c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	6831      	ldr	r1, [r6, #0]
 80079c8:	061f      	lsls	r7, r3, #24
 80079ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80079ce:	d402      	bmi.n	80079d6 <_printf_i+0x186>
 80079d0:	065f      	lsls	r7, r3, #25
 80079d2:	bf48      	it	mi
 80079d4:	b2ad      	uxthmi	r5, r5
 80079d6:	6031      	str	r1, [r6, #0]
 80079d8:	07d9      	lsls	r1, r3, #31
 80079da:	bf44      	itt	mi
 80079dc:	f043 0320 	orrmi.w	r3, r3, #32
 80079e0:	6023      	strmi	r3, [r4, #0]
 80079e2:	b11d      	cbz	r5, 80079ec <_printf_i+0x19c>
 80079e4:	2310      	movs	r3, #16
 80079e6:	e7ad      	b.n	8007944 <_printf_i+0xf4>
 80079e8:	4826      	ldr	r0, [pc, #152]	@ (8007a84 <_printf_i+0x234>)
 80079ea:	e7e9      	b.n	80079c0 <_printf_i+0x170>
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	f023 0320 	bic.w	r3, r3, #32
 80079f2:	6023      	str	r3, [r4, #0]
 80079f4:	e7f6      	b.n	80079e4 <_printf_i+0x194>
 80079f6:	4616      	mov	r6, r2
 80079f8:	e7bd      	b.n	8007976 <_printf_i+0x126>
 80079fa:	6833      	ldr	r3, [r6, #0]
 80079fc:	6825      	ldr	r5, [r4, #0]
 80079fe:	6961      	ldr	r1, [r4, #20]
 8007a00:	1d18      	adds	r0, r3, #4
 8007a02:	6030      	str	r0, [r6, #0]
 8007a04:	062e      	lsls	r6, r5, #24
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	d501      	bpl.n	8007a0e <_printf_i+0x1be>
 8007a0a:	6019      	str	r1, [r3, #0]
 8007a0c:	e002      	b.n	8007a14 <_printf_i+0x1c4>
 8007a0e:	0668      	lsls	r0, r5, #25
 8007a10:	d5fb      	bpl.n	8007a0a <_printf_i+0x1ba>
 8007a12:	8019      	strh	r1, [r3, #0]
 8007a14:	2300      	movs	r3, #0
 8007a16:	6123      	str	r3, [r4, #16]
 8007a18:	4616      	mov	r6, r2
 8007a1a:	e7bc      	b.n	8007996 <_printf_i+0x146>
 8007a1c:	6833      	ldr	r3, [r6, #0]
 8007a1e:	1d1a      	adds	r2, r3, #4
 8007a20:	6032      	str	r2, [r6, #0]
 8007a22:	681e      	ldr	r6, [r3, #0]
 8007a24:	6862      	ldr	r2, [r4, #4]
 8007a26:	2100      	movs	r1, #0
 8007a28:	4630      	mov	r0, r6
 8007a2a:	f7f8 fc09 	bl	8000240 <memchr>
 8007a2e:	b108      	cbz	r0, 8007a34 <_printf_i+0x1e4>
 8007a30:	1b80      	subs	r0, r0, r6
 8007a32:	6060      	str	r0, [r4, #4]
 8007a34:	6863      	ldr	r3, [r4, #4]
 8007a36:	6123      	str	r3, [r4, #16]
 8007a38:	2300      	movs	r3, #0
 8007a3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a3e:	e7aa      	b.n	8007996 <_printf_i+0x146>
 8007a40:	6923      	ldr	r3, [r4, #16]
 8007a42:	4632      	mov	r2, r6
 8007a44:	4649      	mov	r1, r9
 8007a46:	4640      	mov	r0, r8
 8007a48:	47d0      	blx	sl
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	d0ad      	beq.n	80079aa <_printf_i+0x15a>
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	079b      	lsls	r3, r3, #30
 8007a52:	d413      	bmi.n	8007a7c <_printf_i+0x22c>
 8007a54:	68e0      	ldr	r0, [r4, #12]
 8007a56:	9b03      	ldr	r3, [sp, #12]
 8007a58:	4298      	cmp	r0, r3
 8007a5a:	bfb8      	it	lt
 8007a5c:	4618      	movlt	r0, r3
 8007a5e:	e7a6      	b.n	80079ae <_printf_i+0x15e>
 8007a60:	2301      	movs	r3, #1
 8007a62:	4632      	mov	r2, r6
 8007a64:	4649      	mov	r1, r9
 8007a66:	4640      	mov	r0, r8
 8007a68:	47d0      	blx	sl
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	d09d      	beq.n	80079aa <_printf_i+0x15a>
 8007a6e:	3501      	adds	r5, #1
 8007a70:	68e3      	ldr	r3, [r4, #12]
 8007a72:	9903      	ldr	r1, [sp, #12]
 8007a74:	1a5b      	subs	r3, r3, r1
 8007a76:	42ab      	cmp	r3, r5
 8007a78:	dcf2      	bgt.n	8007a60 <_printf_i+0x210>
 8007a7a:	e7eb      	b.n	8007a54 <_printf_i+0x204>
 8007a7c:	2500      	movs	r5, #0
 8007a7e:	f104 0619 	add.w	r6, r4, #25
 8007a82:	e7f5      	b.n	8007a70 <_printf_i+0x220>
 8007a84:	080082c5 	.word	0x080082c5
 8007a88:	080082d6 	.word	0x080082d6

08007a8c <memmove>:
 8007a8c:	4288      	cmp	r0, r1
 8007a8e:	b510      	push	{r4, lr}
 8007a90:	eb01 0402 	add.w	r4, r1, r2
 8007a94:	d902      	bls.n	8007a9c <memmove+0x10>
 8007a96:	4284      	cmp	r4, r0
 8007a98:	4623      	mov	r3, r4
 8007a9a:	d807      	bhi.n	8007aac <memmove+0x20>
 8007a9c:	1e43      	subs	r3, r0, #1
 8007a9e:	42a1      	cmp	r1, r4
 8007aa0:	d008      	beq.n	8007ab4 <memmove+0x28>
 8007aa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007aa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007aaa:	e7f8      	b.n	8007a9e <memmove+0x12>
 8007aac:	4402      	add	r2, r0
 8007aae:	4601      	mov	r1, r0
 8007ab0:	428a      	cmp	r2, r1
 8007ab2:	d100      	bne.n	8007ab6 <memmove+0x2a>
 8007ab4:	bd10      	pop	{r4, pc}
 8007ab6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007aba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007abe:	e7f7      	b.n	8007ab0 <memmove+0x24>

08007ac0 <strchr>:
 8007ac0:	b2c9      	uxtb	r1, r1
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aca:	b112      	cbz	r2, 8007ad2 <strchr+0x12>
 8007acc:	428a      	cmp	r2, r1
 8007ace:	d1f9      	bne.n	8007ac4 <strchr+0x4>
 8007ad0:	4770      	bx	lr
 8007ad2:	2900      	cmp	r1, #0
 8007ad4:	bf18      	it	ne
 8007ad6:	2000      	movne	r0, #0
 8007ad8:	4770      	bx	lr
	...

08007adc <_sbrk_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4d06      	ldr	r5, [pc, #24]	@ (8007af8 <_sbrk_r+0x1c>)
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	602b      	str	r3, [r5, #0]
 8007ae8:	f7f9 fe7e 	bl	80017e8 <_sbrk>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	d102      	bne.n	8007af6 <_sbrk_r+0x1a>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	b103      	cbz	r3, 8007af6 <_sbrk_r+0x1a>
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	200028f0 	.word	0x200028f0

08007afc <memcpy>:
 8007afc:	440a      	add	r2, r1
 8007afe:	4291      	cmp	r1, r2
 8007b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b04:	d100      	bne.n	8007b08 <memcpy+0xc>
 8007b06:	4770      	bx	lr
 8007b08:	b510      	push	{r4, lr}
 8007b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b12:	4291      	cmp	r1, r2
 8007b14:	d1f9      	bne.n	8007b0a <memcpy+0xe>
 8007b16:	bd10      	pop	{r4, pc}

08007b18 <_realloc_r>:
 8007b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1c:	4607      	mov	r7, r0
 8007b1e:	4614      	mov	r4, r2
 8007b20:	460d      	mov	r5, r1
 8007b22:	b921      	cbnz	r1, 8007b2e <_realloc_r+0x16>
 8007b24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b28:	4611      	mov	r1, r2
 8007b2a:	f7ff bc3f 	b.w	80073ac <_malloc_r>
 8007b2e:	b92a      	cbnz	r2, 8007b3c <_realloc_r+0x24>
 8007b30:	f7ff fbd0 	bl	80072d4 <_free_r>
 8007b34:	4625      	mov	r5, r4
 8007b36:	4628      	mov	r0, r5
 8007b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b3c:	f000 f81a 	bl	8007b74 <_malloc_usable_size_r>
 8007b40:	4284      	cmp	r4, r0
 8007b42:	4606      	mov	r6, r0
 8007b44:	d802      	bhi.n	8007b4c <_realloc_r+0x34>
 8007b46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b4a:	d8f4      	bhi.n	8007b36 <_realloc_r+0x1e>
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	4638      	mov	r0, r7
 8007b50:	f7ff fc2c 	bl	80073ac <_malloc_r>
 8007b54:	4680      	mov	r8, r0
 8007b56:	b908      	cbnz	r0, 8007b5c <_realloc_r+0x44>
 8007b58:	4645      	mov	r5, r8
 8007b5a:	e7ec      	b.n	8007b36 <_realloc_r+0x1e>
 8007b5c:	42b4      	cmp	r4, r6
 8007b5e:	4622      	mov	r2, r4
 8007b60:	4629      	mov	r1, r5
 8007b62:	bf28      	it	cs
 8007b64:	4632      	movcs	r2, r6
 8007b66:	f7ff ffc9 	bl	8007afc <memcpy>
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	4638      	mov	r0, r7
 8007b6e:	f7ff fbb1 	bl	80072d4 <_free_r>
 8007b72:	e7f1      	b.n	8007b58 <_realloc_r+0x40>

08007b74 <_malloc_usable_size_r>:
 8007b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b78:	1f18      	subs	r0, r3, #4
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	bfbc      	itt	lt
 8007b7e:	580b      	ldrlt	r3, [r1, r0]
 8007b80:	18c0      	addlt	r0, r0, r3
 8007b82:	4770      	bx	lr

08007b84 <_init>:
 8007b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b86:	bf00      	nop
 8007b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b8a:	bc08      	pop	{r3}
 8007b8c:	469e      	mov	lr, r3
 8007b8e:	4770      	bx	lr

08007b90 <_fini>:
 8007b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b92:	bf00      	nop
 8007b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b96:	bc08      	pop	{r3}
 8007b98:	469e      	mov	lr, r3
 8007b9a:	4770      	bx	lr
