
LAB6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000afd  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000805  00000000  00000000  00000dad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ba  00000000  00000000  000015b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00001a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000468  00000000  00000000  00001b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002fa  00000000  00000000  00001fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000022ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  8e:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <buttons_init>:
#define BTN_RIGHT  PC3
#define BTN_A      PC4
#define BTN_B      PC5

static void buttons_init(void) {
	DDRC &= ~((1<<BTN_UP)|(1<<BTN_DOWN)|(1<<BTN_LEFT)|(1<<BTN_RIGHT)|(1<<BTN_A)|(1<<BTN_B));
  96:	87 b1       	in	r24, 0x07	; 7
  98:	80 7c       	andi	r24, 0xC0	; 192
  9a:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<BTN_UP)|(1<<BTN_DOWN)|(1<<BTN_LEFT)|(1<<BTN_RIGHT)|(1<<BTN_A)|(1<<BTN_B); // pull-ups
  9c:	88 b1       	in	r24, 0x08	; 8
  9e:	8f 63       	ori	r24, 0x3F	; 63
  a0:	88 b9       	out	0x08, r24	; 8
  a2:	08 95       	ret

000000a4 <main>:
}

int main(void) {
	uart_init();
  a4:	0e 94 a5 00 	call	0x14a	; 0x14a <uart_init>
	buttons_init();
  a8:	0e 94 4b 00 	call	0x96	; 0x96 <buttons_init>

	while (1) {
		if (!(PINC & (1<<BTN_UP))) {
  ac:	32 99       	sbic	0x06, 2	; 6
  ae:	0b c0       	rjmp	.+22     	; 0xc6 <main+0x22>
			uart_transmit('U');
  b0:	85 e5       	ldi	r24, 0x55	; 85
  b2:	0e 94 b1 00 	call	0x162	; 0x162 <uart_transmit>
			while(!(PINC & (1<<BTN_UP))); // esperar hasta que se suelte
  b6:	32 9b       	sbis	0x06, 2	; 6
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <main+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	83 ed       	ldi	r24, 0xD3	; 211
  bc:	90 e3       	ldi	r25, 0x30	; 48
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x1a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x20>
  c4:	00 00       	nop
			_delay_ms(50); // pequeño delay anti-rebote
		}
		if (!(PINC & (1<<BTN_DOWN))) {
  c6:	31 99       	sbic	0x06, 1	; 6
  c8:	0b c0       	rjmp	.+22     	; 0xe0 <main+0x3c>
			uart_transmit('D');
  ca:	84 e4       	ldi	r24, 0x44	; 68
  cc:	0e 94 b1 00 	call	0x162	; 0x162 <uart_transmit>
			while(!(PINC & (1<<BTN_DOWN)));
  d0:	31 9b       	sbis	0x06, 1	; 6
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <main+0x2c>
  d4:	83 ed       	ldi	r24, 0xD3	; 211
  d6:	90 e3       	ldi	r25, 0x30	; 48
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x34>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x3a>
  de:	00 00       	nop
			_delay_ms(50);
		}
		if (!(PINC & (1<<BTN_LEFT))) {
  e0:	30 99       	sbic	0x06, 0	; 6
  e2:	0b c0       	rjmp	.+22     	; 0xfa <main+0x56>
			uart_transmit('L');
  e4:	8c e4       	ldi	r24, 0x4C	; 76
  e6:	0e 94 b1 00 	call	0x162	; 0x162 <uart_transmit>
			while(!(PINC & (1<<BTN_LEFT)));
  ea:	30 9b       	sbis	0x06, 0	; 6
  ec:	fe cf       	rjmp	.-4      	; 0xea <main+0x46>
  ee:	83 ed       	ldi	r24, 0xD3	; 211
  f0:	90 e3       	ldi	r25, 0x30	; 48
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x4e>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x54>
  f8:	00 00       	nop
			_delay_ms(50);
		}
		if (!(PINC & (1<<BTN_RIGHT))) {
  fa:	33 99       	sbic	0x06, 3	; 6
  fc:	0b c0       	rjmp	.+22     	; 0x114 <main+0x70>
			uart_transmit('R');
  fe:	82 e5       	ldi	r24, 0x52	; 82
 100:	0e 94 b1 00 	call	0x162	; 0x162 <uart_transmit>
			while(!(PINC & (1<<BTN_RIGHT)));
 104:	33 9b       	sbis	0x06, 3	; 6
 106:	fe cf       	rjmp	.-4      	; 0x104 <main+0x60>
 108:	83 ed       	ldi	r24, 0xD3	; 211
 10a:	90 e3       	ldi	r25, 0x30	; 48
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x68>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x6e>
 112:	00 00       	nop
			_delay_ms(50);
		}
		if (!(PINC & (1<<BTN_A))) {
 114:	34 99       	sbic	0x06, 4	; 6
 116:	0b c0       	rjmp	.+22     	; 0x12e <main+0x8a>
			uart_transmit('A');
 118:	81 e4       	ldi	r24, 0x41	; 65
 11a:	0e 94 b1 00 	call	0x162	; 0x162 <uart_transmit>
			while(!(PINC & (1<<BTN_A)));
 11e:	34 9b       	sbis	0x06, 4	; 6
 120:	fe cf       	rjmp	.-4      	; 0x11e <main+0x7a>
 122:	83 ed       	ldi	r24, 0xD3	; 211
 124:	90 e3       	ldi	r25, 0x30	; 48
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x82>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x88>
 12c:	00 00       	nop
			_delay_ms(50);
		}
		if (!(PINC & (1<<BTN_B))) {
 12e:	35 99       	sbic	0x06, 5	; 6
 130:	bd cf       	rjmp	.-134    	; 0xac <main+0x8>
			uart_transmit('B');
 132:	82 e4       	ldi	r24, 0x42	; 66
 134:	0e 94 b1 00 	call	0x162	; 0x162 <uart_transmit>
			while(!(PINC & (1<<BTN_B)));
 138:	35 9b       	sbis	0x06, 5	; 6
 13a:	fe cf       	rjmp	.-4      	; 0x138 <main+0x94>
 13c:	83 ed       	ldi	r24, 0xD3	; 211
 13e:	90 e3       	ldi	r25, 0x30	; 48
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x9c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0xa2>
 146:	00 00       	nop
 148:	b1 cf       	rjmp	.-158    	; 0xac <main+0x8>

0000014a <uart_init>:
#include "uart.h"

// Inicializar UART
void uart_init(void) {
	// Configurar baud rate
	UBRR0H = (uint8_t)(UBRR_VALUE >> 8);
 14a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)UBRR_VALUE;
 14e:	87 e6       	ldi	r24, 0x67	; 103
 150:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilitar transmisión y recepción
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 154:	88 e1       	ldi	r24, 0x18	; 24
 156:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configurar formato: 8 bits de datos, 1 bit de stop, sin paridad
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 160:	08 95       	ret

00000162 <uart_transmit>:
}

// Transmitir un byte
void uart_transmit(uint8_t data) {
	// Esperar a que el buffer de transmisión esté vacío
	while (!(UCSR0A & (1 << UDRE0)));
 162:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 166:	95 ff       	sbrs	r25, 5
 168:	fc cf       	rjmp	.-8      	; 0x162 <uart_transmit>
	UDR0 = data;
 16a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 16e:	08 95       	ret

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
