
Maestro_Prueba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e6  00800100  0000190c  000019a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000190c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  008001e6  008001e6  00001a86  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ae4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d9c  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f4b  00000000  00000000  00004aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018b4  00000000  00000000  000059eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000570  00000000  00000000  000072a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000095c  00000000  00000000  00007810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000268c  00000000  00000000  0000816c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0000a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e0       	ldi	r30, 0x0C	; 12
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3e       	cpi	r26, 0xE6	; 230
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a6 ee       	ldi	r26, 0xE6	; 230
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 30       	cpi	r26, 0x0A	; 10
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <main>
      9e:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_WaitForFlag>:
}

// Función para obtener contador de errores
uint8_t I2C_GetErrorCount(void) {
    return i2c_error_count;
}
      a6:	bc 01       	movw	r22, r24
      a8:	20 e0       	ldi	r18, 0x00	; 0
      aa:	30 e0       	ldi	r19, 0x00	; 0
      ac:	1c c0       	rjmp	.+56     	; 0xe6 <I2C_WaitForFlag+0x40>
      ae:	83 e0       	ldi	r24, 0x03	; 3
      b0:	8a 95       	dec	r24
      b2:	f1 f7       	brne	.-4      	; 0xb0 <I2C_WaitForFlag+0xa>
      b4:	00 00       	nop
      b6:	2f 5f       	subi	r18, 0xFF	; 255
      b8:	3f 4f       	sbci	r19, 0xFF	; 255
      ba:	94 e6       	ldi	r25, 0x64	; 100
      bc:	96 9f       	mul	r25, r22
      be:	a0 01       	movw	r20, r0
      c0:	97 9f       	mul	r25, r23
      c2:	50 0d       	add	r21, r0
      c4:	11 24       	eor	r1, r1
      c6:	24 17       	cp	r18, r20
      c8:	35 07       	cpc	r19, r21
      ca:	98 f4       	brcc	.+38     	; 0xf2 <I2C_WaitForFlag+0x4c>
      cc:	29 38       	cpi	r18, 0x89	; 137
      ce:	83 e1       	ldi	r24, 0x13	; 19
      d0:	38 07       	cpc	r19, r24
      d2:	48 f0       	brcs	.+18     	; 0xe6 <I2C_WaitForFlag+0x40>
      d4:	34 9b       	sbis	0x06, 4	; 6
      d6:	02 c0       	rjmp	.+4      	; 0xdc <I2C_WaitForFlag+0x36>
      d8:	35 99       	sbic	0x06, 5	; 6
      da:	05 c0       	rjmp	.+10     	; 0xe6 <I2C_WaitForFlag+0x40>
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <__data_end>
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	08 95       	ret
      e6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      ea:	99 23       	and	r25, r25
      ec:	04 f7       	brge	.-64     	; 0xae <I2C_WaitForFlag+0x8>
      ee:	81 e0       	ldi	r24, 0x01	; 1
      f0:	08 95       	ret
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	08 95       	ret

000000f6 <I2C_Init>:
      f6:	9b 01       	movw	r18, r22
      f8:	ac 01       	movw	r20, r24
      fa:	87 b1       	in	r24, 0x07	; 7
      fc:	8f 7c       	andi	r24, 0xCF	; 207
      fe:	87 b9       	out	0x07, r24	; 7
     100:	88 b1       	in	r24, 0x08	; 8
     102:	80 63       	ori	r24, 0x30	; 48
     104:	88 b9       	out	0x08, r24	; 8
     106:	60 e0       	ldi	r22, 0x00	; 0
     108:	74 e2       	ldi	r23, 0x24	; 36
     10a:	84 ef       	ldi	r24, 0xF4	; 244
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__udivmodsi4>
     112:	da 01       	movw	r26, r20
     114:	c9 01       	movw	r24, r18
     116:	40 97       	sbiw	r24, 0x10	; 16
     118:	a1 09       	sbc	r26, r1
     11a:	b1 09       	sbc	r27, r1
     11c:	b6 95       	lsr	r27
     11e:	a7 95       	ror	r26
     120:	97 95       	ror	r25
     122:	87 95       	ror	r24
     124:	28 2f       	mov	r18, r24
     126:	8a 30       	cpi	r24, 0x0A	; 10
     128:	08 f4       	brcc	.+2      	; 0x12c <I2C_Init+0x36>
     12a:	2a e0       	ldi	r18, 0x0A	; 10
     12c:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     130:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     134:	84 e8       	ldi	r24, 0x84	; 132
     136:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     13a:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <i2c_error_count>
     13e:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <__data_end>
     142:	83 ec       	ldi	r24, 0xC3	; 195
     144:	99 e0       	ldi	r25, 0x09	; 9
     146:	01 97       	sbiw	r24, 0x01	; 1
     148:	f1 f7       	brne	.-4      	; 0x146 <I2C_Init+0x50>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <I2C_Init+0x56>
     14c:	00 00       	nop
     14e:	08 95       	ret

00000150 <I2C_BusRecovery>:
     150:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     154:	87 b1       	in	r24, 0x07	; 7
     156:	80 62       	ori	r24, 0x20	; 32
     158:	87 b9       	out	0x07, r24	; 7
     15a:	87 b1       	in	r24, 0x07	; 7
     15c:	8f 7e       	andi	r24, 0xEF	; 239
     15e:	87 b9       	out	0x07, r24	; 7
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	11 c0       	rjmp	.+34     	; 0x186 <I2C_BusRecovery+0x36>
     164:	88 b1       	in	r24, 0x08	; 8
     166:	80 62       	ori	r24, 0x20	; 32
     168:	88 b9       	out	0x08, r24	; 8
     16a:	83 e0       	ldi	r24, 0x03	; 3
     16c:	8a 95       	dec	r24
     16e:	f1 f7       	brne	.-4      	; 0x16c <I2C_BusRecovery+0x1c>
     170:	00 00       	nop
     172:	88 b1       	in	r24, 0x08	; 8
     174:	8f 7d       	andi	r24, 0xDF	; 223
     176:	88 b9       	out	0x08, r24	; 8
     178:	83 e0       	ldi	r24, 0x03	; 3
     17a:	8a 95       	dec	r24
     17c:	f1 f7       	brne	.-4      	; 0x17a <I2C_BusRecovery+0x2a>
     17e:	00 00       	nop
     180:	34 99       	sbic	0x06, 4	; 6
     182:	03 c0       	rjmp	.+6      	; 0x18a <I2C_BusRecovery+0x3a>
     184:	9f 5f       	subi	r25, 0xFF	; 255
     186:	99 30       	cpi	r25, 0x09	; 9
     188:	68 f3       	brcs	.-38     	; 0x164 <I2C_BusRecovery+0x14>
     18a:	87 b1       	in	r24, 0x07	; 7
     18c:	8f 7c       	andi	r24, 0xCF	; 207
     18e:	87 b9       	out	0x07, r24	; 7
     190:	83 ec       	ldi	r24, 0xC3	; 195
     192:	99 e0       	ldi	r25, 0x09	; 9
     194:	01 97       	sbiw	r24, 0x01	; 1
     196:	f1 f7       	brne	.-4      	; 0x194 <I2C_BusRecovery+0x44>
     198:	00 c0       	rjmp	.+0      	; 0x19a <I2C_BusRecovery+0x4a>
     19a:	00 00       	nop
     19c:	60 ea       	ldi	r22, 0xA0	; 160
     19e:	76 e8       	ldi	r23, 0x86	; 134
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	0e 94 7b 00 	call	0xf6	; 0xf6 <I2C_Init>
     1a8:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <__data_end>
     1ac:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <i2c_error_count>
     1b0:	08 95       	ret

000001b2 <I2C_Stop>:
     1b2:	84 e9       	ldi	r24, 0x94	; 148
     1b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1b8:	88 ee       	ldi	r24, 0xE8	; 232
     1ba:	93 e0       	ldi	r25, 0x03	; 3
     1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <I2C_Stop+0x16>
     1be:	23 e0       	ldi	r18, 0x03	; 3
     1c0:	2a 95       	dec	r18
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <I2C_Stop+0xe>
     1c4:	00 00       	nop
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1cc:	24 ff       	sbrs	r18, 4
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <I2C_Stop+0x22>
     1d0:	00 97       	sbiw	r24, 0x00	; 0
     1d2:	a9 f7       	brne	.-22     	; 0x1be <I2C_Stop+0xc>
     1d4:	89 2b       	or	r24, r25
     1d6:	19 f4       	brne	.+6      	; 0x1de <I2C_Stop+0x2c>
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <__data_end>
     1de:	80 e1       	ldi	r24, 0x10	; 16
     1e0:	8a 95       	dec	r24
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <I2C_Stop+0x2e>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <I2C_Stop+0x34>
     1e6:	08 95       	ret

000001e8 <I2C_ReadACK>:
     1e8:	84 ec       	ldi	r24, 0xC4	; 196
     1ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1ee:	84 e6       	ldi	r24, 0x64	; 100
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_WaitForFlag>
     1f6:	88 23       	and	r24, r24
     1f8:	19 f0       	breq	.+6      	; 0x200 <I2C_ReadACK+0x18>
     1fa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     1fe:	08 95       	ret
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	08 95       	ret

00000204 <I2C_ReadNACK>:
     204:	84 e8       	ldi	r24, 0x84	; 132
     206:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     20a:	84 e6       	ldi	r24, 0x64	; 100
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_WaitForFlag>
     212:	88 23       	and	r24, r24
     214:	19 f0       	breq	.+6      	; 0x21c <I2C_ReadNACK+0x18>
     216:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     21a:	08 95       	ret
     21c:	8f ef       	ldi	r24, 0xFF	; 255
     21e:	08 95       	ret

00000220 <I2C_GetStatus>:
     220:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     224:	88 7f       	andi	r24, 0xF8	; 248
     226:	08 95       	ret

00000228 <I2C_Start>:
     228:	cf 93       	push	r28
     22a:	c8 2f       	mov	r28, r24
     22c:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <__data_end>
     230:	81 11       	cpse	r24, r1
     232:	0e 94 a8 00 	call	0x150	; 0x150 <I2C_BusRecovery>
     236:	84 ea       	ldi	r24, 0xA4	; 164
     238:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     23c:	84 e6       	ldi	r24, 0x64	; 100
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_WaitForFlag>
     244:	81 11       	cpse	r24, r1
     246:	0e c0       	rjmp	.+28     	; 0x264 <I2C_Start+0x3c>
     248:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <i2c_error_count>
     24c:	8f 5f       	subi	r24, 0xFF	; 255
     24e:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <i2c_error_count>
     252:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <i2c_error_count>
     256:	84 30       	cpi	r24, 0x04	; 4
     258:	30 f1       	brcs	.+76     	; 0x2a6 <I2C_Start+0x7e>
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <__data_end>
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	22 c0       	rjmp	.+68     	; 0x2a8 <I2C_Start+0x80>
     264:	0e 94 10 01 	call	0x220	; 0x220 <I2C_GetStatus>
     268:	88 30       	cpi	r24, 0x08	; 8
     26a:	11 f0       	breq	.+4      	; 0x270 <I2C_Start+0x48>
     26c:	80 31       	cpi	r24, 0x10	; 16
     26e:	e1 f4       	brne	.+56     	; 0x2a8 <I2C_Start+0x80>
     270:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     274:	84 e8       	ldi	r24, 0x84	; 132
     276:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     27a:	84 e6       	ldi	r24, 0x64	; 100
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_WaitForFlag>
     282:	81 11       	cpse	r24, r1
     284:	07 c0       	rjmp	.+14     	; 0x294 <I2C_Start+0x6c>
     286:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <i2c_error_count>
     28a:	8f 5f       	subi	r24, 0xFF	; 255
     28c:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <i2c_error_count>
     290:	8f ef       	ldi	r24, 0xFF	; 255
     292:	0a c0       	rjmp	.+20     	; 0x2a8 <I2C_Start+0x80>
     294:	0e 94 10 01 	call	0x220	; 0x220 <I2C_GetStatus>
     298:	88 31       	cpi	r24, 0x18	; 24
     29a:	11 f0       	breq	.+4      	; 0x2a0 <I2C_Start+0x78>
     29c:	80 34       	cpi	r24, 0x40	; 64
     29e:	21 f4       	brne	.+8      	; 0x2a8 <I2C_Start+0x80>
     2a0:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <i2c_error_count>
     2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <I2C_Start+0x80>
     2a6:	8f ef       	ldi	r24, 0xFF	; 255
     2a8:	cf 91       	pop	r28
     2aa:	08 95       	ret

000002ac <I2C_Write>:
     2ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     2b0:	84 e8       	ldi	r24, 0x84	; 132
     2b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2b6:	84 e6       	ldi	r24, 0x64	; 100
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_WaitForFlag>
     2be:	81 11       	cpse	r24, r1
     2c0:	07 c0       	rjmp	.+14     	; 0x2d0 <I2C_Write+0x24>
     2c2:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <i2c_error_count>
     2c6:	8f 5f       	subi	r24, 0xFF	; 255
     2c8:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <i2c_error_count>
     2cc:	8f ef       	ldi	r24, 0xFF	; 255
     2ce:	08 95       	ret
     2d0:	0e 94 10 01 	call	0x220	; 0x220 <I2C_GetStatus>
     2d4:	08 95       	ret

000002d6 <I2C_WriteRegister>:
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	d8 2f       	mov	r29, r24
     2e0:	16 2f       	mov	r17, r22
     2e2:	04 2f       	mov	r16, r20
     2e4:	c0 e0       	ldi	r28, 0x00	; 0
     2e6:	32 c0       	rjmp	.+100    	; 0x34c <I2C_WriteRegister+0x76>
     2e8:	8d 2f       	mov	r24, r29
     2ea:	88 0f       	add	r24, r24
     2ec:	0e 94 14 01 	call	0x228	; 0x228 <I2C_Start>
     2f0:	88 31       	cpi	r24, 0x18	; 24
     2f2:	51 f0       	breq	.+20     	; 0x308 <I2C_WriteRegister+0x32>
     2f4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
     2f8:	cf 5f       	subi	r28, 0xFF	; 255
     2fa:	83 ec       	ldi	r24, 0xC3	; 195
     2fc:	99 e0       	ldi	r25, 0x09	; 9
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	f1 f7       	brne	.-4      	; 0x2fe <I2C_WriteRegister+0x28>
     302:	00 c0       	rjmp	.+0      	; 0x304 <I2C_WriteRegister+0x2e>
     304:	00 00       	nop
     306:	22 c0       	rjmp	.+68     	; 0x34c <I2C_WriteRegister+0x76>
     308:	81 2f       	mov	r24, r17
     30a:	0e 94 56 01 	call	0x2ac	; 0x2ac <I2C_Write>
     30e:	88 32       	cpi	r24, 0x28	; 40
     310:	51 f0       	breq	.+20     	; 0x326 <I2C_WriteRegister+0x50>
     312:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
     316:	cf 5f       	subi	r28, 0xFF	; 255
     318:	83 ec       	ldi	r24, 0xC3	; 195
     31a:	99 e0       	ldi	r25, 0x09	; 9
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	f1 f7       	brne	.-4      	; 0x31c <I2C_WriteRegister+0x46>
     320:	00 c0       	rjmp	.+0      	; 0x322 <I2C_WriteRegister+0x4c>
     322:	00 00       	nop
     324:	13 c0       	rjmp	.+38     	; 0x34c <I2C_WriteRegister+0x76>
     326:	80 2f       	mov	r24, r16
     328:	0e 94 56 01 	call	0x2ac	; 0x2ac <I2C_Write>
     32c:	88 32       	cpi	r24, 0x28	; 40
     32e:	51 f0       	breq	.+20     	; 0x344 <I2C_WriteRegister+0x6e>
     330:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
     334:	cf 5f       	subi	r28, 0xFF	; 255
     336:	83 ec       	ldi	r24, 0xC3	; 195
     338:	99 e0       	ldi	r25, 0x09	; 9
     33a:	01 97       	sbiw	r24, 0x01	; 1
     33c:	f1 f7       	brne	.-4      	; 0x33a <I2C_WriteRegister+0x64>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <I2C_WriteRegister+0x6a>
     340:	00 00       	nop
     342:	04 c0       	rjmp	.+8      	; 0x34c <I2C_WriteRegister+0x76>
     344:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	03 c0       	rjmp	.+6      	; 0x352 <I2C_WriteRegister+0x7c>
     34c:	c3 30       	cpi	r28, 0x03	; 3
     34e:	60 f2       	brcs	.-104    	; 0x2e8 <I2C_WriteRegister+0x12>
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	1f 91       	pop	r17
     358:	0f 91       	pop	r16
     35a:	08 95       	ret

0000035c <I2C_ReadRegister>:
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	d8 2f       	mov	r29, r24
     364:	16 2f       	mov	r17, r22
     366:	c0 e0       	ldi	r28, 0x00	; 0
     368:	39 c0       	rjmp	.+114    	; 0x3dc <I2C_ReadRegister+0x80>
     36a:	8d 2f       	mov	r24, r29
     36c:	88 0f       	add	r24, r24
     36e:	0e 94 14 01 	call	0x228	; 0x228 <I2C_Start>
     372:	88 31       	cpi	r24, 0x18	; 24
     374:	51 f0       	breq	.+20     	; 0x38a <I2C_ReadRegister+0x2e>
     376:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
     37a:	cf 5f       	subi	r28, 0xFF	; 255
     37c:	83 ec       	ldi	r24, 0xC3	; 195
     37e:	99 e0       	ldi	r25, 0x09	; 9
     380:	01 97       	sbiw	r24, 0x01	; 1
     382:	f1 f7       	brne	.-4      	; 0x380 <I2C_ReadRegister+0x24>
     384:	00 c0       	rjmp	.+0      	; 0x386 <I2C_ReadRegister+0x2a>
     386:	00 00       	nop
     388:	29 c0       	rjmp	.+82     	; 0x3dc <I2C_ReadRegister+0x80>
     38a:	81 2f       	mov	r24, r17
     38c:	0e 94 56 01 	call	0x2ac	; 0x2ac <I2C_Write>
     390:	88 32       	cpi	r24, 0x28	; 40
     392:	51 f0       	breq	.+20     	; 0x3a8 <I2C_ReadRegister+0x4c>
     394:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
     398:	cf 5f       	subi	r28, 0xFF	; 255
     39a:	83 ec       	ldi	r24, 0xC3	; 195
     39c:	99 e0       	ldi	r25, 0x09	; 9
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <I2C_ReadRegister+0x42>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <I2C_ReadRegister+0x48>
     3a4:	00 00       	nop
     3a6:	1a c0       	rjmp	.+52     	; 0x3dc <I2C_ReadRegister+0x80>
     3a8:	8d 2f       	mov	r24, r29
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	81 60       	ori	r24, 0x01	; 1
     3b2:	0e 94 14 01 	call	0x228	; 0x228 <I2C_Start>
     3b6:	80 34       	cpi	r24, 0x40	; 64
     3b8:	51 f0       	breq	.+20     	; 0x3ce <I2C_ReadRegister+0x72>
     3ba:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
     3be:	cf 5f       	subi	r28, 0xFF	; 255
     3c0:	83 ec       	ldi	r24, 0xC3	; 195
     3c2:	99 e0       	ldi	r25, 0x09	; 9
     3c4:	01 97       	sbiw	r24, 0x01	; 1
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <I2C_ReadRegister+0x68>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <I2C_ReadRegister+0x6e>
     3ca:	00 00       	nop
     3cc:	07 c0       	rjmp	.+14     	; 0x3dc <I2C_ReadRegister+0x80>
     3ce:	0e 94 02 01 	call	0x204	; 0x204 <I2C_ReadNACK>
     3d2:	c8 2f       	mov	r28, r24
     3d4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
     3d8:	8c 2f       	mov	r24, r28
     3da:	03 c0       	rjmp	.+6      	; 0x3e2 <I2C_ReadRegister+0x86>
     3dc:	c3 30       	cpi	r28, 0x03	; 3
     3de:	28 f2       	brcs	.-118    	; 0x36a <I2C_ReadRegister+0xe>
     3e0:	8f ef       	ldi	r24, 0xFF	; 255
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	08 95       	ret

000003ea <I2C_ReadMultiple>:
     3ea:	df 92       	push	r13
     3ec:	ef 92       	push	r14
     3ee:	ff 92       	push	r15
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	22 23       	and	r18, r18
     3fa:	09 f4       	brne	.+2      	; 0x3fe <I2C_ReadMultiple+0x14>
     3fc:	7b c0       	rjmp	.+246    	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
     3fe:	41 15       	cp	r20, r1
     400:	51 05       	cpc	r21, r1
     402:	09 f4       	brne	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     404:	79 c0       	rjmp	.+242    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
     406:	f2 2e       	mov	r15, r18
     408:	8a 01       	movw	r16, r20
     40a:	d6 2e       	mov	r13, r22
     40c:	e8 2e       	mov	r14, r24
     40e:	d0 e0       	ldi	r29, 0x00	; 0
     410:	6c c0       	rjmp	.+216    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
     412:	8e 2d       	mov	r24, r14
     414:	88 0f       	add	r24, r24
     416:	0e 94 14 01 	call	0x228	; 0x228 <I2C_Start>
     41a:	88 31       	cpi	r24, 0x18	; 24
     41c:	51 f0       	breq	.+20     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     41e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
     422:	df 5f       	subi	r29, 0xFF	; 255
     424:	83 ec       	ldi	r24, 0xC3	; 195
     426:	99 e0       	ldi	r25, 0x09	; 9
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     42e:	00 00       	nop
     430:	5c c0       	rjmp	.+184    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
     432:	8d 2d       	mov	r24, r13
     434:	0e 94 56 01 	call	0x2ac	; 0x2ac <I2C_Write>
     438:	88 32       	cpi	r24, 0x28	; 40
     43a:	51 f0       	breq	.+20     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     43c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
     440:	df 5f       	subi	r29, 0xFF	; 255
     442:	e3 ec       	ldi	r30, 0xC3	; 195
     444:	f9 e0       	ldi	r31, 0x09	; 9
     446:	31 97       	sbiw	r30, 0x01	; 1
     448:	f1 f7       	brne	.-4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     44a:	00 c0       	rjmp	.+0      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     44c:	00 00       	nop
     44e:	4d c0       	rjmp	.+154    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
     450:	8e 2d       	mov	r24, r14
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	88 0f       	add	r24, r24
     456:	99 1f       	adc	r25, r25
     458:	81 60       	ori	r24, 0x01	; 1
     45a:	0e 94 14 01 	call	0x228	; 0x228 <I2C_Start>
     45e:	80 34       	cpi	r24, 0x40	; 64
     460:	99 f1       	breq	.+102    	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
     462:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
     466:	df 5f       	subi	r29, 0xFF	; 255
     468:	83 ec       	ldi	r24, 0xC3	; 195
     46a:	99 e0       	ldi	r25, 0x09	; 9
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
     470:	00 c0       	rjmp	.+0      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     472:	00 00       	nop
     474:	3a c0       	rjmp	.+116    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
     476:	ac 2f       	mov	r26, r28
     478:	b0 e0       	ldi	r27, 0x00	; 0
     47a:	ef 2d       	mov	r30, r15
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	31 97       	sbiw	r30, 0x01	; 1
     480:	ae 17       	cp	r26, r30
     482:	bf 07       	cpc	r27, r31
     484:	39 f4       	brne	.+14     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
     486:	0e 94 02 01 	call	0x204	; 0x204 <I2C_ReadNACK>
     48a:	f8 01       	movw	r30, r16
     48c:	ec 0f       	add	r30, r28
     48e:	f1 1d       	adc	r31, r1
     490:	80 83       	st	Z, r24
     492:	06 c0       	rjmp	.+12     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     494:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <I2C_ReadACK>
     498:	f8 01       	movw	r30, r16
     49a:	ec 0f       	add	r30, r28
     49c:	f1 1d       	adc	r31, r1
     49e:	80 83       	st	Z, r24
     4a0:	4c 2f       	mov	r20, r28
     4a2:	50 e0       	ldi	r21, 0x00	; 0
     4a4:	f8 01       	movw	r30, r16
     4a6:	e4 0f       	add	r30, r20
     4a8:	f5 1f       	adc	r31, r21
     4aa:	80 81       	ld	r24, Z
     4ac:	8f 3f       	cpi	r24, 0xFF	; 255
     4ae:	51 f4       	brne	.+20     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
     4b0:	cc 23       	and	r28, r28
     4b2:	41 f0       	breq	.+16     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
     4b4:	31 97       	sbiw	r30, 0x01	; 1
     4b6:	80 81       	ld	r24, Z
     4b8:	8f 3f       	cpi	r24, 0xFF	; 255
     4ba:	21 f0       	breq	.+8      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
     4bc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
     4c0:	df 5f       	subi	r29, 0xFF	; 255
     4c2:	05 c0       	rjmp	.+10     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     4c4:	cf 5f       	subi	r28, 0xFF	; 255
     4c6:	01 c0       	rjmp	.+2      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
     4c8:	c0 e0       	ldi	r28, 0x00	; 0
     4ca:	cf 15       	cp	r28, r15
     4cc:	a0 f2       	brcs	.-88     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     4ce:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
     4d2:	dd 23       	and	r29, r29
     4d4:	99 f0       	breq	.+38     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
     4d6:	f8 01       	movw	r30, r16
     4d8:	80 81       	ld	r24, Z
     4da:	8f 3f       	cpi	r24, 0xFF	; 255
     4dc:	89 f4       	brne	.+34     	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
     4de:	83 ec       	ldi	r24, 0xC3	; 195
     4e0:	99 e0       	ldi	r25, 0x09	; 9
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
     4e8:	00 00       	nop
     4ea:	d3 30       	cpi	r29, 0x03	; 3
     4ec:	08 f4       	brcc	.+2      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
     4ee:	91 cf       	rjmp	.-222    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	07 c0       	rjmp	.+14     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	05 c0       	rjmp	.+10     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	03 c0       	rjmp	.+6      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
     4fc:	8f 2d       	mov	r24, r15
     4fe:	01 c0       	rjmp	.+2      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
     500:	8f 2d       	mov	r24, r15
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	df 90       	pop	r13
     510:	08 95       	ret

00000512 <I2C_BusStatus>:
     512:	34 9b       	sbis	0x06, 4	; 6
     514:	04 c0       	rjmp	.+8      	; 0x51e <I2C_BusStatus+0xc>
     516:	35 99       	sbic	0x06, 5	; 6
     518:	04 c0       	rjmp	.+8      	; 0x522 <I2C_BusStatus+0x10>
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	08 95       	ret
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	08 95       	ret
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	08 95       	ret

00000526 <I2C_ForceRecovery>:

// Función para reset manual del bus
void I2C_ForceRecovery(void) {
    bus_recovery_needed = 1;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <__data_end>
    I2C_BusRecovery();
     52c:	0e 94 a8 00 	call	0x150	; 0x150 <I2C_BusRecovery>
     530:	08 95       	ret

00000532 <LCD8_CMD>:
	_delay_ms(1);
}

void LCD8_CMD(uint8_t data){
	// Limpiar RS (modo comando)
	PORTB &= ~(1 << 2);
     532:	95 b1       	in	r25, 0x05	; 5
     534:	9b 7f       	andi	r25, 0xFB	; 251
     536:	95 b9       	out	0x05, r25	; 5
	
	// Enviar datos
	// D0-D5 van a PD2-PD7
	PORTD = (PORTD & 0b00000011) | (data << 2);
     538:	9b b1       	in	r25, 0x0b	; 11
     53a:	28 2f       	mov	r18, r24
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	22 0f       	add	r18, r18
     540:	33 1f       	adc	r19, r19
     542:	22 0f       	add	r18, r18
     544:	33 1f       	adc	r19, r19
     546:	93 70       	andi	r25, 0x03	; 3
     548:	29 2b       	or	r18, r25
     54a:	2b b9       	out	0x0b, r18	; 11
	
	// D6-D7 van a PB0-PB1
	PORTB = (PORTB & 0b11111100) | ((data >> 6) & 0b00000011);
     54c:	95 b1       	in	r25, 0x05	; 5
     54e:	9c 7f       	andi	r25, 0xFC	; 252
     550:	82 95       	swap	r24
     552:	86 95       	lsr	r24
     554:	86 95       	lsr	r24
     556:	83 70       	andi	r24, 0x03	; 3
     558:	89 2b       	or	r24, r25
     55a:	85 b9       	out	0x05, r24	; 5
	
	// Pulso de Enable
	PORTB |= (1 << 3);   // E = 1
     55c:	85 b1       	in	r24, 0x05	; 5
     55e:	88 60       	ori	r24, 0x08	; 8
     560:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     562:	8f e9       	ldi	r24, 0x9F	; 159
     564:	9f e0       	ldi	r25, 0x0F	; 15
     566:	01 97       	sbiw	r24, 0x01	; 1
     568:	f1 f7       	brne	.-4      	; 0x566 <LCD8_CMD+0x34>
     56a:	00 c0       	rjmp	.+0      	; 0x56c <LCD8_CMD+0x3a>
     56c:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1 << 3);  // E = 0
     56e:	85 b1       	in	r24, 0x05	; 5
     570:	87 7f       	andi	r24, 0xF7	; 247
     572:	85 b9       	out	0x05, r24	; 5
     574:	8f e9       	ldi	r24, 0x9F	; 159
     576:	9f e0       	ldi	r25, 0x0F	; 15
     578:	01 97       	sbiw	r24, 0x01	; 1
     57a:	f1 f7       	brne	.-4      	; 0x578 <LCD8_CMD+0x46>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <LCD8_CMD+0x4c>
     57e:	00 00       	nop
     580:	08 95       	ret

00000582 <initLCD8>:
// RS: PB2
// E: PB3

void initLCD8(void){
	// Configurar pines de datos PD2-PD7 como salidas
	DDRD |= 0b11111100; // PD2, PD3, PD4, PD5, PD6, PD7
     582:	8a b1       	in	r24, 0x0a	; 10
     584:	8c 6f       	ori	r24, 0xFC	; 252
     586:	8a b9       	out	0x0a, r24	; 10
	
	// Configurar pines PB0, PB1 (datos), PB2 (RS), PB3 (E) como salidas
	DDRB |= 0b00001111; // PB0, PB1, PB2, PB3
     588:	84 b1       	in	r24, 0x04	; 4
     58a:	8f 60       	ori	r24, 0x0F	; 15
     58c:	84 b9       	out	0x04, r24	; 4
     58e:	8f e5       	ldi	r24, 0x5F	; 95
     590:	9a ee       	ldi	r25, 0xEA	; 234
     592:	01 97       	sbiw	r24, 0x01	; 1
     594:	f1 f7       	brne	.-4      	; 0x592 <initLCD8+0x10>
     596:	00 c0       	rjmp	.+0      	; 0x598 <initLCD8+0x16>
     598:	00 00       	nop
	
	_delay_ms(15);
	
	// Function SET (8 bits, 2 líneas, 5x8 dots)
	LCD8_CMD(0b00111000);
     59a:	88 e3       	ldi	r24, 0x38	; 56
     59c:	0e 94 99 02 	call	0x532	; 0x532 <LCD8_CMD>
     5a0:	8f e1       	ldi	r24, 0x1F	; 31
     5a2:	9e e4       	ldi	r25, 0x4E	; 78
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <initLCD8+0x22>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <initLCD8+0x28>
     5aa:	00 00       	nop
	_delay_ms(5);
	
	// Display ON/OFF (Display ON, Cursor OFF, Blink OFF)
	LCD8_CMD(0b00001100);
     5ac:	8c e0       	ldi	r24, 0x0C	; 12
     5ae:	0e 94 99 02 	call	0x532	; 0x532 <LCD8_CMD>
     5b2:	8f e3       	ldi	r24, 0x3F	; 63
     5b4:	9f e1       	ldi	r25, 0x1F	; 31
     5b6:	01 97       	sbiw	r24, 0x01	; 1
     5b8:	f1 f7       	brne	.-4      	; 0x5b6 <initLCD8+0x34>
     5ba:	00 c0       	rjmp	.+0      	; 0x5bc <initLCD8+0x3a>
     5bc:	00 00       	nop
	_delay_ms(2);
	
	// Entry mode (Increment cursor, no shift)
	LCD8_CMD(0b00000110);
     5be:	86 e0       	ldi	r24, 0x06	; 6
     5c0:	0e 94 99 02 	call	0x532	; 0x532 <LCD8_CMD>
     5c4:	8f e3       	ldi	r24, 0x3F	; 63
     5c6:	9f e1       	ldi	r25, 0x1F	; 31
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <initLCD8+0x46>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <initLCD8+0x4c>
     5ce:	00 00       	nop
	_delay_ms(2);
	
	// Clear display
	LCD8_CMD(0b00000001);
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	0e 94 99 02 	call	0x532	; 0x532 <LCD8_CMD>
     5d6:	8f e3       	ldi	r24, 0x3F	; 63
     5d8:	9f e1       	ldi	r25, 0x1F	; 31
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	f1 f7       	brne	.-4      	; 0x5da <initLCD8+0x58>
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <initLCD8+0x5e>
     5e0:	00 00       	nop
     5e2:	08 95       	ret

000005e4 <LCD8_Write_Char>:
	_delay_ms(1);
}

void LCD8_Write_Char(char c){
	// Establecer RS = 1 (modo datos)
	PORTB |= (1 << 2);
     5e4:	95 b1       	in	r25, 0x05	; 5
     5e6:	94 60       	ori	r25, 0x04	; 4
     5e8:	95 b9       	out	0x05, r25	; 5
	
	// Enviar datos del carácter
	// D0-D5 van a PD2-PD7
	PORTD = (PORTD & 0b00000011) | (c << 2);
     5ea:	9b b1       	in	r25, 0x0b	; 11
     5ec:	28 2f       	mov	r18, r24
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	22 0f       	add	r18, r18
     5f2:	33 1f       	adc	r19, r19
     5f4:	22 0f       	add	r18, r18
     5f6:	33 1f       	adc	r19, r19
     5f8:	93 70       	andi	r25, 0x03	; 3
     5fa:	29 2b       	or	r18, r25
     5fc:	2b b9       	out	0x0b, r18	; 11
	
	// D6-D7 van a PB0-PB1
	PORTB = (PORTB & 0b11111100) | ((c >> 6) & 0b00000011) | (1 << 2); // Mantener RS = 1
     5fe:	95 b1       	in	r25, 0x05	; 5
     600:	9c 7f       	andi	r25, 0xFC	; 252
     602:	82 95       	swap	r24
     604:	86 95       	lsr	r24
     606:	86 95       	lsr	r24
     608:	83 70       	andi	r24, 0x03	; 3
     60a:	89 2b       	or	r24, r25
     60c:	84 60       	ori	r24, 0x04	; 4
     60e:	85 b9       	out	0x05, r24	; 5
	
	// Pulso de Enable
	PORTB |= (1 << 3);   // E = 1
     610:	85 b1       	in	r24, 0x05	; 5
     612:	88 60       	ori	r24, 0x08	; 8
     614:	85 b9       	out	0x05, r24	; 5
     616:	8f e9       	ldi	r24, 0x9F	; 159
     618:	9f e0       	ldi	r25, 0x0F	; 15
     61a:	01 97       	sbiw	r24, 0x01	; 1
     61c:	f1 f7       	brne	.-4      	; 0x61a <LCD8_Write_Char+0x36>
     61e:	00 c0       	rjmp	.+0      	; 0x620 <LCD8_Write_Char+0x3c>
     620:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1 << 3);  // E = 0
     622:	85 b1       	in	r24, 0x05	; 5
     624:	87 7f       	andi	r24, 0xF7	; 247
     626:	85 b9       	out	0x05, r24	; 5
     628:	8f e9       	ldi	r24, 0x9F	; 159
     62a:	9f e0       	ldi	r25, 0x0F	; 15
     62c:	01 97       	sbiw	r24, 0x01	; 1
     62e:	f1 f7       	brne	.-4      	; 0x62c <LCD8_Write_Char+0x48>
     630:	00 c0       	rjmp	.+0      	; 0x632 <LCD8_Write_Char+0x4e>
     632:	00 00       	nop
     634:	08 95       	ret

00000636 <LCD8_Write_String>:
	_delay_ms(1);
}

void LCD8_Write_String(char *a){
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	8c 01       	movw	r16, r24
	for(int i = 0; a[i] != '\0'; i++){
     640:	c0 e0       	ldi	r28, 0x00	; 0
     642:	d0 e0       	ldi	r29, 0x00	; 0
     644:	03 c0       	rjmp	.+6      	; 0x64c <LCD8_Write_String+0x16>
		LCD8_Write_Char(a[i]);
     646:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LCD8_Write_Char>
	PORTB &= ~(1 << 3);  // E = 0
	_delay_ms(1);
}

void LCD8_Write_String(char *a){
	for(int i = 0; a[i] != '\0'; i++){
     64a:	21 96       	adiw	r28, 0x01	; 1
     64c:	f8 01       	movw	r30, r16
     64e:	ec 0f       	add	r30, r28
     650:	fd 1f       	adc	r31, r29
     652:	80 81       	ld	r24, Z
     654:	81 11       	cpse	r24, r1
     656:	f7 cf       	rjmp	.-18     	; 0x646 <LCD8_Write_String+0x10>
		LCD8_Write_Char(a[i]);
	}
}
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	08 95       	ret

00000662 <LCD8_Set_Cursor>:

void LCD8_Set_Cursor(uint8_t col, uint8_t row){
	uint8_t address = 0;  
	if (row == 0) {
     662:	61 11       	cpse	r22, r1
     664:	02 c0       	rjmp	.+4      	; 0x66a <LCD8_Set_Cursor+0x8>
		address = 0x80 + col;  // Primera fila
     666:	80 58       	subi	r24, 0x80	; 128
     668:	05 c0       	rjmp	.+10     	; 0x674 <LCD8_Set_Cursor+0x12>
		} else if (row == 1) {
     66a:	61 30       	cpi	r22, 0x01	; 1
     66c:	11 f4       	brne	.+4      	; 0x672 <LCD8_Set_Cursor+0x10>
		address = 0xC0 + col;  // Segunda fila
     66e:	80 54       	subi	r24, 0x40	; 64
     670:	01 c0       	rjmp	.+2      	; 0x674 <LCD8_Set_Cursor+0x12>
		LCD8_Write_Char(a[i]);
	}
}

void LCD8_Set_Cursor(uint8_t col, uint8_t row){
	uint8_t address = 0;  
     672:	80 e0       	ldi	r24, 0x00	; 0
	if (row == 0) {
		address = 0x80 + col;  // Primera fila
		} else if (row == 1) {
		address = 0xC0 + col;  // Segunda fila
	}
	LCD8_CMD(address);
     674:	0e 94 99 02 	call	0x532	; 0x532 <LCD8_CMD>
     678:	08 95       	ret

0000067a <LCD8_Clear>:
}

void LCD8_Clear(void){
	LCD8_CMD(0x01); // Comando para limpiar pantalla
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	0e 94 99 02 	call	0x532	; 0x532 <LCD8_CMD>
     680:	8f e3       	ldi	r24, 0x3F	; 63
     682:	9f e1       	ldi	r25, 0x1F	; 31
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	f1 f7       	brne	.-4      	; 0x684 <LCD8_Clear+0xa>
     688:	00 c0       	rjmp	.+0      	; 0x68a <LCD8_Clear+0x10>
     68a:	00 00       	nop
     68c:	08 95       	ret

0000068e <update_system_tick>:

uint32_t system_tick = 0;

// Función para actualizar tick del sistema
void update_system_tick(void) {
    system_tick++;
     68e:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <system_tick>
     692:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <system_tick+0x1>
     696:	a0 91 ea 01 	lds	r26, 0x01EA	; 0x8001ea <system_tick+0x2>
     69a:	b0 91 eb 01 	lds	r27, 0x01EB	; 0x8001eb <system_tick+0x3>
     69e:	01 96       	adiw	r24, 0x01	; 1
     6a0:	a1 1d       	adc	r26, r1
     6a2:	b1 1d       	adc	r27, r1
     6a4:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <system_tick>
     6a8:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <system_tick+0x1>
     6ac:	a0 93 ea 01 	sts	0x01EA, r26	; 0x8001ea <system_tick+0x2>
     6b0:	b0 93 eb 01 	sts	0x01EB, r27	; 0x8001eb <system_tick+0x3>
     6b4:	08 95       	ret

000006b6 <check_device_availability>:
}

// Función mejorada para verificar disponibilidad de dispositivo
uint8_t check_device_availability(uint8_t device_addr, device_status_t* status) {
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	eb 01       	movw	r28, r22
    uint8_t result;
    
    // Intentar comunicación simple con el dispositivo
    result = I2C_Start((device_addr << 1) | 0);
     6be:	88 0f       	add	r24, r24
     6c0:	0e 94 14 01 	call	0x228	; 0x228 <I2C_Start>
     6c4:	18 2f       	mov	r17, r24
    I2C_Stop();
     6c6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
    
    if (result == I2C_SLA_W_ACK) {
     6ca:	18 31       	cpi	r17, 0x18	; 24
     6cc:	89 f4       	brne	.+34     	; 0x6f0 <check_device_availability+0x3a>
        status->consecutive_errors = 0;
     6ce:	19 82       	std	Y+1, r1	; 0x01
        status->device_available = 1;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	8a 83       	std	Y+2, r24	; 0x02
        status->last_success_time = system_tick;
     6d4:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <system_tick>
     6d8:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <system_tick+0x1>
     6dc:	a0 91 ea 01 	lds	r26, 0x01EA	; 0x8001ea <system_tick+0x2>
     6e0:	b0 91 eb 01 	lds	r27, 0x01EB	; 0x8001eb <system_tick+0x3>
     6e4:	8b 83       	std	Y+3, r24	; 0x03
     6e6:	9c 83       	std	Y+4, r25	; 0x04
     6e8:	ad 83       	std	Y+5, r26	; 0x05
     6ea:	be 83       	std	Y+6, r27	; 0x06
        return 1;
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	09 c0       	rjmp	.+18     	; 0x702 <check_device_availability+0x4c>
    } else {
        status->consecutive_errors++;
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	8f 5f       	subi	r24, 0xFF	; 255
     6f4:	89 83       	std	Y+1, r24	; 0x01
        if (status->consecutive_errors > 5) {
     6f6:	86 30       	cpi	r24, 0x06	; 6
     6f8:	18 f0       	brcs	.+6      	; 0x700 <check_device_availability+0x4a>
            status->device_available = 0;
     6fa:	1a 82       	std	Y+2, r1	; 0x02
        }
        return 0;
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <check_device_availability+0x4c>
     700:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	08 95       	ret

0000070a <recover_device_communication>:

// Función de recuperación de I2C específica para cada dispositivo
void recover_device_communication(uint8_t device_addr, device_status_t* status) {
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	d8 2f       	mov	r29, r24
     714:	8b 01       	movw	r16, r22
    // Verificar estado del bus antes de intentar recuperación
    if (I2C_BusStatus() != 0) {
     716:	0e 94 89 02 	call	0x512	; 0x512 <I2C_BusStatus>
     71a:	89 2b       	or	r24, r25
     71c:	59 f0       	breq	.+22     	; 0x734 <recover_device_communication+0x2a>
        I2C_ForceRecovery();
     71e:	0e 94 93 02 	call	0x526	; 0x526 <I2C_ForceRecovery>
     722:	2f ef       	ldi	r18, 0xFF	; 255
     724:	80 e7       	ldi	r24, 0x70	; 112
     726:	92 e0       	ldi	r25, 0x02	; 2
     728:	21 50       	subi	r18, 0x01	; 1
     72a:	80 40       	sbci	r24, 0x00	; 0
     72c:	90 40       	sbci	r25, 0x00	; 0
     72e:	e1 f7       	brne	.-8      	; 0x728 <recover_device_communication+0x1e>
     730:	00 c0       	rjmp	.+0      	; 0x732 <recover_device_communication+0x28>
     732:	00 00       	nop
        return 0;
    }
}

// Función de recuperación de I2C específica para cada dispositivo
void recover_device_communication(uint8_t device_addr, device_status_t* status) {
     734:	c0 e0       	ldi	r28, 0x00	; 0
     736:	10 c0       	rjmp	.+32     	; 0x758 <recover_device_communication+0x4e>
        _delay_ms(50);
    }
    
    // Intentar reconectar con el dispositivo
    for (uint8_t i = 0; i < 3; i++) {
        if (check_device_availability(device_addr, status)) {
     738:	b8 01       	movw	r22, r16
     73a:	8d 2f       	mov	r24, r29
     73c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <check_device_availability>
     740:	81 11       	cpse	r24, r1
     742:	0c c0       	rjmp	.+24     	; 0x75c <recover_device_communication+0x52>
     744:	2f ef       	ldi	r18, 0xFF	; 255
     746:	81 ee       	ldi	r24, 0xE1	; 225
     748:	94 e0       	ldi	r25, 0x04	; 4
     74a:	21 50       	subi	r18, 0x01	; 1
     74c:	80 40       	sbci	r24, 0x00	; 0
     74e:	90 40       	sbci	r25, 0x00	; 0
     750:	e1 f7       	brne	.-8      	; 0x74a <recover_device_communication+0x40>
     752:	00 c0       	rjmp	.+0      	; 0x754 <recover_device_communication+0x4a>
     754:	00 00       	nop
        I2C_ForceRecovery();
        _delay_ms(50);
    }
    
    // Intentar reconectar con el dispositivo
    for (uint8_t i = 0; i < 3; i++) {
     756:	cf 5f       	subi	r28, 0xFF	; 255
     758:	c3 30       	cpi	r28, 0x03	; 3
     75a:	70 f3       	brcs	.-36     	; 0x738 <recover_device_communication+0x2e>
        if (check_device_availability(device_addr, status)) {
            break;
        }
        _delay_ms(100);
    }
}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	08 95       	ret

00000766 <Read_TCS3200_Color>:

// Función MEJORADA para leer color del TCS3200
uint8_t Read_TCS3200_Color(void) {
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
    uint8_t status;
    uint8_t color_data = 0;
    uint8_t retry_count = 0;
    
    // Verificar disponibilidad del dispositivo
    if (!tcs_status.device_available) {
     76a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tcs_status+0x2>
     76e:	88 23       	and	r24, r24
     770:	09 f4       	brne	.+2      	; 0x774 <Read_TCS3200_Color+0xe>
     772:	8e c0       	rjmp	.+284    	; 0x890 <__DATA_REGION_LENGTH__+0x90>
     774:	c0 e0       	ldi	r28, 0x00	; 0
     776:	79 c0       	rjmp	.+242    	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
        return 0xFF;
    }
    
    while (retry_count < 2) { // Reducir intentos para evitar bloqueos
        // PASO 1: Verificar que el dispositivo responde
        if (!check_device_availability(SLAVE_TCS3200, &tcs_status)) {
     778:	67 e0       	ldi	r22, 0x07	; 7
     77a:	71 e0       	ldi	r23, 0x01	; 1
     77c:	80 e2       	ldi	r24, 0x20	; 32
     77e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <check_device_availability>
     782:	81 11       	cpse	r24, r1
     784:	0b c0       	rjmp	.+22     	; 0x79c <Read_TCS3200_Color+0x36>
            retry_count++;
     786:	cf 5f       	subi	r28, 0xFF	; 255
     788:	2f ef       	ldi	r18, 0xFF	; 255
     78a:	89 ef       	ldi	r24, 0xF9	; 249
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	21 50       	subi	r18, 0x01	; 1
     790:	80 40       	sbci	r24, 0x00	; 0
     792:	90 40       	sbci	r25, 0x00	; 0
     794:	e1 f7       	brne	.-8      	; 0x78e <Read_TCS3200_Color+0x28>
     796:	00 c0       	rjmp	.+0      	; 0x798 <Read_TCS3200_Color+0x32>
     798:	00 00       	nop
            _delay_ms(20);
            continue;
     79a:	67 c0       	rjmp	.+206    	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
        }
        
        // PASO 2: Enviar comando de preparación
        status = I2C_Start((SLAVE_TCS3200 << 1) | 0);
     79c:	80 e4       	ldi	r24, 0x40	; 64
     79e:	0e 94 14 01 	call	0x228	; 0x228 <I2C_Start>
        if (status != I2C_SLA_W_ACK) {
     7a2:	88 31       	cpi	r24, 0x18	; 24
     7a4:	91 f0       	breq	.+36     	; 0x7ca <Read_TCS3200_Color+0x64>
            I2C_Stop();
     7a6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
            tcs_status.error_count++;
     7aa:	e7 e0       	ldi	r30, 0x07	; 7
     7ac:	f1 e0       	ldi	r31, 0x01	; 1
     7ae:	80 81       	ld	r24, Z
     7b0:	8f 5f       	subi	r24, 0xFF	; 255
     7b2:	80 83       	st	Z, r24
            retry_count++;
     7b4:	cf 5f       	subi	r28, 0xFF	; 255
     7b6:	2f ef       	ldi	r18, 0xFF	; 255
     7b8:	89 ef       	ldi	r24, 0xF9	; 249
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	21 50       	subi	r18, 0x01	; 1
     7be:	80 40       	sbci	r24, 0x00	; 0
     7c0:	90 40       	sbci	r25, 0x00	; 0
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <Read_TCS3200_Color+0x56>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <Read_TCS3200_Color+0x60>
     7c6:	00 00       	nop
            _delay_ms(20);
            continue;
     7c8:	50 c0       	rjmp	.+160    	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
        }
        
        status = I2C_Write(CMD_PREP);
     7ca:	83 e4       	ldi	r24, 0x43	; 67
     7cc:	0e 94 56 01 	call	0x2ac	; 0x2ac <I2C_Write>
        if (status != I2C_DATA_W_ACK) {
     7d0:	88 32       	cpi	r24, 0x28	; 40
     7d2:	91 f0       	breq	.+36     	; 0x7f8 <Read_TCS3200_Color+0x92>
            I2C_Stop();
     7d4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
            tcs_status.error_count++;
     7d8:	e7 e0       	ldi	r30, 0x07	; 7
     7da:	f1 e0       	ldi	r31, 0x01	; 1
     7dc:	80 81       	ld	r24, Z
     7de:	8f 5f       	subi	r24, 0xFF	; 255
     7e0:	80 83       	st	Z, r24
            retry_count++;
     7e2:	cf 5f       	subi	r28, 0xFF	; 255
     7e4:	2f ef       	ldi	r18, 0xFF	; 255
     7e6:	89 ef       	ldi	r24, 0xF9	; 249
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	80 40       	sbci	r24, 0x00	; 0
     7ee:	90 40       	sbci	r25, 0x00	; 0
     7f0:	e1 f7       	brne	.-8      	; 0x7ea <Read_TCS3200_Color+0x84>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <Read_TCS3200_Color+0x8e>
     7f4:	00 00       	nop
            _delay_ms(20);
            continue;
     7f6:	39 c0       	rjmp	.+114    	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
        }
        
        I2C_Stop();
     7f8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
     7fc:	2f ef       	ldi	r18, 0xFF	; 255
     7fe:	81 ee       	ldi	r24, 0xE1	; 225
     800:	94 e0       	ldi	r25, 0x04	; 4
     802:	21 50       	subi	r18, 0x01	; 1
     804:	80 40       	sbci	r24, 0x00	; 0
     806:	90 40       	sbci	r25, 0x00	; 0
     808:	e1 f7       	brne	.-8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80c:	00 00       	nop
        _delay_ms(100); // Tiempo para que el esclavo procese
        
        // PASO 3: Leer respuesta
        status = I2C_Start((SLAVE_TCS3200 << 1) | 1);
     80e:	81 e4       	ldi	r24, 0x41	; 65
     810:	0e 94 14 01 	call	0x228	; 0x228 <I2C_Start>
        if (status != I2C_SLA_R_ACK) {
     814:	80 34       	cpi	r24, 0x40	; 64
     816:	91 f0       	breq	.+36     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
            I2C_Stop();
     818:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
            tcs_status.error_count++;
     81c:	e7 e0       	ldi	r30, 0x07	; 7
     81e:	f1 e0       	ldi	r31, 0x01	; 1
     820:	80 81       	ld	r24, Z
     822:	8f 5f       	subi	r24, 0xFF	; 255
     824:	80 83       	st	Z, r24
            retry_count++;
     826:	cf 5f       	subi	r28, 0xFF	; 255
     828:	2f ef       	ldi	r18, 0xFF	; 255
     82a:	89 ef       	ldi	r24, 0xF9	; 249
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	21 50       	subi	r18, 0x01	; 1
     830:	80 40       	sbci	r24, 0x00	; 0
     832:	90 40       	sbci	r25, 0x00	; 0
     834:	e1 f7       	brne	.-8      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     836:	00 c0       	rjmp	.+0      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     838:	00 00       	nop
            _delay_ms(20);
            continue;
     83a:	17 c0       	rjmp	.+46     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
        }
        
        color_data = I2C_ReadNACK();
     83c:	0e 94 02 01 	call	0x204	; 0x204 <I2C_ReadNACK>
     840:	d8 2f       	mov	r29, r24
        I2C_Stop();
     842:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
        
        // Validar respuesta
        if (color_data <= 3) {
     846:	d4 30       	cpi	r29, 0x04	; 4
     848:	30 f4       	brcc	.+12     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
            tcs_status.error_count = 0;
     84a:	e7 e0       	ldi	r30, 0x07	; 7
     84c:	f1 e0       	ldi	r31, 0x01	; 1
     84e:	10 82       	st	Z, r1
            tcs_status.consecutive_errors = 0;
     850:	11 82       	std	Z+1, r1	; 0x01
            return color_data;
     852:	8d 2f       	mov	r24, r29
     854:	20 c0       	rjmp	.+64     	; 0x896 <__DATA_REGION_LENGTH__+0x96>
        }
        
        retry_count++;
     856:	cf 5f       	subi	r28, 0xFF	; 255
     858:	2f ef       	ldi	r18, 0xFF	; 255
     85a:	89 ef       	ldi	r24, 0xF9	; 249
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	21 50       	subi	r18, 0x01	; 1
     860:	80 40       	sbci	r24, 0x00	; 0
     862:	90 40       	sbci	r25, 0x00	; 0
     864:	e1 f7       	brne	.-8      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     866:	00 c0       	rjmp	.+0      	; 0x868 <__DATA_REGION_LENGTH__+0x68>
     868:	00 00       	nop
    // Verificar disponibilidad del dispositivo
    if (!tcs_status.device_available) {
        return 0xFF;
    }
    
    while (retry_count < 2) { // Reducir intentos para evitar bloqueos
     86a:	c2 30       	cpi	r28, 0x02	; 2
     86c:	08 f4       	brcc	.+2      	; 0x870 <__DATA_REGION_LENGTH__+0x70>
     86e:	84 cf       	rjmp	.-248    	; 0x778 <Read_TCS3200_Color+0x12>
        retry_count++;
        _delay_ms(20);
    }
    
    // Error después de todos los intentos
    tcs_status.error_count++;
     870:	e7 e0       	ldi	r30, 0x07	; 7
     872:	f1 e0       	ldi	r31, 0x01	; 1
     874:	80 81       	ld	r24, Z
     876:	8f 5f       	subi	r24, 0xFF	; 255
     878:	80 83       	st	Z, r24
    tcs_status.consecutive_errors++;
     87a:	81 81       	ldd	r24, Z+1	; 0x01
     87c:	8f 5f       	subi	r24, 0xFF	; 255
     87e:	81 83       	std	Z+1, r24	; 0x01
    
    if (tcs_status.consecutive_errors > 10) {
     880:	8b 30       	cpi	r24, 0x0B	; 11
     882:	40 f0       	brcs	.+16     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
        recover_device_communication(SLAVE_TCS3200, &tcs_status);
     884:	bf 01       	movw	r22, r30
     886:	80 e2       	ldi	r24, 0x20	; 32
     888:	0e 94 85 03 	call	0x70a	; 0x70a <recover_device_communication>
    }
    
    return 0xFF;
     88c:	8f ef       	ldi	r24, 0xFF	; 255
     88e:	03 c0       	rjmp	.+6      	; 0x896 <__DATA_REGION_LENGTH__+0x96>
    uint8_t color_data = 0;
    uint8_t retry_count = 0;
    
    // Verificar disponibilidad del dispositivo
    if (!tcs_status.device_available) {
        return 0xFF;
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	01 c0       	rjmp	.+2      	; 0x896 <__DATA_REGION_LENGTH__+0x96>
    
    if (tcs_status.consecutive_errors > 10) {
        recover_device_communication(SLAVE_TCS3200, &tcs_status);
    }
    
    return 0xFF;
     894:	8f ef       	ldi	r24, 0xFF	; 255
}
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <Read_Banda_Weight>:

// Función MEJORADA para leer peso de la banda
float Read_Banda_Weight(void) {
     89c:	cf 92       	push	r12
     89e:	df 92       	push	r13
     8a0:	ef 92       	push	r14
     8a2:	ff 92       	push	r15
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	28 97       	sbiw	r28, 0x08	; 8
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
        float f;
        uint8_t bytes[4];
    } weight_union;
    
    // Verificar disponibilidad del dispositivo
    if (!banda_status.device_available) {
     8ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     8be:	88 23       	and	r24, r24
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <Read_Banda_Weight+0x28>
     8c2:	ad c0       	rjmp	.+346    	; 0xa1e <__stack+0x11f>
     8c4:	10 e0       	ldi	r17, 0x00	; 0
     8c6:	91 c0       	rjmp	.+290    	; 0x9ea <__stack+0xeb>
        return -1.0f;
    }
    
    while (retry_count < 2) {
        // Verificar comunicación básica
        if (!check_device_availability(SLAVE_BANDA, &banda_status)) {
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	71 e0       	ldi	r23, 0x01	; 1
     8cc:	80 e3       	ldi	r24, 0x30	; 48
     8ce:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <check_device_availability>
     8d2:	81 11       	cpse	r24, r1
     8d4:	0b c0       	rjmp	.+22     	; 0x8ec <Read_Banda_Weight+0x50>
            retry_count++;
     8d6:	1f 5f       	subi	r17, 0xFF	; 255
     8d8:	2f ef       	ldi	r18, 0xFF	; 255
     8da:	89 ef       	ldi	r24, 0xF9	; 249
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	21 50       	subi	r18, 0x01	; 1
     8e0:	80 40       	sbci	r24, 0x00	; 0
     8e2:	90 40       	sbci	r25, 0x00	; 0
     8e4:	e1 f7       	brne	.-8      	; 0x8de <Read_Banda_Weight+0x42>
     8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <Read_Banda_Weight+0x4c>
     8e8:	00 00       	nop
            _delay_ms(20);
            continue;
     8ea:	7f c0       	rjmp	.+254    	; 0x9ea <__stack+0xeb>
        }
        
        // Enviar comando para peso
        status = I2C_Start((SLAVE_BANDA << 1) | 0);
     8ec:	80 e6       	ldi	r24, 0x60	; 96
     8ee:	0e 94 14 01 	call	0x228	; 0x228 <I2C_Start>
        if (status != I2C_SLA_W_ACK) {
     8f2:	88 31       	cpi	r24, 0x18	; 24
     8f4:	91 f0       	breq	.+36     	; 0x91a <__stack+0x1b>
            I2C_Stop();
     8f6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
            banda_status.error_count++;
     8fa:	e0 e0       	ldi	r30, 0x00	; 0
     8fc:	f1 e0       	ldi	r31, 0x01	; 1
     8fe:	80 81       	ld	r24, Z
     900:	8f 5f       	subi	r24, 0xFF	; 255
     902:	80 83       	st	Z, r24
            retry_count++;
     904:	1f 5f       	subi	r17, 0xFF	; 255
     906:	2f ef       	ldi	r18, 0xFF	; 255
     908:	89 ef       	ldi	r24, 0xF9	; 249
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	21 50       	subi	r18, 0x01	; 1
     90e:	80 40       	sbci	r24, 0x00	; 0
     910:	90 40       	sbci	r25, 0x00	; 0
     912:	e1 f7       	brne	.-8      	; 0x90c <__stack+0xd>
     914:	00 c0       	rjmp	.+0      	; 0x916 <__stack+0x17>
     916:	00 00       	nop
            _delay_ms(20);
            continue;
     918:	68 c0       	rjmp	.+208    	; 0x9ea <__stack+0xeb>
        }
        
        status = I2C_Write(CMD_GET_WEIGHT);
     91a:	87 e5       	ldi	r24, 0x57	; 87
     91c:	0e 94 56 01 	call	0x2ac	; 0x2ac <I2C_Write>
        if (status != I2C_DATA_W_ACK) {
     920:	88 32       	cpi	r24, 0x28	; 40
     922:	91 f0       	breq	.+36     	; 0x948 <__stack+0x49>
            I2C_Stop();
     924:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
            banda_status.error_count++;
     928:	e0 e0       	ldi	r30, 0x00	; 0
     92a:	f1 e0       	ldi	r31, 0x01	; 1
     92c:	80 81       	ld	r24, Z
     92e:	8f 5f       	subi	r24, 0xFF	; 255
     930:	80 83       	st	Z, r24
            retry_count++;
     932:	1f 5f       	subi	r17, 0xFF	; 255
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	89 ef       	ldi	r24, 0xF9	; 249
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	21 50       	subi	r18, 0x01	; 1
     93c:	80 40       	sbci	r24, 0x00	; 0
     93e:	90 40       	sbci	r25, 0x00	; 0
     940:	e1 f7       	brne	.-8      	; 0x93a <__stack+0x3b>
     942:	00 c0       	rjmp	.+0      	; 0x944 <__stack+0x45>
     944:	00 00       	nop
            _delay_ms(20);
            continue;
     946:	51 c0       	rjmp	.+162    	; 0x9ea <__stack+0xeb>
        }
        
        I2C_Stop();
     948:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
     94c:	2f ef       	ldi	r18, 0xFF	; 255
     94e:	80 e7       	ldi	r24, 0x70	; 112
     950:	92 e0       	ldi	r25, 0x02	; 2
     952:	21 50       	subi	r18, 0x01	; 1
     954:	80 40       	sbci	r24, 0x00	; 0
     956:	90 40       	sbci	r25, 0x00	; 0
     958:	e1 f7       	brne	.-8      	; 0x952 <__stack+0x53>
     95a:	00 c0       	rjmp	.+0      	; 0x95c <__stack+0x5d>
     95c:	00 00       	nop
        _delay_ms(50); // Tiempo para procesamiento
        
        // Leer respuesta usando función robusta
        if (I2C_ReadMultiple(SLAVE_BANDA, 0, weight_bytes, 4) == 4) {
     95e:	24 e0       	ldi	r18, 0x04	; 4
     960:	ae 01       	movw	r20, r28
     962:	4f 5f       	subi	r20, 0xFF	; 255
     964:	5f 4f       	sbci	r21, 0xFF	; 255
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	80 e3       	ldi	r24, 0x30	; 48
     96a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <I2C_ReadMultiple>
     96e:	84 30       	cpi	r24, 0x04	; 4
     970:	91 f5       	brne	.+100    	; 0x9d6 <__stack+0xd7>
     972:	12 c0       	rjmp	.+36     	; 0x998 <__stack+0x99>
            // Convertir bytes a float
            for (uint8_t i = 0; i < 4; i++) {
                weight_union.bytes[i] = weight_bytes[i];
     974:	82 2f       	mov	r24, r18
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	e1 e0       	ldi	r30, 0x01	; 1
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	ec 0f       	add	r30, r28
     97e:	fd 1f       	adc	r31, r29
     980:	e8 0f       	add	r30, r24
     982:	f9 1f       	adc	r31, r25
     984:	30 81       	ld	r19, Z
     986:	e5 e0       	ldi	r30, 0x05	; 5
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	ec 0f       	add	r30, r28
     98c:	fd 1f       	adc	r31, r29
     98e:	e8 0f       	add	r30, r24
     990:	f9 1f       	adc	r31, r25
     992:	30 83       	st	Z, r19
        _delay_ms(50); // Tiempo para procesamiento
        
        // Leer respuesta usando función robusta
        if (I2C_ReadMultiple(SLAVE_BANDA, 0, weight_bytes, 4) == 4) {
            // Convertir bytes a float
            for (uint8_t i = 0; i < 4; i++) {
     994:	2f 5f       	subi	r18, 0xFF	; 255
     996:	01 c0       	rjmp	.+2      	; 0x99a <__stack+0x9b>
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	24 30       	cpi	r18, 0x04	; 4
     99c:	58 f3       	brcs	.-42     	; 0x974 <__stack+0x75>
                weight_union.bytes[i] = weight_bytes[i];
            }
            
            // Validar rango del peso
            if (weight_union.f >= 0 && weight_union.f < 1000) {
     99e:	cd 80       	ldd	r12, Y+5	; 0x05
     9a0:	de 80       	ldd	r13, Y+6	; 0x06
     9a2:	ef 80       	ldd	r14, Y+7	; 0x07
     9a4:	f8 84       	ldd	r15, Y+8	; 0x08
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	a9 01       	movw	r20, r18
     9ac:	c7 01       	movw	r24, r14
     9ae:	b6 01       	movw	r22, r12
     9b0:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__gesf2>
     9b4:	88 23       	and	r24, r24
     9b6:	7c f0       	brlt	.+30     	; 0x9d6 <__stack+0xd7>
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	4a e7       	ldi	r20, 0x7A	; 122
     9be:	54 e4       	ldi	r21, 0x44	; 68
     9c0:	c7 01       	movw	r24, r14
     9c2:	b6 01       	movw	r22, r12
     9c4:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <__cmpsf2>
     9c8:	88 23       	and	r24, r24
     9ca:	2c f4       	brge	.+10     	; 0x9d6 <__stack+0xd7>
                banda_status.error_count = 0;
     9cc:	e0 e0       	ldi	r30, 0x00	; 0
     9ce:	f1 e0       	ldi	r31, 0x01	; 1
     9d0:	10 82       	st	Z, r1
                banda_status.consecutive_errors = 0;
     9d2:	11 82       	std	Z+1, r1	; 0x01
                return weight_union.f;
     9d4:	35 c0       	rjmp	.+106    	; 0xa40 <__stack+0x141>
            }
        }
        
        retry_count++;
     9d6:	1f 5f       	subi	r17, 0xFF	; 255
     9d8:	2f ef       	ldi	r18, 0xFF	; 255
     9da:	89 ef       	ldi	r24, 0xF9	; 249
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	21 50       	subi	r18, 0x01	; 1
     9e0:	80 40       	sbci	r24, 0x00	; 0
     9e2:	90 40       	sbci	r25, 0x00	; 0
     9e4:	e1 f7       	brne	.-8      	; 0x9de <__stack+0xdf>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <__stack+0xe9>
     9e8:	00 00       	nop
    // Verificar disponibilidad del dispositivo
    if (!banda_status.device_available) {
        return -1.0f;
    }
    
    while (retry_count < 2) {
     9ea:	12 30       	cpi	r17, 0x02	; 2
     9ec:	08 f4       	brcc	.+2      	; 0x9f0 <__stack+0xf1>
     9ee:	6c cf       	rjmp	.-296    	; 0x8c8 <Read_Banda_Weight+0x2c>
        retry_count++;
        _delay_ms(20);
    }
    
    // Error después de todos los intentos
    banda_status.error_count++;
     9f0:	e0 e0       	ldi	r30, 0x00	; 0
     9f2:	f1 e0       	ldi	r31, 0x01	; 1
     9f4:	80 81       	ld	r24, Z
     9f6:	8f 5f       	subi	r24, 0xFF	; 255
     9f8:	80 83       	st	Z, r24
    banda_status.consecutive_errors++;
     9fa:	81 81       	ldd	r24, Z+1	; 0x01
     9fc:	8f 5f       	subi	r24, 0xFF	; 255
     9fe:	81 83       	std	Z+1, r24	; 0x01
    
    if (banda_status.consecutive_errors > 10) {
     a00:	8b 30       	cpi	r24, 0x0B	; 11
     a02:	b0 f0       	brcs	.+44     	; 0xa30 <__stack+0x131>
        recover_device_communication(SLAVE_BANDA, &banda_status);
     a04:	bf 01       	movw	r22, r30
     a06:	80 e3       	ldi	r24, 0x30	; 48
     a08:	0e 94 85 03 	call	0x70a	; 0x70a <recover_device_communication>
    }
    
    return -1.0f;
     a0c:	0f 2e       	mov	r0, r31
     a0e:	c1 2c       	mov	r12, r1
     a10:	d1 2c       	mov	r13, r1
     a12:	f0 e8       	ldi	r31, 0x80	; 128
     a14:	ef 2e       	mov	r14, r31
     a16:	ff eb       	ldi	r31, 0xBF	; 191
     a18:	ff 2e       	mov	r15, r31
     a1a:	f0 2d       	mov	r31, r0
     a1c:	11 c0       	rjmp	.+34     	; 0xa40 <__stack+0x141>
        uint8_t bytes[4];
    } weight_union;
    
    // Verificar disponibilidad del dispositivo
    if (!banda_status.device_available) {
        return -1.0f;
     a1e:	0f 2e       	mov	r0, r31
     a20:	c1 2c       	mov	r12, r1
     a22:	d1 2c       	mov	r13, r1
     a24:	f0 e8       	ldi	r31, 0x80	; 128
     a26:	ef 2e       	mov	r14, r31
     a28:	ff eb       	ldi	r31, 0xBF	; 191
     a2a:	ff 2e       	mov	r15, r31
     a2c:	f0 2d       	mov	r31, r0
     a2e:	08 c0       	rjmp	.+16     	; 0xa40 <__stack+0x141>
    
    if (banda_status.consecutive_errors > 10) {
        recover_device_communication(SLAVE_BANDA, &banda_status);
    }
    
    return -1.0f;
     a30:	0f 2e       	mov	r0, r31
     a32:	c1 2c       	mov	r12, r1
     a34:	d1 2c       	mov	r13, r1
     a36:	f0 e8       	ldi	r31, 0x80	; 128
     a38:	ef 2e       	mov	r14, r31
     a3a:	ff eb       	ldi	r31, 0xBF	; 191
     a3c:	ff 2e       	mov	r15, r31
     a3e:	f0 2d       	mov	r31, r0
}
     a40:	c7 01       	movw	r24, r14
     a42:	b6 01       	movw	r22, r12
     a44:	28 96       	adiw	r28, 0x08	; 8
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	cd bf       	out	0x3d, r28	; 61
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	ff 90       	pop	r15
     a58:	ef 90       	pop	r14
     a5a:	df 90       	pop	r13
     a5c:	cf 90       	pop	r12
     a5e:	08 95       	ret

00000a60 <Read_VL53L0X_Distance>:

// Función MEJORADA para leer VL53L0X
uint16_t Read_VL53L0X_Distance(void) {
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
    uint16_t new_distance;
    
    VL53L0X_StartMeasurement();
     a64:	0e 94 1e 08 	call	0x103c	; 0x103c <VL53L0X_StartMeasurement>
     a68:	2f ef       	ldi	r18, 0xFF	; 255
     a6a:	80 e7       	ldi	r24, 0x70	; 112
     a6c:	92 e0       	ldi	r25, 0x02	; 2
     a6e:	21 50       	subi	r18, 0x01	; 1
     a70:	80 40       	sbci	r24, 0x00	; 0
     a72:	90 40       	sbci	r25, 0x00	; 0
     a74:	e1 f7       	brne	.-8      	; 0xa6e <Read_VL53L0X_Distance+0xe>
     a76:	00 c0       	rjmp	.+0      	; 0xa78 <Read_VL53L0X_Distance+0x18>
     a78:	00 00       	nop
    _delay_ms(50);
    
    new_distance = VL53L0X_ReadDistance();
     a7a:	0e 94 38 08 	call	0x1070	; 0x1070 <VL53L0X_ReadDistance>
     a7e:	ec 01       	movw	r28, r24
    
    if (new_distance != 0xFFFF && VL53L0X_GetLastError() == VL53L0X_ERROR_NONE) {
     a80:	01 96       	adiw	r24, 0x01	; 1
     a82:	59 f0       	breq	.+22     	; 0xa9a <Read_VL53L0X_Distance+0x3a>
     a84:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <VL53L0X_GetLastError>
     a88:	81 11       	cpse	r24, r1
     a8a:	07 c0       	rjmp	.+14     	; 0xa9a <Read_VL53L0X_Distance+0x3a>
        vl53_status.error_count = 0;
     a8c:	ee e0       	ldi	r30, 0x0E	; 14
     a8e:	f1 e0       	ldi	r31, 0x01	; 1
     a90:	10 82       	st	Z, r1
        vl53_status.consecutive_errors = 0;
     a92:	11 82       	std	Z+1, r1	; 0x01
        return new_distance;
     a94:	8c 2f       	mov	r24, r28
     a96:	9d 2f       	mov	r25, r29
     a98:	23 c0       	rjmp	.+70     	; 0xae0 <Read_VL53L0X_Distance+0x80>
    } else {
        vl53_status.error_count++;
     a9a:	ee e0       	ldi	r30, 0x0E	; 14
     a9c:	f1 e0       	ldi	r31, 0x01	; 1
     a9e:	80 81       	ld	r24, Z
     aa0:	8f 5f       	subi	r24, 0xFF	; 255
     aa2:	80 83       	st	Z, r24
        vl53_status.consecutive_errors++;
     aa4:	81 81       	ldd	r24, Z+1	; 0x01
     aa6:	8f 5f       	subi	r24, 0xFF	; 255
     aa8:	81 83       	std	Z+1, r24	; 0x01
        
        // Recuperación específica para VL53L0X
        if (vl53_status.consecutive_errors > 5) {
     aaa:	86 30       	cpi	r24, 0x06	; 6
     aac:	a0 f0       	brcs	.+40     	; 0xad6 <Read_VL53L0X_Distance+0x76>
            I2C_ForceRecovery();
     aae:	0e 94 93 02 	call	0x526	; 0x526 <I2C_ForceRecovery>
     ab2:	8f ef       	ldi	r24, 0xFF	; 255
     ab4:	91 ee       	ldi	r25, 0xE1	; 225
     ab6:	24 e0       	ldi	r18, 0x04	; 4
     ab8:	81 50       	subi	r24, 0x01	; 1
     aba:	90 40       	sbci	r25, 0x00	; 0
     abc:	20 40       	sbci	r18, 0x00	; 0
     abe:	e1 f7       	brne	.-8      	; 0xab8 <Read_VL53L0X_Distance+0x58>
     ac0:	00 c0       	rjmp	.+0      	; 0xac2 <Read_VL53L0X_Distance+0x62>
     ac2:	00 00       	nop
            _delay_ms(100);
            if (VL53L0X_Init()) {
     ac4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <VL53L0X_Init>
     ac8:	88 23       	and	r24, r24
     aca:	41 f0       	breq	.+16     	; 0xadc <Read_VL53L0X_Distance+0x7c>
                vl53_status.consecutive_errors = 0;
     acc:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <vl53_status+0x1>
            }
        }
        
        return 0;
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	05 c0       	rjmp	.+10     	; 0xae0 <Read_VL53L0X_Distance+0x80>
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <Read_VL53L0X_Distance+0x80>
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
    }
}
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	08 95       	ret

00000ae6 <Update_LCD_Display>:

void Update_LCD_Display(void) {
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
    // LÍNEA SUPERIOR: Labels
    LCD8_Set_Cursor(0, 0);
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	0e 94 31 03 	call	0x662	; 0x662 <LCD8_Set_Cursor>
    LCD8_Write_String("Nvl:  Wg:   Clr:");
     af6:	8d e2       	ldi	r24, 0x2D	; 45
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	0e 94 1b 03 	call	0x636	; 0x636 <LCD8_Write_String>
    
    // LÍNEA INFERIOR: Valores
    LCD8_Set_Cursor(0, 1);
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	0e 94 31 03 	call	0x662	; 0x662 <LCD8_Set_Cursor>
    
    // Distancia
    if (distance > 0 && distance < 2000) {
     b06:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <distance>
     b0a:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <distance+0x1>
     b0e:	9c 01       	movw	r18, r24
     b10:	21 50       	subi	r18, 0x01	; 1
     b12:	31 09       	sbc	r19, r1
     b14:	2f 3c       	cpi	r18, 0xCF	; 207
     b16:	37 40       	sbci	r19, 0x07	; 7
     b18:	98 f4       	brcc	.+38     	; 0xb40 <Update_LCD_Display+0x5a>
        sprintf(buffer, "%umm ", distance);
     b1a:	9f 93       	push	r25
     b1c:	8f 93       	push	r24
     b1e:	8e e3       	ldi	r24, 0x3E	; 62
     b20:	91 e0       	ldi	r25, 0x01	; 1
     b22:	9f 93       	push	r25
     b24:	8f 93       	push	r24
     b26:	86 ef       	ldi	r24, 0xF6	; 246
     b28:	91 e0       	ldi	r25, 0x01	; 1
     b2a:	9f 93       	push	r25
     b2c:	8f 93       	push	r24
     b2e:	0e 94 9a 09 	call	0x1334	; 0x1334 <sprintf>
     b32:	0f 90       	pop	r0
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	09 c0       	rjmp	.+18     	; 0xb52 <Update_LCD_Display+0x6c>
    } else {
        sprintf(buffer, "ERR  ");
     b40:	86 e0       	ldi	r24, 0x06	; 6
     b42:	e4 e4       	ldi	r30, 0x44	; 68
     b44:	f1 e0       	ldi	r31, 0x01	; 1
     b46:	a6 ef       	ldi	r26, 0xF6	; 246
     b48:	b1 e0       	ldi	r27, 0x01	; 1
     b4a:	01 90       	ld	r0, Z+
     b4c:	0d 92       	st	X+, r0
     b4e:	8a 95       	dec	r24
     b50:	e1 f7       	brne	.-8      	; 0xb4a <Update_LCD_Display+0x64>
    }
    LCD8_Write_String(buffer);
     b52:	86 ef       	ldi	r24, 0xF6	; 246
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	0e 94 1b 03 	call	0x636	; 0x636 <LCD8_Write_String>
    
    // Peso
    LCD8_Set_Cursor(7, 1);
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	87 e0       	ldi	r24, 0x07	; 7
     b5e:	0e 94 31 03 	call	0x662	; 0x662 <LCD8_Set_Cursor>
    if (current_weight >= 0 && current_weight < 999) {
     b62:	c0 90 ec 01 	lds	r12, 0x01EC	; 0x8001ec <current_weight>
     b66:	d0 90 ed 01 	lds	r13, 0x01ED	; 0x8001ed <current_weight+0x1>
     b6a:	e0 90 ee 01 	lds	r14, 0x01EE	; 0x8001ee <current_weight+0x2>
     b6e:	f0 90 ef 01 	lds	r15, 0x01EF	; 0x8001ef <current_weight+0x3>
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	a9 01       	movw	r20, r18
     b78:	c7 01       	movw	r24, r14
     b7a:	b6 01       	movw	r22, r12
     b7c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__gesf2>
     b80:	88 23       	and	r24, r24
     b82:	0c f1       	brlt	.+66     	; 0xbc6 <Update_LCD_Display+0xe0>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 ec       	ldi	r19, 0xC0	; 192
     b88:	49 e7       	ldi	r20, 0x79	; 121
     b8a:	54 e4       	ldi	r21, 0x44	; 68
     b8c:	c7 01       	movw	r24, r14
     b8e:	b6 01       	movw	r22, r12
     b90:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <__cmpsf2>
     b94:	88 23       	and	r24, r24
     b96:	bc f4       	brge	.+46     	; 0xbc6 <Update_LCD_Display+0xe0>
        sprintf(buffer, "%dg ", (int)current_weight);
     b98:	c7 01       	movw	r24, r14
     b9a:	b6 01       	movw	r22, r12
     b9c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__fixsfsi>
     ba0:	7f 93       	push	r23
     ba2:	6f 93       	push	r22
     ba4:	8a e4       	ldi	r24, 0x4A	; 74
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	9f 93       	push	r25
     baa:	8f 93       	push	r24
     bac:	86 ef       	ldi	r24, 0xF6	; 246
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	9f 93       	push	r25
     bb2:	8f 93       	push	r24
     bb4:	0e 94 9a 09 	call	0x1334	; 0x1334 <sprintf>
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <Update_LCD_Display+0xf2>
    } else {
        sprintf(buffer, "ERR ");
     bc6:	85 e0       	ldi	r24, 0x05	; 5
     bc8:	ef e4       	ldi	r30, 0x4F	; 79
     bca:	f1 e0       	ldi	r31, 0x01	; 1
     bcc:	a6 ef       	ldi	r26, 0xF6	; 246
     bce:	b1 e0       	ldi	r27, 0x01	; 1
     bd0:	01 90       	ld	r0, Z+
     bd2:	0d 92       	st	X+, r0
     bd4:	8a 95       	dec	r24
     bd6:	e1 f7       	brne	.-8      	; 0xbd0 <Update_LCD_Display+0xea>
    }
    LCD8_Write_String(buffer);
     bd8:	86 ef       	ldi	r24, 0xF6	; 246
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	0e 94 1b 03 	call	0x636	; 0x636 <LCD8_Write_String>
    
    // Color
    LCD8_Set_Cursor(12, 1);
     be0:	61 e0       	ldi	r22, 0x01	; 1
     be2:	8c e0       	ldi	r24, 0x0C	; 12
     be4:	0e 94 31 03 	call	0x662	; 0x662 <LCD8_Set_Cursor>
    switch(color_code) {
     be8:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <color_code>
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	a9 f0       	breq	.+42     	; 0xc1a <Update_LCD_Display+0x134>
     bf0:	28 f4       	brcc	.+10     	; 0xbfc <Update_LCD_Display+0x116>
     bf2:	88 23       	and	r24, r24
     bf4:	41 f0       	breq	.+16     	; 0xc06 <Update_LCD_Display+0x120>
     bf6:	81 30       	cpi	r24, 0x01	; 1
     bf8:	59 f0       	breq	.+22     	; 0xc10 <Update_LCD_Display+0x12a>
     bfa:	1e c0       	rjmp	.+60     	; 0xc38 <Update_LCD_Display+0x152>
     bfc:	83 30       	cpi	r24, 0x03	; 3
     bfe:	91 f0       	breq	.+36     	; 0xc24 <Update_LCD_Display+0x13e>
     c00:	8f 3f       	cpi	r24, 0xFF	; 255
     c02:	a9 f0       	breq	.+42     	; 0xc2e <Update_LCD_Display+0x148>
     c04:	19 c0       	rjmp	.+50     	; 0xc38 <Update_LCD_Display+0x152>
        case 0: LCD8_Write_String("NONE"); break;
     c06:	84 e5       	ldi	r24, 0x54	; 84
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	0e 94 1b 03 	call	0x636	; 0x636 <LCD8_Write_String>
     c0e:	18 c0       	rjmp	.+48     	; 0xc40 <Update_LCD_Display+0x15a>
        case 1: LCD8_Write_String("RED "); break;
     c10:	89 e5       	ldi	r24, 0x59	; 89
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	0e 94 1b 03 	call	0x636	; 0x636 <LCD8_Write_String>
     c18:	13 c0       	rjmp	.+38     	; 0xc40 <Update_LCD_Display+0x15a>
        case 2: LCD8_Write_String("GRN "); break;
     c1a:	8e e5       	ldi	r24, 0x5E	; 94
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	0e 94 1b 03 	call	0x636	; 0x636 <LCD8_Write_String>
     c22:	0e c0       	rjmp	.+28     	; 0xc40 <Update_LCD_Display+0x15a>
        case 3: LCD8_Write_String("BLU "); break;
     c24:	83 e6       	ldi	r24, 0x63	; 99
     c26:	91 e0       	ldi	r25, 0x01	; 1
     c28:	0e 94 1b 03 	call	0x636	; 0x636 <LCD8_Write_String>
     c2c:	09 c0       	rjmp	.+18     	; 0xc40 <Update_LCD_Display+0x15a>
        case 0xFF: LCD8_Write_String("ERR "); break;
     c2e:	8f e4       	ldi	r24, 0x4F	; 79
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	0e 94 1b 03 	call	0x636	; 0x636 <LCD8_Write_String>
     c36:	04 c0       	rjmp	.+8      	; 0xc40 <Update_LCD_Display+0x15a>
        default: LCD8_Write_String("??? "); break;
     c38:	88 e6       	ldi	r24, 0x68	; 104
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	0e 94 1b 03 	call	0x636	; 0x636 <LCD8_Write_String>
    }
    
    // Mostrar estado de dispositivos en caso de errores
    if (!vl53_status.device_available || !tcs_status.device_available || !banda_status.device_available) {
     c40:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vl53_status+0x2>
     c44:	88 23       	and	r24, r24
     c46:	41 f0       	breq	.+16     	; 0xc58 <Update_LCD_Display+0x172>
     c48:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tcs_status+0x2>
     c4c:	88 23       	and	r24, r24
     c4e:	21 f0       	breq	.+8      	; 0xc58 <Update_LCD_Display+0x172>
     c50:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     c54:	81 11       	cpse	r24, r1
     c56:	2f c0       	rjmp	.+94     	; 0xcb6 <Update_LCD_Display+0x1d0>
        LCD8_Set_Cursor(0, 0);
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	0e 94 31 03 	call	0x662	; 0x662 <LCD8_Set_Cursor>
        sprintf(buffer, "DEV:%d%d%d", 
                vl53_status.device_available, 
                tcs_status.device_available, 
                banda_status.device_available);
     c60:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    // Mostrar estado de dispositivos en caso de errores
    if (!vl53_status.device_available || !tcs_status.device_available || !banda_status.device_available) {
        LCD8_Set_Cursor(0, 0);
        sprintf(buffer, "DEV:%d%d%d", 
                vl53_status.device_available, 
                tcs_status.device_available, 
     c64:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <tcs_status+0x2>
    
    // Mostrar estado de dispositivos en caso de errores
    if (!vl53_status.device_available || !tcs_status.device_available || !banda_status.device_available) {
        LCD8_Set_Cursor(0, 0);
        sprintf(buffer, "DEV:%d%d%d", 
                vl53_status.device_available, 
     c68:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vl53_status+0x2>
    }
    
    // Mostrar estado de dispositivos en caso de errores
    if (!vl53_status.device_available || !tcs_status.device_available || !banda_status.device_available) {
        LCD8_Set_Cursor(0, 0);
        sprintf(buffer, "DEV:%d%d%d", 
     c6c:	1f 92       	push	r1
     c6e:	2f 93       	push	r18
     c70:	1f 92       	push	r1
     c72:	9f 93       	push	r25
     c74:	1f 92       	push	r1
     c76:	8f 93       	push	r24
     c78:	8d e6       	ldi	r24, 0x6D	; 109
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	9f 93       	push	r25
     c7e:	8f 93       	push	r24
     c80:	86 ef       	ldi	r24, 0xF6	; 246
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	9f 93       	push	r25
     c86:	8f 93       	push	r24
     c88:	0e 94 9a 09 	call	0x1334	; 0x1334 <sprintf>
                vl53_status.device_available, 
                tcs_status.device_available, 
                banda_status.device_available);
        LCD8_Write_String(buffer);
     c8c:	86 ef       	ldi	r24, 0xF6	; 246
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 1b 03 	call	0x636	; 0x636 <LCD8_Write_String>
     c94:	8f ef       	ldi	r24, 0xFF	; 255
     c96:	93 ed       	ldi	r25, 0xD3	; 211
     c98:	20 e3       	ldi	r18, 0x30	; 48
     c9a:	81 50       	subi	r24, 0x01	; 1
     c9c:	90 40       	sbci	r25, 0x00	; 0
     c9e:	20 40       	sbci	r18, 0x00	; 0
     ca0:	e1 f7       	brne	.-8      	; 0xc9a <Update_LCD_Display+0x1b4>
     ca2:	00 c0       	rjmp	.+0      	; 0xca4 <Update_LCD_Display+0x1be>
     ca4:	00 00       	nop
     ca6:	8d b7       	in	r24, 0x3d	; 61
     ca8:	9e b7       	in	r25, 0x3e	; 62
     caa:	0a 96       	adiw	r24, 0x0a	; 10
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	9e bf       	out	0x3e, r25	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	8d bf       	out	0x3d, r24	; 61
        _delay_ms(1000);
    }
}
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	df 90       	pop	r13
     cbc:	cf 90       	pop	r12
     cbe:	08 95       	ret

00000cc0 <main>:

int main(void) {
    // Inicialización
    initLCD8();
     cc0:	0e 94 c1 02 	call	0x582	; 0x582 <initLCD8>
    I2C_Init(100000);
     cc4:	60 ea       	ldi	r22, 0xA0	; 160
     cc6:	76 e8       	ldi	r23, 0x86	; 134
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 7b 00 	call	0xf6	; 0xf6 <I2C_Init>
    
    LCD8_Clear();
     cd0:	0e 94 3d 03 	call	0x67a	; 0x67a <LCD8_Clear>
    LCD8_Set_Cursor(0, 0);
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	0e 94 31 03 	call	0x662	; 0x662 <LCD8_Set_Cursor>
    LCD8_Write_String("Sistema Industrial");
     cdc:	88 e7       	ldi	r24, 0x78	; 120
     cde:	91 e0       	ldi	r25, 0x01	; 1
     ce0:	0e 94 1b 03 	call	0x636	; 0x636 <LCD8_Write_String>
    LCD8_Set_Cursor(0, 1);
     ce4:	61 e0       	ldi	r22, 0x01	; 1
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	0e 94 31 03 	call	0x662	; 0x662 <LCD8_Set_Cursor>
    LCD8_Write_String("Iniciando...");
     cec:	8b e8       	ldi	r24, 0x8B	; 139
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	0e 94 1b 03 	call	0x636	; 0x636 <LCD8_Write_String>
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	87 ea       	ldi	r24, 0xA7	; 167
     cf8:	91 e6       	ldi	r25, 0x61	; 97
     cfa:	21 50       	subi	r18, 0x01	; 1
     cfc:	80 40       	sbci	r24, 0x00	; 0
     cfe:	90 40       	sbci	r25, 0x00	; 0
     d00:	e1 f7       	brne	.-8      	; 0xcfa <main+0x3a>
     d02:	00 c0       	rjmp	.+0      	; 0xd04 <main+0x44>
     d04:	00 00       	nop
    _delay_ms(2000);
    
    // Inicializar VL53L0X
    LCD8_Clear();
     d06:	0e 94 3d 03 	call	0x67a	; 0x67a <LCD8_Clear>
    LCD8_Set_Cursor(0, 0);
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	0e 94 31 03 	call	0x662	; 0x662 <LCD8_Set_Cursor>
    LCD8_Write_String("Init VL53L0X...");
     d12:	88 e9       	ldi	r24, 0x98	; 152
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	0e 94 1b 03 	call	0x636	; 0x636 <LCD8_Write_String>
    
    if (VL53L0X_Init()) {
     d1a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <VL53L0X_Init>
     d1e:	88 23       	and	r24, r24
     d20:	61 f0       	breq	.+24     	; 0xd3a <main+0x7a>
        LCD8_Set_Cursor(0, 1);
     d22:	61 e0       	ldi	r22, 0x01	; 1
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	0e 94 31 03 	call	0x662	; 0x662 <LCD8_Set_Cursor>
        LCD8_Write_String("VL53L0X OK!");
     d2a:	88 ea       	ldi	r24, 0xA8	; 168
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	0e 94 1b 03 	call	0x636	; 0x636 <LCD8_Write_String>
        vl53_status.device_available = 1;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <vl53_status+0x2>
     d38:	0a c0       	rjmp	.+20     	; 0xd4e <main+0x8e>
    } else {
        LCD8_Set_Cursor(0, 1);
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	0e 94 31 03 	call	0x662	; 0x662 <LCD8_Set_Cursor>
        LCD8_Write_String("VL53L0X ERROR!");
     d42:	84 eb       	ldi	r24, 0xB4	; 180
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	0e 94 1b 03 	call	0x636	; 0x636 <LCD8_Write_String>
        vl53_status.device_available = 0;
     d4a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <vl53_status+0x2>
     d4e:	2f ef       	ldi	r18, 0xFF	; 255
     d50:	8d e3       	ldi	r24, 0x3D	; 61
     d52:	99 e4       	ldi	r25, 0x49	; 73
     d54:	21 50       	subi	r18, 0x01	; 1
     d56:	80 40       	sbci	r24, 0x00	; 0
     d58:	90 40       	sbci	r25, 0x00	; 0
     d5a:	e1 f7       	brne	.-8      	; 0xd54 <main+0x94>
     d5c:	00 c0       	rjmp	.+0      	; 0xd5e <main+0x9e>
     d5e:	00 00       	nop
    }
    
    _delay_ms(1500);
    
    // Detectar dispositivos disponibles en el bus
    LCD8_Clear();
     d60:	0e 94 3d 03 	call	0x67a	; 0x67a <LCD8_Clear>
    LCD8_Set_Cursor(0, 0);
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	0e 94 31 03 	call	0x662	; 0x662 <LCD8_Set_Cursor>
    LCD8_Write_String("Detectando I2C...");
     d6c:	83 ec       	ldi	r24, 0xC3	; 195
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	0e 94 1b 03 	call	0x636	; 0x636 <LCD8_Write_String>
    
    check_device_availability(SLAVE_TCS3200, &tcs_status);
     d74:	67 e0       	ldi	r22, 0x07	; 7
     d76:	71 e0       	ldi	r23, 0x01	; 1
     d78:	80 e2       	ldi	r24, 0x20	; 32
     d7a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <check_device_availability>
    check_device_availability(SLAVE_BANDA, &banda_status);
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	71 e0       	ldi	r23, 0x01	; 1
     d82:	80 e3       	ldi	r24, 0x30	; 48
     d84:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <check_device_availability>
    
    LCD8_Set_Cursor(0, 1);
     d88:	61 e0       	ldi	r22, 0x01	; 1
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	0e 94 31 03 	call	0x662	; 0x662 <LCD8_Set_Cursor>
    sprintf(buffer, "TCS:%d BANDA:%d", 
            tcs_status.device_available, 
            banda_status.device_available);
     d90:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    check_device_availability(SLAVE_TCS3200, &tcs_status);
    check_device_availability(SLAVE_BANDA, &banda_status);
    
    LCD8_Set_Cursor(0, 1);
    sprintf(buffer, "TCS:%d BANDA:%d", 
            tcs_status.device_available, 
     d94:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tcs_status+0x2>
    
    check_device_availability(SLAVE_TCS3200, &tcs_status);
    check_device_availability(SLAVE_BANDA, &banda_status);
    
    LCD8_Set_Cursor(0, 1);
    sprintf(buffer, "TCS:%d BANDA:%d", 
     d98:	1f 92       	push	r1
     d9a:	9f 93       	push	r25
     d9c:	1f 92       	push	r1
     d9e:	8f 93       	push	r24
     da0:	85 ed       	ldi	r24, 0xD5	; 213
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	9f 93       	push	r25
     da6:	8f 93       	push	r24
     da8:	86 ef       	ldi	r24, 0xF6	; 246
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	9f 93       	push	r25
     dae:	8f 93       	push	r24
     db0:	0e 94 9a 09 	call	0x1334	; 0x1334 <sprintf>
            tcs_status.device_available, 
            banda_status.device_available);
    LCD8_Write_String(buffer);
     db4:	86 ef       	ldi	r24, 0xF6	; 246
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	0e 94 1b 03 	call	0x636	; 0x636 <LCD8_Write_String>
     dbc:	2f ef       	ldi	r18, 0xFF	; 255
     dbe:	87 ea       	ldi	r24, 0xA7	; 167
     dc0:	91 e6       	ldi	r25, 0x61	; 97
     dc2:	21 50       	subi	r18, 0x01	; 1
     dc4:	80 40       	sbci	r24, 0x00	; 0
     dc6:	90 40       	sbci	r25, 0x00	; 0
     dc8:	e1 f7       	brne	.-8      	; 0xdc2 <main+0x102>
     dca:	00 c0       	rjmp	.+0      	; 0xdcc <main+0x10c>
     dcc:	00 00       	nop
    _delay_ms(2000);
    
    LCD8_Clear();
     dce:	0e 94 3d 03 	call	0x67a	; 0x67a <LCD8_Clear>
     dd2:	8d b7       	in	r24, 0x3d	; 61
     dd4:	9e b7       	in	r25, 0x3e	; 62
     dd6:	08 96       	adiw	r24, 0x08	; 8
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	9e bf       	out	0x3e, r25	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	8d bf       	out	0x3d, r24	; 61
    
    uint8_t cycle_counter = 0;
     de2:	c0 e0       	ldi	r28, 0x00	; 0
    
    // Loop principal
    while (1) {
        update_system_tick();
     de4:	0e 94 47 03 	call	0x68e	; 0x68e <update_system_tick>
        
        // ========== SENSOR DE DISTANCIA ==========
        distance = Read_VL53L0X_Distance();
     de8:	0e 94 30 05 	call	0xa60	; 0xa60 <Read_VL53L0X_Distance>
     dec:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <distance+0x1>
     df0:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <distance>
        
        // ========== SENSOR DE COLOR (cada 3 ciclos) ==========
        if (cycle_counter % 3 == 0) {
     df4:	8b ea       	ldi	r24, 0xAB	; 171
     df6:	c8 9f       	mul	r28, r24
     df8:	81 2d       	mov	r24, r1
     dfa:	11 24       	eor	r1, r1
     dfc:	86 95       	lsr	r24
     dfe:	98 2f       	mov	r25, r24
     e00:	99 0f       	add	r25, r25
     e02:	89 0f       	add	r24, r25
     e04:	c8 13       	cpse	r28, r24
     e06:	06 c0       	rjmp	.+12     	; 0xe14 <main+0x154>
            uint8_t new_color = Read_TCS3200_Color();
     e08:	0e 94 b3 03 	call	0x766	; 0x766 <Read_TCS3200_Color>
            if (new_color != 0xFF) {
     e0c:	8f 3f       	cpi	r24, 0xFF	; 255
     e0e:	11 f0       	breq	.+4      	; 0xe14 <main+0x154>
                color_code = new_color;
     e10:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <color_code>
            }
        }
        
        // ========== PESO DE BANDA (cada 5 ciclos) ==========
        if (cycle_counter % 5 == 0) {
     e14:	8d ec       	ldi	r24, 0xCD	; 205
     e16:	c8 9f       	mul	r28, r24
     e18:	81 2d       	mov	r24, r1
     e1a:	11 24       	eor	r1, r1
     e1c:	86 95       	lsr	r24
     e1e:	86 95       	lsr	r24
     e20:	98 2f       	mov	r25, r24
     e22:	99 0f       	add	r25, r25
     e24:	99 0f       	add	r25, r25
     e26:	89 0f       	add	r24, r25
     e28:	c8 13       	cpse	r28, r24
     e2a:	13 c0       	rjmp	.+38     	; 0xe52 <main+0x192>
            float new_weight = Read_Banda_Weight();
     e2c:	0e 94 4e 04 	call	0x89c	; 0x89c <Read_Banda_Weight>
     e30:	6b 01       	movw	r12, r22
     e32:	7c 01       	movw	r14, r24
            if (new_weight >= 0) {
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	a9 01       	movw	r20, r18
     e3a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__gesf2>
     e3e:	88 23       	and	r24, r24
     e40:	44 f0       	brlt	.+16     	; 0xe52 <main+0x192>
                current_weight = new_weight;
     e42:	c0 92 ec 01 	sts	0x01EC, r12	; 0x8001ec <current_weight>
     e46:	d0 92 ed 01 	sts	0x01ED, r13	; 0x8001ed <current_weight+0x1>
     e4a:	e0 92 ee 01 	sts	0x01EE, r14	; 0x8001ee <current_weight+0x2>
     e4e:	f0 92 ef 01 	sts	0x01EF, r15	; 0x8001ef <current_weight+0x3>
            }
        }
        
        // ========== VERIFICAR DISPOSITIVOS (cada 20 ciclos) ==========
        if (cycle_counter % 20 == 0) {
     e52:	8d ec       	ldi	r24, 0xCD	; 205
     e54:	c8 9f       	mul	r28, r24
     e56:	81 2d       	mov	r24, r1
     e58:	11 24       	eor	r1, r1
     e5a:	82 95       	swap	r24
     e5c:	8f 70       	andi	r24, 0x0F	; 15
     e5e:	88 0f       	add	r24, r24
     e60:	88 0f       	add	r24, r24
     e62:	98 2f       	mov	r25, r24
     e64:	99 0f       	add	r25, r25
     e66:	99 0f       	add	r25, r25
     e68:	89 0f       	add	r24, r25
     e6a:	c8 13       	cpse	r28, r24
     e6c:	12 c0       	rjmp	.+36     	; 0xe92 <main+0x1d2>
            // Verificar dispositivos no disponibles
            if (!tcs_status.device_available) {
     e6e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tcs_status+0x2>
     e72:	81 11       	cpse	r24, r1
     e74:	05 c0       	rjmp	.+10     	; 0xe80 <main+0x1c0>
                check_device_availability(SLAVE_TCS3200, &tcs_status);
     e76:	67 e0       	ldi	r22, 0x07	; 7
     e78:	71 e0       	ldi	r23, 0x01	; 1
     e7a:	80 e2       	ldi	r24, 0x20	; 32
     e7c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <check_device_availability>
            }
            if (!banda_status.device_available) {
     e80:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     e84:	81 11       	cpse	r24, r1
     e86:	05 c0       	rjmp	.+10     	; 0xe92 <main+0x1d2>
                check_device_availability(SLAVE_BANDA, &banda_status);
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	71 e0       	ldi	r23, 0x01	; 1
     e8c:	80 e3       	ldi	r24, 0x30	; 48
     e8e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <check_device_availability>
            }
        }
        
        // ========== ACTUALIZAR DISPLAY ==========
        Update_LCD_Display();
     e92:	0e 94 73 05 	call	0xae6	; 0xae6 <Update_LCD_Display>
        
        // Control de ciclo
        cycle_counter++;
     e96:	cf 5f       	subi	r28, 0xFF	; 255
        if (cycle_counter >= 60) cycle_counter = 0;
     e98:	cc 33       	cpi	r28, 0x3C	; 60
     e9a:	08 f0       	brcs	.+2      	; 0xe9e <main+0x1de>
     e9c:	c0 e0       	ldi	r28, 0x00	; 0
     e9e:	9f ef       	ldi	r25, 0xFF	; 255
     ea0:	22 e5       	ldi	r18, 0x52	; 82
     ea2:	87 e0       	ldi	r24, 0x07	; 7
     ea4:	91 50       	subi	r25, 0x01	; 1
     ea6:	20 40       	sbci	r18, 0x00	; 0
     ea8:	80 40       	sbci	r24, 0x00	; 0
     eaa:	e1 f7       	brne	.-8      	; 0xea4 <main+0x1e4>
     eac:	00 c0       	rjmp	.+0      	; 0xeae <main+0x1ee>
     eae:	00 00       	nop
     eb0:	99 cf       	rjmp	.-206    	; 0xde4 <main+0x124>

00000eb2 <VL53L0X_ReadByte>:
    last_error = VL53L0X_ERROR_I2C;
    return 0; // Error
}

// Función mejorada para leer byte con validación
uint8_t VL53L0X_ReadByte(uint8_t reg) {
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	d8 2f       	mov	r29, r24
    uint8_t data;
    uint8_t retry_count = 0;
     eb8:	c0 e0       	ldi	r28, 0x00	; 0
    
    while (retry_count < 3) {
     eba:	12 c0       	rjmp	.+36     	; 0xee0 <VL53L0X_ReadByte+0x2e>
        data = I2C_ReadRegister(VL53L0X_ADDRESS, reg);
     ebc:	6d 2f       	mov	r22, r29
     ebe:	89 e2       	ldi	r24, 0x29	; 41
     ec0:	0e 94 ae 01 	call	0x35c	; 0x35c <I2C_ReadRegister>
        
        // Validar respuesta básica (no debe ser siempre 0xFF)
        if (data != 0xFF || retry_count == 2) {
     ec4:	8f 3f       	cpi	r24, 0xFF	; 255
     ec6:	11 f4       	brne	.+4      	; 0xecc <VL53L0X_ReadByte+0x1a>
     ec8:	c2 30       	cpi	r28, 0x02	; 2
     eca:	19 f4       	brne	.+6      	; 0xed2 <VL53L0X_ReadByte+0x20>
            // En el último intento, aceptar cualquier valor
            consecutive_errors = 0;
     ecc:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <consecutive_errors>
            return data;
     ed0:	12 c0       	rjmp	.+36     	; 0xef6 <VL53L0X_ReadByte+0x44>
        }
        
        retry_count++;
     ed2:	cf 5f       	subi	r28, 0xFF	; 255
     ed4:	83 ec       	ldi	r24, 0xC3	; 195
     ed6:	99 e0       	ldi	r25, 0x09	; 9
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <VL53L0X_ReadByte+0x26>
     edc:	00 c0       	rjmp	.+0      	; 0xede <VL53L0X_ReadByte+0x2c>
     ede:	00 00       	nop
// Función mejorada para leer byte con validación
uint8_t VL53L0X_ReadByte(uint8_t reg) {
    uint8_t data;
    uint8_t retry_count = 0;
    
    while (retry_count < 3) {
     ee0:	c3 30       	cpi	r28, 0x03	; 3
     ee2:	60 f3       	brcs	.-40     	; 0xebc <VL53L0X_ReadByte+0xa>
        
        retry_count++;
        _delay_ms(10);
    }
    
    consecutive_errors++;
     ee4:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <consecutive_errors>
     ee8:	8f 5f       	subi	r24, 0xFF	; 255
     eea:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <consecutive_errors>
    last_error = VL53L0X_ERROR_I2C;
     eee:	82 e0       	ldi	r24, 0x02	; 2
     ef0:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <last_error>
    return 0xFF; // Error
     ef4:	8f ef       	ldi	r24, 0xFF	; 255
}
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <VL53L0X_WriteByte>:
    
    return 1; // Válido
}

// Función mejorada para escribir byte con validación
uint8_t VL53L0X_WriteByte(uint8_t reg, uint8_t data) {
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	d8 2f       	mov	r29, r24
     f04:	16 2f       	mov	r17, r22
    uint8_t result;
    uint8_t retry_count = 0;
     f06:	c0 e0       	ldi	r28, 0x00	; 0
    
    while (retry_count < 3) {
     f08:	1b c0       	rjmp	.+54     	; 0xf40 <VL53L0X_WriteByte+0x44>
        result = I2C_WriteRegister(VL53L0X_ADDRESS, reg, data);
     f0a:	41 2f       	mov	r20, r17
     f0c:	6d 2f       	mov	r22, r29
     f0e:	89 e2       	ldi	r24, 0x29	; 41
     f10:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_WriteRegister>
        
        if (result == 0) {
     f14:	81 11       	cpse	r24, r1
     f16:	0d c0       	rjmp	.+26     	; 0xf32 <VL53L0X_WriteByte+0x36>
            // Verificar que se escribió correctamente leyendo de vuelta
            uint8_t read_back = VL53L0X_ReadByte(reg);
     f18:	8d 2f       	mov	r24, r29
     f1a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <VL53L0X_ReadByte>
            if (read_back == data || reg == VL53L0X_REG_SYSRANGE_START) {
     f1e:	18 17       	cp	r17, r24
     f20:	11 f0       	breq	.+4      	; 0xf26 <VL53L0X_WriteByte+0x2a>
     f22:	d1 11       	cpse	r29, r1
     f24:	06 c0       	rjmp	.+12     	; 0xf32 <VL53L0X_WriteByte+0x36>
                // Algunos registros no se pueden leer de vuelta (como SYSRANGE_START)
                consecutive_errors = 0;
     f26:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <consecutive_errors>
                last_error = VL53L0X_ERROR_NONE;
     f2a:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <last_error>
                return 1; // Éxito
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	12 c0       	rjmp	.+36     	; 0xf56 <VL53L0X_WriteByte+0x5a>
            }
        }
        
        retry_count++;
     f32:	cf 5f       	subi	r28, 0xFF	; 255
     f34:	83 ec       	ldi	r24, 0xC3	; 195
     f36:	99 e0       	ldi	r25, 0x09	; 9
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <VL53L0X_WriteByte+0x3c>
     f3c:	00 c0       	rjmp	.+0      	; 0xf3e <VL53L0X_WriteByte+0x42>
     f3e:	00 00       	nop
// Función mejorada para escribir byte con validación
uint8_t VL53L0X_WriteByte(uint8_t reg, uint8_t data) {
    uint8_t result;
    uint8_t retry_count = 0;
    
    while (retry_count < 3) {
     f40:	c3 30       	cpi	r28, 0x03	; 3
     f42:	18 f3       	brcs	.-58     	; 0xf0a <VL53L0X_WriteByte+0xe>
        
        retry_count++;
        _delay_ms(10);
    }
    
    consecutive_errors++;
     f44:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <consecutive_errors>
     f48:	8f 5f       	subi	r24, 0xFF	; 255
     f4a:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <consecutive_errors>
    last_error = VL53L0X_ERROR_I2C;
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <last_error>
    return 0; // Error
     f54:	80 e0       	ldi	r24, 0x00	; 0
}
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	08 95       	ret

00000f5e <configure_sensor>:
    sensor_initialized = 0;
    return 0;
}

// Función auxiliar para configurar el sensor
static uint8_t configure_sensor(void) {
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	68 97       	sbiw	r28, 0x18	; 24
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
    // Secuencia de configuración del VL53L0X
    const struct {
        uint8_t reg;
        uint8_t value;
    } config_sequence[] = {
     f74:	88 e1       	ldi	r24, 0x18	; 24
     f76:	e5 e1       	ldi	r30, 0x15	; 21
     f78:	f1 e0       	ldi	r31, 0x01	; 1
     f7a:	de 01       	movw	r26, r28
     f7c:	11 96       	adiw	r26, 0x01	; 1
     f7e:	01 90       	ld	r0, Z+
     f80:	0d 92       	st	X+, r0
     f82:	8a 95       	dec	r24
     f84:	e1 f7       	brne	.-8      	; 0xf7e <configure_sensor+0x20>
        {VL53L0X_REG_SYSRANGE_START, 0x02}
    };
    
    const uint8_t config_length = sizeof(config_sequence) / sizeof(config_sequence[0]);
    
    for (uint8_t i = 0; i < config_length; i++) {
     f86:	10 e0       	ldi	r17, 0x00	; 0
     f88:	17 c0       	rjmp	.+46     	; 0xfb8 <configure_sensor+0x5a>
        if (!VL53L0X_WriteByte(config_sequence[i].reg, config_sequence[i].value)) {
     f8a:	e1 2f       	mov	r30, r17
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	ee 0f       	add	r30, r30
     f90:	ff 1f       	adc	r31, r31
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	8c 0f       	add	r24, r28
     f98:	9d 1f       	adc	r25, r29
     f9a:	e8 0f       	add	r30, r24
     f9c:	f9 1f       	adc	r31, r25
     f9e:	61 81       	ldd	r22, Z+1	; 0x01
     fa0:	80 81       	ld	r24, Z
     fa2:	0e 94 7e 07 	call	0xefc	; 0xefc <VL53L0X_WriteByte>
     fa6:	88 23       	and	r24, r24
     fa8:	51 f0       	breq	.+20     	; 0xfbe <configure_sensor+0x60>
     faa:	89 ef       	ldi	r24, 0xF9	; 249
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <configure_sensor+0x50>
     fb2:	00 c0       	rjmp	.+0      	; 0xfb4 <configure_sensor+0x56>
     fb4:	00 00       	nop
        {VL53L0X_REG_SYSRANGE_START, 0x02}
    };
    
    const uint8_t config_length = sizeof(config_sequence) / sizeof(config_sequence[0]);
    
    for (uint8_t i = 0; i < config_length; i++) {
     fb6:	1f 5f       	subi	r17, 0xFF	; 255
     fb8:	1c 30       	cpi	r17, 0x0C	; 12
     fba:	38 f3       	brcs	.-50     	; 0xf8a <configure_sensor+0x2c>
            return 0; // Error en configuración
        }
        _delay_ms(1); // Pequeña pausa entre escrituras
    }
    
    return 1; // Configuración exitosa
     fbc:	81 e0       	ldi	r24, 0x01	; 1
}
     fbe:	68 96       	adiw	r28, 0x18	; 24
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	08 95       	ret

00000fd2 <VL53L0X_Init>:
    last_error = VL53L0X_ERROR_I2C;
    return 0xFF; // Error
}

// Inicialización robusta del sensor
uint8_t VL53L0X_Init(void) {
     fd2:	cf 93       	push	r28
    uint8_t model_id;
    uint8_t retry_count = 0;
    
    last_error = VL53L0X_ERROR_NONE;
     fd4:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <last_error>
    consecutive_errors = 0;
     fd8:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <consecutive_errors>
    sensor_initialized = 0;
     fdc:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <sensor_initialized>
}

// Inicialización robusta del sensor
uint8_t VL53L0X_Init(void) {
    uint8_t model_id;
    uint8_t retry_count = 0;
     fe0:	c0 e0       	ldi	r28, 0x00	; 0
    last_error = VL53L0X_ERROR_NONE;
    consecutive_errors = 0;
    sensor_initialized = 0;
    
    // Intentar inicialización hasta 3 veces
    while (retry_count < 3) {
     fe2:	22 c0       	rjmp	.+68     	; 0x1028 <VL53L0X_Init+0x56>
     fe4:	83 ed       	ldi	r24, 0xD3	; 211
     fe6:	90 e3       	ldi	r25, 0x30	; 48
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <VL53L0X_Init+0x16>
     fec:	00 c0       	rjmp	.+0      	; 0xfee <VL53L0X_Init+0x1c>
     fee:	00 00       	nop
        _delay_ms(50); // Pausa antes de cada intento
        
        // Verificar comunicación leyendo el ID del modelo
        model_id = VL53L0X_ReadByte(VL53L0X_REG_IDENTIFICATION_MODEL_ID);
     ff0:	80 ec       	ldi	r24, 0xC0	; 192
     ff2:	0e 94 59 07 	call	0xeb2	; 0xeb2 <VL53L0X_ReadByte>
        
        if (model_id == 0xEE) {
     ff6:	8e 3e       	cpi	r24, 0xEE	; 238
     ff8:	61 f4       	brne	.+24     	; 0x1012 <VL53L0X_Init+0x40>
            // Sensor encontrado, proceder con configuración
            if (configure_sensor()) {
     ffa:	0e 94 af 07 	call	0xf5e	; 0xf5e <configure_sensor>
     ffe:	88 23       	and	r24, r24
    1000:	41 f0       	breq	.+16     	; 0x1012 <VL53L0X_Init+0x40>
                sensor_initialized = 1;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <sensor_initialized>
                consecutive_errors = 0;
    1008:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <consecutive_errors>
                last_error = VL53L0X_ERROR_NONE;
    100c:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <last_error>
                return 1; // Éxito
    1010:	13 c0       	rjmp	.+38     	; 0x1038 <VL53L0X_Init+0x66>
            }
        }
        
        retry_count++;
    1012:	cf 5f       	subi	r28, 0xFF	; 255
        
        // Si no es el último intento, hacer reset del I2C
        if (retry_count < 3) {
    1014:	c3 30       	cpi	r28, 0x03	; 3
    1016:	40 f4       	brcc	.+16     	; 0x1028 <VL53L0X_Init+0x56>
            I2C_ForceRecovery();
    1018:	0e 94 93 02 	call	0x526	; 0x526 <I2C_ForceRecovery>
    101c:	87 ea       	ldi	r24, 0xA7	; 167
    101e:	91 e6       	ldi	r25, 0x61	; 97
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <VL53L0X_Init+0x4e>
    1024:	00 c0       	rjmp	.+0      	; 0x1026 <VL53L0X_Init+0x54>
    1026:	00 00       	nop
    last_error = VL53L0X_ERROR_NONE;
    consecutive_errors = 0;
    sensor_initialized = 0;
    
    // Intentar inicialización hasta 3 veces
    while (retry_count < 3) {
    1028:	c3 30       	cpi	r28, 0x03	; 3
    102a:	e0 f2       	brcs	.-72     	; 0xfe4 <VL53L0X_Init+0x12>
            _delay_ms(100);
        }
    }
    
    // Error después de todos los intentos
    last_error = VL53L0X_ERROR_INIT;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <last_error>
    sensor_initialized = 0;
    1032:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <sensor_initialized>
    return 0;
    1036:	80 e0       	ldi	r24, 0x00	; 0
}
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

0000103c <VL53L0X_StartMeasurement>:
    return 1; // Configuración exitosa
}

// Función mejorada para iniciar medición
void VL53L0X_StartMeasurement(void) {
    if (!sensor_initialized) {
    103c:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <sensor_initialized>
    1040:	81 11       	cpse	r24, r1
    1042:	04 c0       	rjmp	.+8      	; 0x104c <VL53L0X_StartMeasurement+0x10>
        // Intentar reinicializar si es necesario
        if (!VL53L0X_Init()) {
    1044:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <VL53L0X_Init>
    1048:	88 23       	and	r24, r24
    104a:	41 f0       	breq	.+16     	; 0x105c <VL53L0X_StartMeasurement+0x20>
            return;
        }
    }
    
    // Limpiar cualquier medición previa
    VL53L0X_WriteByte(VL53L0X_REG_RESULT_INTERRUPT_STATUS, 0x01);
    104c:	61 e0       	ldi	r22, 0x01	; 1
    104e:	83 e1       	ldi	r24, 0x13	; 19
    1050:	0e 94 7e 07 	call	0xefc	; 0xefc <VL53L0X_WriteByte>
    
    // Iniciar nueva medición
    VL53L0X_WriteByte(VL53L0X_REG_SYSRANGE_START, 0x01);
    1054:	61 e0       	ldi	r22, 0x01	; 1
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	0e 94 7e 07 	call	0xefc	; 0xefc <VL53L0X_WriteByte>
    105c:	08 95       	ret

0000105e <VL53L0X_DataReady>:
}

// Función mejorada para verificar si los datos están listos
uint8_t VL53L0X_DataReady(void) {
    if (!sensor_initialized) return 0;
    105e:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <sensor_initialized>
    1062:	88 23       	and	r24, r24
    1064:	21 f0       	breq	.+8      	; 0x106e <VL53L0X_DataReady+0x10>
    
    uint8_t status = VL53L0X_ReadByte(VL53L0X_REG_RESULT_RANGE_STATUS);
    1066:	84 e1       	ldi	r24, 0x14	; 20
    1068:	0e 94 59 07 	call	0xeb2	; 0xeb2 <VL53L0X_ReadByte>
    
    // Verificar bit de datos listos
    return (status & 0x01) != 0;
    106c:	81 70       	andi	r24, 0x01	; 1
}
    106e:	08 95       	ret

00001070 <VL53L0X_ReadDistance>:

// Función principal mejorada para leer distancia
uint16_t VL53L0X_ReadDistance(void) {
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	00 d0       	rcall	.+0      	; 0x107a <VL53L0X_ReadDistance+0xa>
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    uint16_t distance = 0;
    uint16_t timeout_ms = 0;
    const uint16_t MAX_TIMEOUT_MS = 200; // Timeout aumentado pero limitado
    
    last_error = VL53L0X_ERROR_NONE;
    107e:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <last_error>
    
    if (!sensor_initialized) {
    1082:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <sensor_initialized>
    1086:	81 11       	cpse	r24, r1
    1088:	32 c0       	rjmp	.+100    	; 0x10ee <VL53L0X_ReadDistance+0x7e>
        last_error = VL53L0X_ERROR_INIT;
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <last_error>
        return 0xFFFF;
    1090:	8f ef       	ldi	r24, 0xFF	; 255
    1092:	9f ef       	ldi	r25, 0xFF	; 255
    1094:	87 c0       	rjmp	.+270    	; 0x11a4 <VL53L0X_ReadDistance+0x134>
    1096:	89 ef       	ldi	r24, 0xF9	; 249
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	f1 f7       	brne	.-4      	; 0x109a <VL53L0X_ReadDistance+0x2a>
    109e:	00 c0       	rjmp	.+0      	; 0x10a0 <VL53L0X_ReadDistance+0x30>
    10a0:	00 00       	nop
    }
    
    // Esperar datos listos con timeout
    while (!VL53L0X_DataReady() && timeout_ms < MAX_TIMEOUT_MS) {
        _delay_ms(1);
        timeout_ms++;
    10a2:	0f 5f       	subi	r16, 0xFF	; 255
    10a4:	1f 4f       	sbci	r17, 0xFF	; 255
        
        // Verificar cada 50ms si el sensor sigue respondiendo
        if (timeout_ms % 50 == 0) {
    10a6:	98 01       	movw	r18, r16
    10a8:	36 95       	lsr	r19
    10aa:	27 95       	ror	r18
    10ac:	ab e7       	ldi	r26, 0x7B	; 123
    10ae:	b4 e1       	ldi	r27, 0x14	; 20
    10b0:	0e 94 8b 09 	call	0x1316	; 0x1316 <__umulhisi3>
    10b4:	96 95       	lsr	r25
    10b6:	87 95       	ror	r24
    10b8:	42 e3       	ldi	r20, 0x32	; 50
    10ba:	48 9f       	mul	r20, r24
    10bc:	90 01       	movw	r18, r0
    10be:	49 9f       	mul	r20, r25
    10c0:	30 0d       	add	r19, r0
    10c2:	11 24       	eor	r1, r1
    10c4:	02 17       	cp	r16, r18
    10c6:	13 07       	cpc	r17, r19
    10c8:	a1 f4       	brne	.+40     	; 0x10f2 <VL53L0X_ReadDistance+0x82>
            uint8_t test_read = VL53L0X_ReadByte(VL53L0X_REG_IDENTIFICATION_MODEL_ID);
    10ca:	80 ec       	ldi	r24, 0xC0	; 192
    10cc:	0e 94 59 07 	call	0xeb2	; 0xeb2 <VL53L0X_ReadByte>
            if (test_read != 0xEE && test_read != 0xFF) {
    10d0:	8e 3e       	cpi	r24, 0xEE	; 238
    10d2:	79 f0       	breq	.+30     	; 0x10f2 <VL53L0X_ReadDistance+0x82>
    10d4:	8f 3f       	cpi	r24, 0xFF	; 255
    10d6:	69 f0       	breq	.+26     	; 0x10f2 <VL53L0X_ReadDistance+0x82>
                // Sensor no responde correctamente
                last_error = VL53L0X_ERROR_I2C;
    10d8:	82 e0       	ldi	r24, 0x02	; 2
    10da:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <last_error>
                consecutive_errors++;
    10de:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <consecutive_errors>
    10e2:	8f 5f       	subi	r24, 0xFF	; 255
    10e4:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <consecutive_errors>
                return 0xFFFF;
    10e8:	8f ef       	ldi	r24, 0xFF	; 255
    10ea:	9f ef       	ldi	r25, 0xFF	; 255
    10ec:	5b c0       	rjmp	.+182    	; 0x11a4 <VL53L0X_ReadDistance+0x134>
    10ee:	00 e0       	ldi	r16, 0x00	; 0
    10f0:	10 e0       	ldi	r17, 0x00	; 0
        last_error = VL53L0X_ERROR_INIT;
        return 0xFFFF;
    }
    
    // Esperar datos listos con timeout
    while (!VL53L0X_DataReady() && timeout_ms < MAX_TIMEOUT_MS) {
    10f2:	0e 94 2f 08 	call	0x105e	; 0x105e <VL53L0X_DataReady>
    10f6:	81 11       	cpse	r24, r1
    10f8:	03 c0       	rjmp	.+6      	; 0x1100 <VL53L0X_ReadDistance+0x90>
    10fa:	08 3c       	cpi	r16, 0xC8	; 200
    10fc:	11 05       	cpc	r17, r1
    10fe:	58 f2       	brcs	.-106    	; 0x1096 <VL53L0X_ReadDistance+0x26>
                return 0xFFFF;
            }
        }
    }
    
    if (timeout_ms >= MAX_TIMEOUT_MS) {
    1100:	08 3c       	cpi	r16, 0xC8	; 200
    1102:	11 05       	cpc	r17, r1
    1104:	80 f0       	brcs	.+32     	; 0x1126 <VL53L0X_ReadDistance+0xb6>
        last_error = VL53L0X_ERROR_TIMEOUT;
    1106:	83 e0       	ldi	r24, 0x03	; 3
    1108:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <last_error>
        consecutive_errors++;
    110c:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <consecutive_errors>
    1110:	8f 5f       	subi	r24, 0xFF	; 255
    1112:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <consecutive_errors>
        
        // Si hay muchos timeouts consecutivos, reinicializar
        if (consecutive_errors > 5) {
    1116:	86 30       	cpi	r24, 0x06	; 6
    1118:	08 f4       	brcc	.+2      	; 0x111c <VL53L0X_ReadDistance+0xac>
    111a:	42 c0       	rjmp	.+132    	; 0x11a0 <VL53L0X_ReadDistance+0x130>
            sensor_initialized = 0;
    111c:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <sensor_initialized>
        }
        
        return 0xFFFF;
    1120:	8f ef       	ldi	r24, 0xFF	; 255
    1122:	9f ef       	ldi	r25, 0xFF	; 255
    1124:	3f c0       	rjmp	.+126    	; 0x11a4 <VL53L0X_ReadDistance+0x134>
    }
    
    // Leer distancia usando función robusta
    uint8_t distance_bytes[2];
    uint8_t bytes_read = I2C_ReadMultiple(VL53L0X_ADDRESS, 
    1126:	22 e0       	ldi	r18, 0x02	; 2
    1128:	ae 01       	movw	r20, r28
    112a:	4f 5f       	subi	r20, 0xFF	; 255
    112c:	5f 4f       	sbci	r21, 0xFF	; 255
    112e:	6e e1       	ldi	r22, 0x1E	; 30
    1130:	89 e2       	ldi	r24, 0x29	; 41
    1132:	0e 94 f5 01 	call	0x3ea	; 0x3ea <I2C_ReadMultiple>
                                          VL53L0X_REG_RESULT_RANGE_VAL, 
                                          distance_bytes, 2);
    
    if (bytes_read == 2) {
    1136:	82 30       	cpi	r24, 0x02	; 2
    1138:	09 f5       	brne	.+66     	; 0x117c <VL53L0X_ReadDistance+0x10c>
        distance = (distance_bytes[0] << 8) | distance_bytes[1];
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	98 2f       	mov	r25, r24
    1140:	88 27       	eor	r24, r24
    1142:	2a 81       	ldd	r18, Y+2	; 0x02
    1144:	82 2b       	or	r24, r18
    1146:	8c 01       	movw	r16, r24
        
        // Validar rango de distancia (VL53L0X: 30mm - 2000mm típicamente)
        if (distance > 0 && distance <= 2000) {
    1148:	01 97       	sbiw	r24, 0x01	; 1
    114a:	80 3d       	cpi	r24, 0xD0	; 208
    114c:	97 40       	sbci	r25, 0x07	; 7
    114e:	18 f4       	brcc	.+6      	; 0x1156 <VL53L0X_ReadDistance+0xe6>
            consecutive_errors = 0;
    1150:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <consecutive_errors>
    1154:	1e c0       	rjmp	.+60     	; 0x1192 <VL53L0X_ReadDistance+0x122>
        } else if (distance > 2000) {
    1156:	01 3d       	cpi	r16, 0xD1	; 209
    1158:	17 40       	sbci	r17, 0x07	; 7
    115a:	28 f0       	brcs	.+10     	; 0x1166 <VL53L0X_ReadDistance+0xf6>
            // Distancia fuera de rango, pero sensor funciona
            distance = 2000; // Clampear al máximo
            consecutive_errors = 0;
    115c:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <consecutive_errors>
        // Validar rango de distancia (VL53L0X: 30mm - 2000mm típicamente)
        if (distance > 0 && distance <= 2000) {
            consecutive_errors = 0;
        } else if (distance > 2000) {
            // Distancia fuera de rango, pero sensor funciona
            distance = 2000; // Clampear al máximo
    1160:	00 ed       	ldi	r16, 0xD0	; 208
    1162:	17 e0       	ldi	r17, 0x07	; 7
    1164:	16 c0       	rjmp	.+44     	; 0x1192 <VL53L0X_ReadDistance+0x122>
            consecutive_errors = 0;
        } else {
            // Distancia = 0, posible error
            last_error = VL53L0X_ERROR_RANGE;
    1166:	84 e0       	ldi	r24, 0x04	; 4
    1168:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <last_error>
            consecutive_errors++;
    116c:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <consecutive_errors>
    1170:	8f 5f       	subi	r24, 0xFF	; 255
    1172:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <consecutive_errors>
            return 0xFFFF;
    1176:	8f ef       	ldi	r24, 0xFF	; 255
    1178:	9f ef       	ldi	r25, 0xFF	; 255
    117a:	14 c0       	rjmp	.+40     	; 0x11a4 <VL53L0X_ReadDistance+0x134>
        }
    } else {
        last_error = VL53L0X_ERROR_I2C;
    117c:	82 e0       	ldi	r24, 0x02	; 2
    117e:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <last_error>
        consecutive_errors++;
    1182:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <consecutive_errors>
    1186:	8f 5f       	subi	r24, 0xFF	; 255
    1188:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <consecutive_errors>
        return 0xFFFF;
    118c:	8f ef       	ldi	r24, 0xFF	; 255
    118e:	9f ef       	ldi	r25, 0xFF	; 255
    1190:	09 c0       	rjmp	.+18     	; 0x11a4 <VL53L0X_ReadDistance+0x134>
    }
    
    // Limpiar flag de interrupción para próxima medición
    VL53L0X_WriteByte(VL53L0X_REG_RESULT_INTERRUPT_STATUS, 0x01);
    1192:	61 e0       	ldi	r22, 0x01	; 1
    1194:	83 e1       	ldi	r24, 0x13	; 19
    1196:	0e 94 7e 07 	call	0xefc	; 0xefc <VL53L0X_WriteByte>
    
    return distance;
    119a:	80 2f       	mov	r24, r16
    119c:	91 2f       	mov	r25, r17
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <VL53L0X_ReadDistance+0x134>
        // Si hay muchos timeouts consecutivos, reinicializar
        if (consecutive_errors > 5) {
            sensor_initialized = 0;
        }
        
        return 0xFFFF;
    11a0:	8f ef       	ldi	r24, 0xFF	; 255
    11a2:	9f ef       	ldi	r25, 0xFF	; 255
    
    // Limpiar flag de interrupción para próxima medición
    VL53L0X_WriteByte(VL53L0X_REG_RESULT_INTERRUPT_STATUS, 0x01);
    
    return distance;
}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	08 95       	ret

000011b2 <VL53L0X_GetLastError>:

// Función para obtener último error
uint8_t VL53L0X_GetLastError(void) {
    return last_error;
}
    11b2:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <last_error>
    11b6:	08 95       	ret

000011b8 <__cmpsf2>:
    11b8:	0e 94 17 09 	call	0x122e	; 0x122e <__fp_cmp>
    11bc:	08 f4       	brcc	.+2      	; 0x11c0 <__cmpsf2+0x8>
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	08 95       	ret

000011c2 <__fixsfsi>:
    11c2:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__fixunssfsi>
    11c6:	68 94       	set
    11c8:	b1 11       	cpse	r27, r1
    11ca:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__fp_szero>
    11ce:	08 95       	ret

000011d0 <__fixunssfsi>:
    11d0:	0e 94 43 09 	call	0x1286	; 0x1286 <__fp_splitA>
    11d4:	88 f0       	brcs	.+34     	; 0x11f8 <__fixunssfsi+0x28>
    11d6:	9f 57       	subi	r25, 0x7F	; 127
    11d8:	98 f0       	brcs	.+38     	; 0x1200 <__fixunssfsi+0x30>
    11da:	b9 2f       	mov	r27, r25
    11dc:	99 27       	eor	r25, r25
    11de:	b7 51       	subi	r27, 0x17	; 23
    11e0:	b0 f0       	brcs	.+44     	; 0x120e <__fixunssfsi+0x3e>
    11e2:	e1 f0       	breq	.+56     	; 0x121c <__fixunssfsi+0x4c>
    11e4:	66 0f       	add	r22, r22
    11e6:	77 1f       	adc	r23, r23
    11e8:	88 1f       	adc	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	1a f0       	brmi	.+6      	; 0x11f4 <__fixunssfsi+0x24>
    11ee:	ba 95       	dec	r27
    11f0:	c9 f7       	brne	.-14     	; 0x11e4 <__fixunssfsi+0x14>
    11f2:	14 c0       	rjmp	.+40     	; 0x121c <__fixunssfsi+0x4c>
    11f4:	b1 30       	cpi	r27, 0x01	; 1
    11f6:	91 f0       	breq	.+36     	; 0x121c <__fixunssfsi+0x4c>
    11f8:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__fp_zero>
    11fc:	b1 e0       	ldi	r27, 0x01	; 1
    11fe:	08 95       	ret
    1200:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__fp_zero>
    1204:	67 2f       	mov	r22, r23
    1206:	78 2f       	mov	r23, r24
    1208:	88 27       	eor	r24, r24
    120a:	b8 5f       	subi	r27, 0xF8	; 248
    120c:	39 f0       	breq	.+14     	; 0x121c <__fixunssfsi+0x4c>
    120e:	b9 3f       	cpi	r27, 0xF9	; 249
    1210:	cc f3       	brlt	.-14     	; 0x1204 <__fixunssfsi+0x34>
    1212:	86 95       	lsr	r24
    1214:	77 95       	ror	r23
    1216:	67 95       	ror	r22
    1218:	b3 95       	inc	r27
    121a:	d9 f7       	brne	.-10     	; 0x1212 <__fixunssfsi+0x42>
    121c:	3e f4       	brtc	.+14     	; 0x122c <__fixunssfsi+0x5c>
    121e:	90 95       	com	r25
    1220:	80 95       	com	r24
    1222:	70 95       	com	r23
    1224:	61 95       	neg	r22
    1226:	7f 4f       	sbci	r23, 0xFF	; 255
    1228:	8f 4f       	sbci	r24, 0xFF	; 255
    122a:	9f 4f       	sbci	r25, 0xFF	; 255
    122c:	08 95       	ret

0000122e <__fp_cmp>:
    122e:	99 0f       	add	r25, r25
    1230:	00 08       	sbc	r0, r0
    1232:	55 0f       	add	r21, r21
    1234:	aa 0b       	sbc	r26, r26
    1236:	e0 e8       	ldi	r30, 0x80	; 128
    1238:	fe ef       	ldi	r31, 0xFE	; 254
    123a:	16 16       	cp	r1, r22
    123c:	17 06       	cpc	r1, r23
    123e:	e8 07       	cpc	r30, r24
    1240:	f9 07       	cpc	r31, r25
    1242:	c0 f0       	brcs	.+48     	; 0x1274 <__fp_cmp+0x46>
    1244:	12 16       	cp	r1, r18
    1246:	13 06       	cpc	r1, r19
    1248:	e4 07       	cpc	r30, r20
    124a:	f5 07       	cpc	r31, r21
    124c:	98 f0       	brcs	.+38     	; 0x1274 <__fp_cmp+0x46>
    124e:	62 1b       	sub	r22, r18
    1250:	73 0b       	sbc	r23, r19
    1252:	84 0b       	sbc	r24, r20
    1254:	95 0b       	sbc	r25, r21
    1256:	39 f4       	brne	.+14     	; 0x1266 <__fp_cmp+0x38>
    1258:	0a 26       	eor	r0, r26
    125a:	61 f0       	breq	.+24     	; 0x1274 <__fp_cmp+0x46>
    125c:	23 2b       	or	r18, r19
    125e:	24 2b       	or	r18, r20
    1260:	25 2b       	or	r18, r21
    1262:	21 f4       	brne	.+8      	; 0x126c <__fp_cmp+0x3e>
    1264:	08 95       	ret
    1266:	0a 26       	eor	r0, r26
    1268:	09 f4       	brne	.+2      	; 0x126c <__fp_cmp+0x3e>
    126a:	a1 40       	sbci	r26, 0x01	; 1
    126c:	a6 95       	lsr	r26
    126e:	8f ef       	ldi	r24, 0xFF	; 255
    1270:	81 1d       	adc	r24, r1
    1272:	81 1d       	adc	r24, r1
    1274:	08 95       	ret

00001276 <__fp_split3>:
    1276:	57 fd       	sbrc	r21, 7
    1278:	90 58       	subi	r25, 0x80	; 128
    127a:	44 0f       	add	r20, r20
    127c:	55 1f       	adc	r21, r21
    127e:	59 f0       	breq	.+22     	; 0x1296 <__fp_splitA+0x10>
    1280:	5f 3f       	cpi	r21, 0xFF	; 255
    1282:	71 f0       	breq	.+28     	; 0x12a0 <__fp_splitA+0x1a>
    1284:	47 95       	ror	r20

00001286 <__fp_splitA>:
    1286:	88 0f       	add	r24, r24
    1288:	97 fb       	bst	r25, 7
    128a:	99 1f       	adc	r25, r25
    128c:	61 f0       	breq	.+24     	; 0x12a6 <__fp_splitA+0x20>
    128e:	9f 3f       	cpi	r25, 0xFF	; 255
    1290:	79 f0       	breq	.+30     	; 0x12b0 <__fp_splitA+0x2a>
    1292:	87 95       	ror	r24
    1294:	08 95       	ret
    1296:	12 16       	cp	r1, r18
    1298:	13 06       	cpc	r1, r19
    129a:	14 06       	cpc	r1, r20
    129c:	55 1f       	adc	r21, r21
    129e:	f2 cf       	rjmp	.-28     	; 0x1284 <__fp_split3+0xe>
    12a0:	46 95       	lsr	r20
    12a2:	f1 df       	rcall	.-30     	; 0x1286 <__fp_splitA>
    12a4:	08 c0       	rjmp	.+16     	; 0x12b6 <__fp_splitA+0x30>
    12a6:	16 16       	cp	r1, r22
    12a8:	17 06       	cpc	r1, r23
    12aa:	18 06       	cpc	r1, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	f1 cf       	rjmp	.-30     	; 0x1292 <__fp_splitA+0xc>
    12b0:	86 95       	lsr	r24
    12b2:	71 05       	cpc	r23, r1
    12b4:	61 05       	cpc	r22, r1
    12b6:	08 94       	sec
    12b8:	08 95       	ret

000012ba <__fp_zero>:
    12ba:	e8 94       	clt

000012bc <__fp_szero>:
    12bc:	bb 27       	eor	r27, r27
    12be:	66 27       	eor	r22, r22
    12c0:	77 27       	eor	r23, r23
    12c2:	cb 01       	movw	r24, r22
    12c4:	97 f9       	bld	r25, 7
    12c6:	08 95       	ret

000012c8 <__gesf2>:
    12c8:	0e 94 17 09 	call	0x122e	; 0x122e <__fp_cmp>
    12cc:	08 f4       	brcc	.+2      	; 0x12d0 <__gesf2+0x8>
    12ce:	8f ef       	ldi	r24, 0xFF	; 255
    12d0:	08 95       	ret

000012d2 <__udivmodsi4>:
    12d2:	a1 e2       	ldi	r26, 0x21	; 33
    12d4:	1a 2e       	mov	r1, r26
    12d6:	aa 1b       	sub	r26, r26
    12d8:	bb 1b       	sub	r27, r27
    12da:	fd 01       	movw	r30, r26
    12dc:	0d c0       	rjmp	.+26     	; 0x12f8 <__udivmodsi4_ep>

000012de <__udivmodsi4_loop>:
    12de:	aa 1f       	adc	r26, r26
    12e0:	bb 1f       	adc	r27, r27
    12e2:	ee 1f       	adc	r30, r30
    12e4:	ff 1f       	adc	r31, r31
    12e6:	a2 17       	cp	r26, r18
    12e8:	b3 07       	cpc	r27, r19
    12ea:	e4 07       	cpc	r30, r20
    12ec:	f5 07       	cpc	r31, r21
    12ee:	20 f0       	brcs	.+8      	; 0x12f8 <__udivmodsi4_ep>
    12f0:	a2 1b       	sub	r26, r18
    12f2:	b3 0b       	sbc	r27, r19
    12f4:	e4 0b       	sbc	r30, r20
    12f6:	f5 0b       	sbc	r31, r21

000012f8 <__udivmodsi4_ep>:
    12f8:	66 1f       	adc	r22, r22
    12fa:	77 1f       	adc	r23, r23
    12fc:	88 1f       	adc	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	1a 94       	dec	r1
    1302:	69 f7       	brne	.-38     	; 0x12de <__udivmodsi4_loop>
    1304:	60 95       	com	r22
    1306:	70 95       	com	r23
    1308:	80 95       	com	r24
    130a:	90 95       	com	r25
    130c:	9b 01       	movw	r18, r22
    130e:	ac 01       	movw	r20, r24
    1310:	bd 01       	movw	r22, r26
    1312:	cf 01       	movw	r24, r30
    1314:	08 95       	ret

00001316 <__umulhisi3>:
    1316:	a2 9f       	mul	r26, r18
    1318:	b0 01       	movw	r22, r0
    131a:	b3 9f       	mul	r27, r19
    131c:	c0 01       	movw	r24, r0
    131e:	a3 9f       	mul	r26, r19
    1320:	70 0d       	add	r23, r0
    1322:	81 1d       	adc	r24, r1
    1324:	11 24       	eor	r1, r1
    1326:	91 1d       	adc	r25, r1
    1328:	b2 9f       	mul	r27, r18
    132a:	70 0d       	add	r23, r0
    132c:	81 1d       	adc	r24, r1
    132e:	11 24       	eor	r1, r1
    1330:	91 1d       	adc	r25, r1
    1332:	08 95       	ret

00001334 <sprintf>:
    1334:	ae e0       	ldi	r26, 0x0E	; 14
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e0 ea       	ldi	r30, 0xA0	; 160
    133a:	f9 e0       	ldi	r31, 0x09	; 9
    133c:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__prologue_saves__+0x1c>
    1340:	0d 89       	ldd	r16, Y+21	; 0x15
    1342:	1e 89       	ldd	r17, Y+22	; 0x16
    1344:	86 e0       	ldi	r24, 0x06	; 6
    1346:	8c 83       	std	Y+4, r24	; 0x04
    1348:	1a 83       	std	Y+2, r17	; 0x02
    134a:	09 83       	std	Y+1, r16	; 0x01
    134c:	8f ef       	ldi	r24, 0xFF	; 255
    134e:	9f e7       	ldi	r25, 0x7F	; 127
    1350:	9e 83       	std	Y+6, r25	; 0x06
    1352:	8d 83       	std	Y+5, r24	; 0x05
    1354:	ae 01       	movw	r20, r28
    1356:	47 5e       	subi	r20, 0xE7	; 231
    1358:	5f 4f       	sbci	r21, 0xFF	; 255
    135a:	6f 89       	ldd	r22, Y+23	; 0x17
    135c:	78 8d       	ldd	r23, Y+24	; 0x18
    135e:	ce 01       	movw	r24, r28
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	0e 94 bc 09 	call	0x1378	; 0x1378 <vfprintf>
    1366:	ef 81       	ldd	r30, Y+7	; 0x07
    1368:	f8 85       	ldd	r31, Y+8	; 0x08
    136a:	e0 0f       	add	r30, r16
    136c:	f1 1f       	adc	r31, r17
    136e:	10 82       	st	Z, r1
    1370:	2e 96       	adiw	r28, 0x0e	; 14
    1372:	e4 e0       	ldi	r30, 0x04	; 4
    1374:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__epilogue_restores__+0x1c>

00001378 <vfprintf>:
    1378:	ab e0       	ldi	r26, 0x0B	; 11
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e2 ec       	ldi	r30, 0xC2	; 194
    137e:	f9 e0       	ldi	r31, 0x09	; 9
    1380:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__prologue_saves__>
    1384:	6c 01       	movw	r12, r24
    1386:	7b 01       	movw	r14, r22
    1388:	8a 01       	movw	r16, r20
    138a:	fc 01       	movw	r30, r24
    138c:	17 82       	std	Z+7, r1	; 0x07
    138e:	16 82       	std	Z+6, r1	; 0x06
    1390:	83 81       	ldd	r24, Z+3	; 0x03
    1392:	81 ff       	sbrs	r24, 1
    1394:	cc c1       	rjmp	.+920    	; 0x172e <vfprintf+0x3b6>
    1396:	ce 01       	movw	r24, r28
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	3c 01       	movw	r6, r24
    139c:	f6 01       	movw	r30, r12
    139e:	93 81       	ldd	r25, Z+3	; 0x03
    13a0:	f7 01       	movw	r30, r14
    13a2:	93 fd       	sbrc	r25, 3
    13a4:	85 91       	lpm	r24, Z+
    13a6:	93 ff       	sbrs	r25, 3
    13a8:	81 91       	ld	r24, Z+
    13aa:	7f 01       	movw	r14, r30
    13ac:	88 23       	and	r24, r24
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <vfprintf+0x3a>
    13b0:	ba c1       	rjmp	.+884    	; 0x1726 <vfprintf+0x3ae>
    13b2:	85 32       	cpi	r24, 0x25	; 37
    13b4:	39 f4       	brne	.+14     	; 0x13c4 <vfprintf+0x4c>
    13b6:	93 fd       	sbrc	r25, 3
    13b8:	85 91       	lpm	r24, Z+
    13ba:	93 ff       	sbrs	r25, 3
    13bc:	81 91       	ld	r24, Z+
    13be:	7f 01       	movw	r14, r30
    13c0:	85 32       	cpi	r24, 0x25	; 37
    13c2:	29 f4       	brne	.+10     	; 0x13ce <vfprintf+0x56>
    13c4:	b6 01       	movw	r22, r12
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fputc>
    13cc:	e7 cf       	rjmp	.-50     	; 0x139c <vfprintf+0x24>
    13ce:	91 2c       	mov	r9, r1
    13d0:	21 2c       	mov	r2, r1
    13d2:	31 2c       	mov	r3, r1
    13d4:	ff e1       	ldi	r31, 0x1F	; 31
    13d6:	f3 15       	cp	r31, r3
    13d8:	d8 f0       	brcs	.+54     	; 0x1410 <vfprintf+0x98>
    13da:	8b 32       	cpi	r24, 0x2B	; 43
    13dc:	79 f0       	breq	.+30     	; 0x13fc <vfprintf+0x84>
    13de:	38 f4       	brcc	.+14     	; 0x13ee <vfprintf+0x76>
    13e0:	80 32       	cpi	r24, 0x20	; 32
    13e2:	79 f0       	breq	.+30     	; 0x1402 <vfprintf+0x8a>
    13e4:	83 32       	cpi	r24, 0x23	; 35
    13e6:	a1 f4       	brne	.+40     	; 0x1410 <vfprintf+0x98>
    13e8:	23 2d       	mov	r18, r3
    13ea:	20 61       	ori	r18, 0x10	; 16
    13ec:	1d c0       	rjmp	.+58     	; 0x1428 <vfprintf+0xb0>
    13ee:	8d 32       	cpi	r24, 0x2D	; 45
    13f0:	61 f0       	breq	.+24     	; 0x140a <vfprintf+0x92>
    13f2:	80 33       	cpi	r24, 0x30	; 48
    13f4:	69 f4       	brne	.+26     	; 0x1410 <vfprintf+0x98>
    13f6:	23 2d       	mov	r18, r3
    13f8:	21 60       	ori	r18, 0x01	; 1
    13fa:	16 c0       	rjmp	.+44     	; 0x1428 <vfprintf+0xb0>
    13fc:	83 2d       	mov	r24, r3
    13fe:	82 60       	ori	r24, 0x02	; 2
    1400:	38 2e       	mov	r3, r24
    1402:	e3 2d       	mov	r30, r3
    1404:	e4 60       	ori	r30, 0x04	; 4
    1406:	3e 2e       	mov	r3, r30
    1408:	2a c0       	rjmp	.+84     	; 0x145e <vfprintf+0xe6>
    140a:	f3 2d       	mov	r31, r3
    140c:	f8 60       	ori	r31, 0x08	; 8
    140e:	1d c0       	rjmp	.+58     	; 0x144a <vfprintf+0xd2>
    1410:	37 fc       	sbrc	r3, 7
    1412:	2d c0       	rjmp	.+90     	; 0x146e <vfprintf+0xf6>
    1414:	20 ed       	ldi	r18, 0xD0	; 208
    1416:	28 0f       	add	r18, r24
    1418:	2a 30       	cpi	r18, 0x0A	; 10
    141a:	40 f0       	brcs	.+16     	; 0x142c <vfprintf+0xb4>
    141c:	8e 32       	cpi	r24, 0x2E	; 46
    141e:	b9 f4       	brne	.+46     	; 0x144e <vfprintf+0xd6>
    1420:	36 fc       	sbrc	r3, 6
    1422:	81 c1       	rjmp	.+770    	; 0x1726 <vfprintf+0x3ae>
    1424:	23 2d       	mov	r18, r3
    1426:	20 64       	ori	r18, 0x40	; 64
    1428:	32 2e       	mov	r3, r18
    142a:	19 c0       	rjmp	.+50     	; 0x145e <vfprintf+0xe6>
    142c:	36 fe       	sbrs	r3, 6
    142e:	06 c0       	rjmp	.+12     	; 0x143c <vfprintf+0xc4>
    1430:	8a e0       	ldi	r24, 0x0A	; 10
    1432:	98 9e       	mul	r9, r24
    1434:	20 0d       	add	r18, r0
    1436:	11 24       	eor	r1, r1
    1438:	92 2e       	mov	r9, r18
    143a:	11 c0       	rjmp	.+34     	; 0x145e <vfprintf+0xe6>
    143c:	ea e0       	ldi	r30, 0x0A	; 10
    143e:	2e 9e       	mul	r2, r30
    1440:	20 0d       	add	r18, r0
    1442:	11 24       	eor	r1, r1
    1444:	22 2e       	mov	r2, r18
    1446:	f3 2d       	mov	r31, r3
    1448:	f0 62       	ori	r31, 0x20	; 32
    144a:	3f 2e       	mov	r3, r31
    144c:	08 c0       	rjmp	.+16     	; 0x145e <vfprintf+0xe6>
    144e:	8c 36       	cpi	r24, 0x6C	; 108
    1450:	21 f4       	brne	.+8      	; 0x145a <vfprintf+0xe2>
    1452:	83 2d       	mov	r24, r3
    1454:	80 68       	ori	r24, 0x80	; 128
    1456:	38 2e       	mov	r3, r24
    1458:	02 c0       	rjmp	.+4      	; 0x145e <vfprintf+0xe6>
    145a:	88 36       	cpi	r24, 0x68	; 104
    145c:	41 f4       	brne	.+16     	; 0x146e <vfprintf+0xf6>
    145e:	f7 01       	movw	r30, r14
    1460:	93 fd       	sbrc	r25, 3
    1462:	85 91       	lpm	r24, Z+
    1464:	93 ff       	sbrs	r25, 3
    1466:	81 91       	ld	r24, Z+
    1468:	7f 01       	movw	r14, r30
    146a:	81 11       	cpse	r24, r1
    146c:	b3 cf       	rjmp	.-154    	; 0x13d4 <vfprintf+0x5c>
    146e:	98 2f       	mov	r25, r24
    1470:	9f 7d       	andi	r25, 0xDF	; 223
    1472:	95 54       	subi	r25, 0x45	; 69
    1474:	93 30       	cpi	r25, 0x03	; 3
    1476:	28 f4       	brcc	.+10     	; 0x1482 <vfprintf+0x10a>
    1478:	0c 5f       	subi	r16, 0xFC	; 252
    147a:	1f 4f       	sbci	r17, 0xFF	; 255
    147c:	9f e3       	ldi	r25, 0x3F	; 63
    147e:	99 83       	std	Y+1, r25	; 0x01
    1480:	0d c0       	rjmp	.+26     	; 0x149c <vfprintf+0x124>
    1482:	83 36       	cpi	r24, 0x63	; 99
    1484:	31 f0       	breq	.+12     	; 0x1492 <vfprintf+0x11a>
    1486:	83 37       	cpi	r24, 0x73	; 115
    1488:	71 f0       	breq	.+28     	; 0x14a6 <vfprintf+0x12e>
    148a:	83 35       	cpi	r24, 0x53	; 83
    148c:	09 f0       	breq	.+2      	; 0x1490 <vfprintf+0x118>
    148e:	59 c0       	rjmp	.+178    	; 0x1542 <vfprintf+0x1ca>
    1490:	21 c0       	rjmp	.+66     	; 0x14d4 <vfprintf+0x15c>
    1492:	f8 01       	movw	r30, r16
    1494:	80 81       	ld	r24, Z
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	0e 5f       	subi	r16, 0xFE	; 254
    149a:	1f 4f       	sbci	r17, 0xFF	; 255
    149c:	88 24       	eor	r8, r8
    149e:	83 94       	inc	r8
    14a0:	91 2c       	mov	r9, r1
    14a2:	53 01       	movw	r10, r6
    14a4:	13 c0       	rjmp	.+38     	; 0x14cc <vfprintf+0x154>
    14a6:	28 01       	movw	r4, r16
    14a8:	f2 e0       	ldi	r31, 0x02	; 2
    14aa:	4f 0e       	add	r4, r31
    14ac:	51 1c       	adc	r5, r1
    14ae:	f8 01       	movw	r30, r16
    14b0:	a0 80       	ld	r10, Z
    14b2:	b1 80       	ldd	r11, Z+1	; 0x01
    14b4:	36 fe       	sbrs	r3, 6
    14b6:	03 c0       	rjmp	.+6      	; 0x14be <vfprintf+0x146>
    14b8:	69 2d       	mov	r22, r9
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <vfprintf+0x14a>
    14be:	6f ef       	ldi	r22, 0xFF	; 255
    14c0:	7f ef       	ldi	r23, 0xFF	; 255
    14c2:	c5 01       	movw	r24, r10
    14c4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <strnlen>
    14c8:	4c 01       	movw	r8, r24
    14ca:	82 01       	movw	r16, r4
    14cc:	f3 2d       	mov	r31, r3
    14ce:	ff 77       	andi	r31, 0x7F	; 127
    14d0:	3f 2e       	mov	r3, r31
    14d2:	16 c0       	rjmp	.+44     	; 0x1500 <vfprintf+0x188>
    14d4:	28 01       	movw	r4, r16
    14d6:	22 e0       	ldi	r18, 0x02	; 2
    14d8:	42 0e       	add	r4, r18
    14da:	51 1c       	adc	r5, r1
    14dc:	f8 01       	movw	r30, r16
    14de:	a0 80       	ld	r10, Z
    14e0:	b1 80       	ldd	r11, Z+1	; 0x01
    14e2:	36 fe       	sbrs	r3, 6
    14e4:	03 c0       	rjmp	.+6      	; 0x14ec <vfprintf+0x174>
    14e6:	69 2d       	mov	r22, r9
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <vfprintf+0x178>
    14ec:	6f ef       	ldi	r22, 0xFF	; 255
    14ee:	7f ef       	ldi	r23, 0xFF	; 255
    14f0:	c5 01       	movw	r24, r10
    14f2:	0e 94 9d 0b 	call	0x173a	; 0x173a <strnlen_P>
    14f6:	4c 01       	movw	r8, r24
    14f8:	f3 2d       	mov	r31, r3
    14fa:	f0 68       	ori	r31, 0x80	; 128
    14fc:	3f 2e       	mov	r3, r31
    14fe:	82 01       	movw	r16, r4
    1500:	33 fc       	sbrc	r3, 3
    1502:	1b c0       	rjmp	.+54     	; 0x153a <vfprintf+0x1c2>
    1504:	82 2d       	mov	r24, r2
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	88 16       	cp	r8, r24
    150a:	99 06       	cpc	r9, r25
    150c:	b0 f4       	brcc	.+44     	; 0x153a <vfprintf+0x1c2>
    150e:	b6 01       	movw	r22, r12
    1510:	80 e2       	ldi	r24, 0x20	; 32
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fputc>
    1518:	2a 94       	dec	r2
    151a:	f4 cf       	rjmp	.-24     	; 0x1504 <vfprintf+0x18c>
    151c:	f5 01       	movw	r30, r10
    151e:	37 fc       	sbrc	r3, 7
    1520:	85 91       	lpm	r24, Z+
    1522:	37 fe       	sbrs	r3, 7
    1524:	81 91       	ld	r24, Z+
    1526:	5f 01       	movw	r10, r30
    1528:	b6 01       	movw	r22, r12
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fputc>
    1530:	21 10       	cpse	r2, r1
    1532:	2a 94       	dec	r2
    1534:	21 e0       	ldi	r18, 0x01	; 1
    1536:	82 1a       	sub	r8, r18
    1538:	91 08       	sbc	r9, r1
    153a:	81 14       	cp	r8, r1
    153c:	91 04       	cpc	r9, r1
    153e:	71 f7       	brne	.-36     	; 0x151c <vfprintf+0x1a4>
    1540:	e8 c0       	rjmp	.+464    	; 0x1712 <vfprintf+0x39a>
    1542:	84 36       	cpi	r24, 0x64	; 100
    1544:	11 f0       	breq	.+4      	; 0x154a <vfprintf+0x1d2>
    1546:	89 36       	cpi	r24, 0x69	; 105
    1548:	41 f5       	brne	.+80     	; 0x159a <vfprintf+0x222>
    154a:	f8 01       	movw	r30, r16
    154c:	37 fe       	sbrs	r3, 7
    154e:	07 c0       	rjmp	.+14     	; 0x155e <vfprintf+0x1e6>
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	0c 5f       	subi	r16, 0xFC	; 252
    155a:	1f 4f       	sbci	r17, 0xFF	; 255
    155c:	08 c0       	rjmp	.+16     	; 0x156e <vfprintf+0x1f6>
    155e:	60 81       	ld	r22, Z
    1560:	71 81       	ldd	r23, Z+1	; 0x01
    1562:	07 2e       	mov	r0, r23
    1564:	00 0c       	add	r0, r0
    1566:	88 0b       	sbc	r24, r24
    1568:	99 0b       	sbc	r25, r25
    156a:	0e 5f       	subi	r16, 0xFE	; 254
    156c:	1f 4f       	sbci	r17, 0xFF	; 255
    156e:	f3 2d       	mov	r31, r3
    1570:	ff 76       	andi	r31, 0x6F	; 111
    1572:	3f 2e       	mov	r3, r31
    1574:	97 ff       	sbrs	r25, 7
    1576:	09 c0       	rjmp	.+18     	; 0x158a <vfprintf+0x212>
    1578:	90 95       	com	r25
    157a:	80 95       	com	r24
    157c:	70 95       	com	r23
    157e:	61 95       	neg	r22
    1580:	7f 4f       	sbci	r23, 0xFF	; 255
    1582:	8f 4f       	sbci	r24, 0xFF	; 255
    1584:	9f 4f       	sbci	r25, 0xFF	; 255
    1586:	f0 68       	ori	r31, 0x80	; 128
    1588:	3f 2e       	mov	r3, r31
    158a:	2a e0       	ldi	r18, 0x0A	; 10
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	a3 01       	movw	r20, r6
    1590:	0e 94 ef 0b 	call	0x17de	; 0x17de <__ultoa_invert>
    1594:	88 2e       	mov	r8, r24
    1596:	86 18       	sub	r8, r6
    1598:	45 c0       	rjmp	.+138    	; 0x1624 <vfprintf+0x2ac>
    159a:	85 37       	cpi	r24, 0x75	; 117
    159c:	31 f4       	brne	.+12     	; 0x15aa <vfprintf+0x232>
    159e:	23 2d       	mov	r18, r3
    15a0:	2f 7e       	andi	r18, 0xEF	; 239
    15a2:	b2 2e       	mov	r11, r18
    15a4:	2a e0       	ldi	r18, 0x0A	; 10
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	25 c0       	rjmp	.+74     	; 0x15f4 <vfprintf+0x27c>
    15aa:	93 2d       	mov	r25, r3
    15ac:	99 7f       	andi	r25, 0xF9	; 249
    15ae:	b9 2e       	mov	r11, r25
    15b0:	8f 36       	cpi	r24, 0x6F	; 111
    15b2:	c1 f0       	breq	.+48     	; 0x15e4 <vfprintf+0x26c>
    15b4:	18 f4       	brcc	.+6      	; 0x15bc <vfprintf+0x244>
    15b6:	88 35       	cpi	r24, 0x58	; 88
    15b8:	79 f0       	breq	.+30     	; 0x15d8 <vfprintf+0x260>
    15ba:	b5 c0       	rjmp	.+362    	; 0x1726 <vfprintf+0x3ae>
    15bc:	80 37       	cpi	r24, 0x70	; 112
    15be:	19 f0       	breq	.+6      	; 0x15c6 <vfprintf+0x24e>
    15c0:	88 37       	cpi	r24, 0x78	; 120
    15c2:	21 f0       	breq	.+8      	; 0x15cc <vfprintf+0x254>
    15c4:	b0 c0       	rjmp	.+352    	; 0x1726 <vfprintf+0x3ae>
    15c6:	e9 2f       	mov	r30, r25
    15c8:	e0 61       	ori	r30, 0x10	; 16
    15ca:	be 2e       	mov	r11, r30
    15cc:	b4 fe       	sbrs	r11, 4
    15ce:	0d c0       	rjmp	.+26     	; 0x15ea <vfprintf+0x272>
    15d0:	fb 2d       	mov	r31, r11
    15d2:	f4 60       	ori	r31, 0x04	; 4
    15d4:	bf 2e       	mov	r11, r31
    15d6:	09 c0       	rjmp	.+18     	; 0x15ea <vfprintf+0x272>
    15d8:	34 fe       	sbrs	r3, 4
    15da:	0a c0       	rjmp	.+20     	; 0x15f0 <vfprintf+0x278>
    15dc:	29 2f       	mov	r18, r25
    15de:	26 60       	ori	r18, 0x06	; 6
    15e0:	b2 2e       	mov	r11, r18
    15e2:	06 c0       	rjmp	.+12     	; 0x15f0 <vfprintf+0x278>
    15e4:	28 e0       	ldi	r18, 0x08	; 8
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <vfprintf+0x27c>
    15ea:	20 e1       	ldi	r18, 0x10	; 16
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <vfprintf+0x27c>
    15f0:	20 e1       	ldi	r18, 0x10	; 16
    15f2:	32 e0       	ldi	r19, 0x02	; 2
    15f4:	f8 01       	movw	r30, r16
    15f6:	b7 fe       	sbrs	r11, 7
    15f8:	07 c0       	rjmp	.+14     	; 0x1608 <vfprintf+0x290>
    15fa:	60 81       	ld	r22, Z
    15fc:	71 81       	ldd	r23, Z+1	; 0x01
    15fe:	82 81       	ldd	r24, Z+2	; 0x02
    1600:	93 81       	ldd	r25, Z+3	; 0x03
    1602:	0c 5f       	subi	r16, 0xFC	; 252
    1604:	1f 4f       	sbci	r17, 0xFF	; 255
    1606:	06 c0       	rjmp	.+12     	; 0x1614 <vfprintf+0x29c>
    1608:	60 81       	ld	r22, Z
    160a:	71 81       	ldd	r23, Z+1	; 0x01
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	0e 5f       	subi	r16, 0xFE	; 254
    1612:	1f 4f       	sbci	r17, 0xFF	; 255
    1614:	a3 01       	movw	r20, r6
    1616:	0e 94 ef 0b 	call	0x17de	; 0x17de <__ultoa_invert>
    161a:	88 2e       	mov	r8, r24
    161c:	86 18       	sub	r8, r6
    161e:	fb 2d       	mov	r31, r11
    1620:	ff 77       	andi	r31, 0x7F	; 127
    1622:	3f 2e       	mov	r3, r31
    1624:	36 fe       	sbrs	r3, 6
    1626:	0d c0       	rjmp	.+26     	; 0x1642 <vfprintf+0x2ca>
    1628:	23 2d       	mov	r18, r3
    162a:	2e 7f       	andi	r18, 0xFE	; 254
    162c:	a2 2e       	mov	r10, r18
    162e:	89 14       	cp	r8, r9
    1630:	58 f4       	brcc	.+22     	; 0x1648 <vfprintf+0x2d0>
    1632:	34 fe       	sbrs	r3, 4
    1634:	0b c0       	rjmp	.+22     	; 0x164c <vfprintf+0x2d4>
    1636:	32 fc       	sbrc	r3, 2
    1638:	09 c0       	rjmp	.+18     	; 0x164c <vfprintf+0x2d4>
    163a:	83 2d       	mov	r24, r3
    163c:	8e 7e       	andi	r24, 0xEE	; 238
    163e:	a8 2e       	mov	r10, r24
    1640:	05 c0       	rjmp	.+10     	; 0x164c <vfprintf+0x2d4>
    1642:	b8 2c       	mov	r11, r8
    1644:	a3 2c       	mov	r10, r3
    1646:	03 c0       	rjmp	.+6      	; 0x164e <vfprintf+0x2d6>
    1648:	b8 2c       	mov	r11, r8
    164a:	01 c0       	rjmp	.+2      	; 0x164e <vfprintf+0x2d6>
    164c:	b9 2c       	mov	r11, r9
    164e:	a4 fe       	sbrs	r10, 4
    1650:	0f c0       	rjmp	.+30     	; 0x1670 <vfprintf+0x2f8>
    1652:	fe 01       	movw	r30, r28
    1654:	e8 0d       	add	r30, r8
    1656:	f1 1d       	adc	r31, r1
    1658:	80 81       	ld	r24, Z
    165a:	80 33       	cpi	r24, 0x30	; 48
    165c:	21 f4       	brne	.+8      	; 0x1666 <vfprintf+0x2ee>
    165e:	9a 2d       	mov	r25, r10
    1660:	99 7e       	andi	r25, 0xE9	; 233
    1662:	a9 2e       	mov	r10, r25
    1664:	09 c0       	rjmp	.+18     	; 0x1678 <vfprintf+0x300>
    1666:	a2 fe       	sbrs	r10, 2
    1668:	06 c0       	rjmp	.+12     	; 0x1676 <vfprintf+0x2fe>
    166a:	b3 94       	inc	r11
    166c:	b3 94       	inc	r11
    166e:	04 c0       	rjmp	.+8      	; 0x1678 <vfprintf+0x300>
    1670:	8a 2d       	mov	r24, r10
    1672:	86 78       	andi	r24, 0x86	; 134
    1674:	09 f0       	breq	.+2      	; 0x1678 <vfprintf+0x300>
    1676:	b3 94       	inc	r11
    1678:	a3 fc       	sbrc	r10, 3
    167a:	11 c0       	rjmp	.+34     	; 0x169e <vfprintf+0x326>
    167c:	a0 fe       	sbrs	r10, 0
    167e:	06 c0       	rjmp	.+12     	; 0x168c <vfprintf+0x314>
    1680:	b2 14       	cp	r11, r2
    1682:	88 f4       	brcc	.+34     	; 0x16a6 <vfprintf+0x32e>
    1684:	28 0c       	add	r2, r8
    1686:	92 2c       	mov	r9, r2
    1688:	9b 18       	sub	r9, r11
    168a:	0e c0       	rjmp	.+28     	; 0x16a8 <vfprintf+0x330>
    168c:	b2 14       	cp	r11, r2
    168e:	60 f4       	brcc	.+24     	; 0x16a8 <vfprintf+0x330>
    1690:	b6 01       	movw	r22, r12
    1692:	80 e2       	ldi	r24, 0x20	; 32
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fputc>
    169a:	b3 94       	inc	r11
    169c:	f7 cf       	rjmp	.-18     	; 0x168c <vfprintf+0x314>
    169e:	b2 14       	cp	r11, r2
    16a0:	18 f4       	brcc	.+6      	; 0x16a8 <vfprintf+0x330>
    16a2:	2b 18       	sub	r2, r11
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <vfprintf+0x332>
    16a6:	98 2c       	mov	r9, r8
    16a8:	21 2c       	mov	r2, r1
    16aa:	a4 fe       	sbrs	r10, 4
    16ac:	10 c0       	rjmp	.+32     	; 0x16ce <vfprintf+0x356>
    16ae:	b6 01       	movw	r22, r12
    16b0:	80 e3       	ldi	r24, 0x30	; 48
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fputc>
    16b8:	a2 fe       	sbrs	r10, 2
    16ba:	17 c0       	rjmp	.+46     	; 0x16ea <vfprintf+0x372>
    16bc:	a1 fc       	sbrc	r10, 1
    16be:	03 c0       	rjmp	.+6      	; 0x16c6 <vfprintf+0x34e>
    16c0:	88 e7       	ldi	r24, 0x78	; 120
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <vfprintf+0x352>
    16c6:	88 e5       	ldi	r24, 0x58	; 88
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	b6 01       	movw	r22, r12
    16cc:	0c c0       	rjmp	.+24     	; 0x16e6 <vfprintf+0x36e>
    16ce:	8a 2d       	mov	r24, r10
    16d0:	86 78       	andi	r24, 0x86	; 134
    16d2:	59 f0       	breq	.+22     	; 0x16ea <vfprintf+0x372>
    16d4:	a1 fe       	sbrs	r10, 1
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <vfprintf+0x364>
    16d8:	8b e2       	ldi	r24, 0x2B	; 43
    16da:	01 c0       	rjmp	.+2      	; 0x16de <vfprintf+0x366>
    16dc:	80 e2       	ldi	r24, 0x20	; 32
    16de:	a7 fc       	sbrc	r10, 7
    16e0:	8d e2       	ldi	r24, 0x2D	; 45
    16e2:	b6 01       	movw	r22, r12
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fputc>
    16ea:	89 14       	cp	r8, r9
    16ec:	38 f4       	brcc	.+14     	; 0x16fc <vfprintf+0x384>
    16ee:	b6 01       	movw	r22, r12
    16f0:	80 e3       	ldi	r24, 0x30	; 48
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fputc>
    16f8:	9a 94       	dec	r9
    16fa:	f7 cf       	rjmp	.-18     	; 0x16ea <vfprintf+0x372>
    16fc:	8a 94       	dec	r8
    16fe:	f3 01       	movw	r30, r6
    1700:	e8 0d       	add	r30, r8
    1702:	f1 1d       	adc	r31, r1
    1704:	80 81       	ld	r24, Z
    1706:	b6 01       	movw	r22, r12
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fputc>
    170e:	81 10       	cpse	r8, r1
    1710:	f5 cf       	rjmp	.-22     	; 0x16fc <vfprintf+0x384>
    1712:	22 20       	and	r2, r2
    1714:	09 f4       	brne	.+2      	; 0x1718 <vfprintf+0x3a0>
    1716:	42 ce       	rjmp	.-892    	; 0x139c <vfprintf+0x24>
    1718:	b6 01       	movw	r22, r12
    171a:	80 e2       	ldi	r24, 0x20	; 32
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fputc>
    1722:	2a 94       	dec	r2
    1724:	f6 cf       	rjmp	.-20     	; 0x1712 <vfprintf+0x39a>
    1726:	f6 01       	movw	r30, r12
    1728:	86 81       	ldd	r24, Z+6	; 0x06
    172a:	97 81       	ldd	r25, Z+7	; 0x07
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <vfprintf+0x3ba>
    172e:	8f ef       	ldi	r24, 0xFF	; 255
    1730:	9f ef       	ldi	r25, 0xFF	; 255
    1732:	2b 96       	adiw	r28, 0x0b	; 11
    1734:	e2 e1       	ldi	r30, 0x12	; 18
    1736:	0c 94 69 0c 	jmp	0x18d2	; 0x18d2 <__epilogue_restores__>

0000173a <strnlen_P>:
    173a:	fc 01       	movw	r30, r24
    173c:	05 90       	lpm	r0, Z+
    173e:	61 50       	subi	r22, 0x01	; 1
    1740:	70 40       	sbci	r23, 0x00	; 0
    1742:	01 10       	cpse	r0, r1
    1744:	d8 f7       	brcc	.-10     	; 0x173c <strnlen_P+0x2>
    1746:	80 95       	com	r24
    1748:	90 95       	com	r25
    174a:	8e 0f       	add	r24, r30
    174c:	9f 1f       	adc	r25, r31
    174e:	08 95       	ret

00001750 <strnlen>:
    1750:	fc 01       	movw	r30, r24
    1752:	61 50       	subi	r22, 0x01	; 1
    1754:	70 40       	sbci	r23, 0x00	; 0
    1756:	01 90       	ld	r0, Z+
    1758:	01 10       	cpse	r0, r1
    175a:	d8 f7       	brcc	.-10     	; 0x1752 <strnlen+0x2>
    175c:	80 95       	com	r24
    175e:	90 95       	com	r25
    1760:	8e 0f       	add	r24, r30
    1762:	9f 1f       	adc	r25, r31
    1764:	08 95       	ret

00001766 <fputc>:
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	fb 01       	movw	r30, r22
    1770:	23 81       	ldd	r18, Z+3	; 0x03
    1772:	21 fd       	sbrc	r18, 1
    1774:	03 c0       	rjmp	.+6      	; 0x177c <fputc+0x16>
    1776:	8f ef       	ldi	r24, 0xFF	; 255
    1778:	9f ef       	ldi	r25, 0xFF	; 255
    177a:	2c c0       	rjmp	.+88     	; 0x17d4 <fputc+0x6e>
    177c:	22 ff       	sbrs	r18, 2
    177e:	16 c0       	rjmp	.+44     	; 0x17ac <fputc+0x46>
    1780:	46 81       	ldd	r20, Z+6	; 0x06
    1782:	57 81       	ldd	r21, Z+7	; 0x07
    1784:	24 81       	ldd	r18, Z+4	; 0x04
    1786:	35 81       	ldd	r19, Z+5	; 0x05
    1788:	42 17       	cp	r20, r18
    178a:	53 07       	cpc	r21, r19
    178c:	44 f4       	brge	.+16     	; 0x179e <fputc+0x38>
    178e:	a0 81       	ld	r26, Z
    1790:	b1 81       	ldd	r27, Z+1	; 0x01
    1792:	9d 01       	movw	r18, r26
    1794:	2f 5f       	subi	r18, 0xFF	; 255
    1796:	3f 4f       	sbci	r19, 0xFF	; 255
    1798:	31 83       	std	Z+1, r19	; 0x01
    179a:	20 83       	st	Z, r18
    179c:	8c 93       	st	X, r24
    179e:	26 81       	ldd	r18, Z+6	; 0x06
    17a0:	37 81       	ldd	r19, Z+7	; 0x07
    17a2:	2f 5f       	subi	r18, 0xFF	; 255
    17a4:	3f 4f       	sbci	r19, 0xFF	; 255
    17a6:	37 83       	std	Z+7, r19	; 0x07
    17a8:	26 83       	std	Z+6, r18	; 0x06
    17aa:	14 c0       	rjmp	.+40     	; 0x17d4 <fputc+0x6e>
    17ac:	8b 01       	movw	r16, r22
    17ae:	ec 01       	movw	r28, r24
    17b0:	fb 01       	movw	r30, r22
    17b2:	00 84       	ldd	r0, Z+8	; 0x08
    17b4:	f1 85       	ldd	r31, Z+9	; 0x09
    17b6:	e0 2d       	mov	r30, r0
    17b8:	09 95       	icall
    17ba:	89 2b       	or	r24, r25
    17bc:	e1 f6       	brne	.-72     	; 0x1776 <fputc+0x10>
    17be:	d8 01       	movw	r26, r16
    17c0:	16 96       	adiw	r26, 0x06	; 6
    17c2:	8d 91       	ld	r24, X+
    17c4:	9c 91       	ld	r25, X
    17c6:	17 97       	sbiw	r26, 0x07	; 7
    17c8:	01 96       	adiw	r24, 0x01	; 1
    17ca:	17 96       	adiw	r26, 0x07	; 7
    17cc:	9c 93       	st	X, r25
    17ce:	8e 93       	st	-X, r24
    17d0:	16 97       	sbiw	r26, 0x06	; 6
    17d2:	ce 01       	movw	r24, r28
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	1f 91       	pop	r17
    17da:	0f 91       	pop	r16
    17dc:	08 95       	ret

000017de <__ultoa_invert>:
    17de:	fa 01       	movw	r30, r20
    17e0:	aa 27       	eor	r26, r26
    17e2:	28 30       	cpi	r18, 0x08	; 8
    17e4:	51 f1       	breq	.+84     	; 0x183a <__ultoa_invert+0x5c>
    17e6:	20 31       	cpi	r18, 0x10	; 16
    17e8:	81 f1       	breq	.+96     	; 0x184a <__ultoa_invert+0x6c>
    17ea:	e8 94       	clt
    17ec:	6f 93       	push	r22
    17ee:	6e 7f       	andi	r22, 0xFE	; 254
    17f0:	6e 5f       	subi	r22, 0xFE	; 254
    17f2:	7f 4f       	sbci	r23, 0xFF	; 255
    17f4:	8f 4f       	sbci	r24, 0xFF	; 255
    17f6:	9f 4f       	sbci	r25, 0xFF	; 255
    17f8:	af 4f       	sbci	r26, 0xFF	; 255
    17fa:	b1 e0       	ldi	r27, 0x01	; 1
    17fc:	3e d0       	rcall	.+124    	; 0x187a <__ultoa_invert+0x9c>
    17fe:	b4 e0       	ldi	r27, 0x04	; 4
    1800:	3c d0       	rcall	.+120    	; 0x187a <__ultoa_invert+0x9c>
    1802:	67 0f       	add	r22, r23
    1804:	78 1f       	adc	r23, r24
    1806:	89 1f       	adc	r24, r25
    1808:	9a 1f       	adc	r25, r26
    180a:	a1 1d       	adc	r26, r1
    180c:	68 0f       	add	r22, r24
    180e:	79 1f       	adc	r23, r25
    1810:	8a 1f       	adc	r24, r26
    1812:	91 1d       	adc	r25, r1
    1814:	a1 1d       	adc	r26, r1
    1816:	6a 0f       	add	r22, r26
    1818:	71 1d       	adc	r23, r1
    181a:	81 1d       	adc	r24, r1
    181c:	91 1d       	adc	r25, r1
    181e:	a1 1d       	adc	r26, r1
    1820:	20 d0       	rcall	.+64     	; 0x1862 <__ultoa_invert+0x84>
    1822:	09 f4       	brne	.+2      	; 0x1826 <__ultoa_invert+0x48>
    1824:	68 94       	set
    1826:	3f 91       	pop	r19
    1828:	2a e0       	ldi	r18, 0x0A	; 10
    182a:	26 9f       	mul	r18, r22
    182c:	11 24       	eor	r1, r1
    182e:	30 19       	sub	r19, r0
    1830:	30 5d       	subi	r19, 0xD0	; 208
    1832:	31 93       	st	Z+, r19
    1834:	de f6       	brtc	.-74     	; 0x17ec <__ultoa_invert+0xe>
    1836:	cf 01       	movw	r24, r30
    1838:	08 95       	ret
    183a:	46 2f       	mov	r20, r22
    183c:	47 70       	andi	r20, 0x07	; 7
    183e:	40 5d       	subi	r20, 0xD0	; 208
    1840:	41 93       	st	Z+, r20
    1842:	b3 e0       	ldi	r27, 0x03	; 3
    1844:	0f d0       	rcall	.+30     	; 0x1864 <__ultoa_invert+0x86>
    1846:	c9 f7       	brne	.-14     	; 0x183a <__ultoa_invert+0x5c>
    1848:	f6 cf       	rjmp	.-20     	; 0x1836 <__ultoa_invert+0x58>
    184a:	46 2f       	mov	r20, r22
    184c:	4f 70       	andi	r20, 0x0F	; 15
    184e:	40 5d       	subi	r20, 0xD0	; 208
    1850:	4a 33       	cpi	r20, 0x3A	; 58
    1852:	18 f0       	brcs	.+6      	; 0x185a <__ultoa_invert+0x7c>
    1854:	49 5d       	subi	r20, 0xD9	; 217
    1856:	31 fd       	sbrc	r19, 1
    1858:	40 52       	subi	r20, 0x20	; 32
    185a:	41 93       	st	Z+, r20
    185c:	02 d0       	rcall	.+4      	; 0x1862 <__ultoa_invert+0x84>
    185e:	a9 f7       	brne	.-22     	; 0x184a <__ultoa_invert+0x6c>
    1860:	ea cf       	rjmp	.-44     	; 0x1836 <__ultoa_invert+0x58>
    1862:	b4 e0       	ldi	r27, 0x04	; 4
    1864:	a6 95       	lsr	r26
    1866:	97 95       	ror	r25
    1868:	87 95       	ror	r24
    186a:	77 95       	ror	r23
    186c:	67 95       	ror	r22
    186e:	ba 95       	dec	r27
    1870:	c9 f7       	brne	.-14     	; 0x1864 <__ultoa_invert+0x86>
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	61 05       	cpc	r22, r1
    1876:	71 05       	cpc	r23, r1
    1878:	08 95       	ret
    187a:	9b 01       	movw	r18, r22
    187c:	ac 01       	movw	r20, r24
    187e:	0a 2e       	mov	r0, r26
    1880:	06 94       	lsr	r0
    1882:	57 95       	ror	r21
    1884:	47 95       	ror	r20
    1886:	37 95       	ror	r19
    1888:	27 95       	ror	r18
    188a:	ba 95       	dec	r27
    188c:	c9 f7       	brne	.-14     	; 0x1880 <__ultoa_invert+0xa2>
    188e:	62 0f       	add	r22, r18
    1890:	73 1f       	adc	r23, r19
    1892:	84 1f       	adc	r24, r20
    1894:	95 1f       	adc	r25, r21
    1896:	a0 1d       	adc	r26, r0
    1898:	08 95       	ret

0000189a <__prologue_saves__>:
    189a:	2f 92       	push	r2
    189c:	3f 92       	push	r3
    189e:	4f 92       	push	r4
    18a0:	5f 92       	push	r5
    18a2:	6f 92       	push	r6
    18a4:	7f 92       	push	r7
    18a6:	8f 92       	push	r8
    18a8:	9f 92       	push	r9
    18aa:	af 92       	push	r10
    18ac:	bf 92       	push	r11
    18ae:	cf 92       	push	r12
    18b0:	df 92       	push	r13
    18b2:	ef 92       	push	r14
    18b4:	ff 92       	push	r15
    18b6:	0f 93       	push	r16
    18b8:	1f 93       	push	r17
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	ca 1b       	sub	r28, r26
    18c4:	db 0b       	sbc	r29, r27
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	09 94       	ijmp

000018d2 <__epilogue_restores__>:
    18d2:	2a 88       	ldd	r2, Y+18	; 0x12
    18d4:	39 88       	ldd	r3, Y+17	; 0x11
    18d6:	48 88       	ldd	r4, Y+16	; 0x10
    18d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    18da:	6e 84       	ldd	r6, Y+14	; 0x0e
    18dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    18de:	8c 84       	ldd	r8, Y+12	; 0x0c
    18e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    18e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    18e4:	b9 84       	ldd	r11, Y+9	; 0x09
    18e6:	c8 84       	ldd	r12, Y+8	; 0x08
    18e8:	df 80       	ldd	r13, Y+7	; 0x07
    18ea:	ee 80       	ldd	r14, Y+6	; 0x06
    18ec:	fd 80       	ldd	r15, Y+5	; 0x05
    18ee:	0c 81       	ldd	r16, Y+4	; 0x04
    18f0:	1b 81       	ldd	r17, Y+3	; 0x03
    18f2:	aa 81       	ldd	r26, Y+2	; 0x02
    18f4:	b9 81       	ldd	r27, Y+1	; 0x01
    18f6:	ce 0f       	add	r28, r30
    18f8:	d1 1d       	adc	r29, r1
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	ed 01       	movw	r28, r26
    1906:	08 95       	ret

00001908 <_exit>:
    1908:	f8 94       	cli

0000190a <__stop_program>:
    190a:	ff cf       	rjmp	.-2      	; 0x190a <__stop_program>
