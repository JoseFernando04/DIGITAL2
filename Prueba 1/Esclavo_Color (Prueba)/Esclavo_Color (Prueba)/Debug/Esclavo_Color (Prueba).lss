
Esclavo_Color (Prueba).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f2  00800100  00000b90  00000c24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008001f2  008001f2  00000d16  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c79  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000813  00000000  00000000  00001aad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ad  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00002870  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000523  00000000  00000000  00002a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ec  00000000  00000000  00002f27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003513  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3f       	cpi	r26, 0xF2	; 242
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 ef       	ldi	r26, 0xF2	; 242
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 3f       	cpi	r26, 0xF6	; 246
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <main>
  9e:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_init>:
} rgb_values_t;

// Función para inicializar UART
void uart_init(void) {
	// Configurar baudrate a 9600
	UBRR0H = (F_CPU/16/9600-1) >> 8;
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = F_CPU/16/9600-1;
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Habilitar transmisión y recepción
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  b0:	88 e1       	ldi	r24, 0x18	; 24
  b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Configurar formato: 8 bits de datos, 1 stop bit
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  bc:	08 95       	ret

000000be <uart_putchar>:
}

// Función para enviar un carácter por UART
void uart_putchar(char c) {
	while (!(UCSR0A & (1<<UDRE0)));
  be:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c2:	95 ff       	sbrs	r25, 5
  c4:	fc cf       	rjmp	.-8      	; 0xbe <uart_putchar>
	UDR0 = c;
  c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  ca:	08 95       	ret

000000cc <uart_puts>:
}

// Función para enviar string por UART
void uart_puts(const char* str) {
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ec 01       	movw	r28, r24
	while (*str) {
  d2:	03 c0       	rjmp	.+6      	; 0xda <uart_puts+0xe>
		uart_putchar(*str++);
  d4:	21 96       	adiw	r28, 0x01	; 1
  d6:	0e 94 5f 00 	call	0xbe	; 0xbe <uart_putchar>
	UDR0 = c;
}

// Función para enviar string por UART
void uart_puts(const char* str) {
	while (*str) {
  da:	88 81       	ld	r24, Y
  dc:	81 11       	cpse	r24, r1
  de:	fa cf       	rjmp	.-12     	; 0xd4 <uart_puts+0x8>
		uart_putchar(*str++);
	}
}
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <servo_init>:

// Función para inicializar Timer1 para PWM del servo
void servo_init(void) {
	// Configurar pin del servo como salida
	DDRB |= (1 << SERVO_PIN);
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	84 b9       	out	0x04, r24	; 4
	
	// Configurar Timer1 en modo Fast PWM, TOP en ICR1
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
  ec:	82 e8       	ldi	r24, 0x82	; 130
  ee:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11) | (1 << CS10); // Prescaler 64
  f2:	8b e1       	ldi	r24, 0x1B	; 27
  f4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	// Configurar periodo de 20ms (50Hz) para servo
	ICR1 = 4999; // (16MHz / (64 * 50Hz)) - 1
  f8:	87 e8       	ldi	r24, 0x87	; 135
  fa:	93 e1       	ldi	r25, 0x13	; 19
  fc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 100:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	// Posición inicial del servo (0 grados) - 1ms pulse
	OCR1A = 249; // (1ms / 20ms) * 4999
 104:	89 ef       	ldi	r24, 0xF9	; 249
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 10c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 110:	08 95       	ret

00000112 <servo_set_position>:

// Función para mover servo a posición específica
void servo_set_position(uint8_t angle) {
	// Convertir ángulo (0-180) a valor PWM
	// 0° = 1ms (249), 90° = 1.5ms (374), 180° = 2ms (499)
	if (angle > 180) angle = 180;
 112:	85 3b       	cpi	r24, 0xB5	; 181
 114:	08 f0       	brcs	.+2      	; 0x118 <servo_set_position+0x6>
 116:	84 eb       	ldi	r24, 0xB4	; 180
	uint16_t pulse_width = 249 + (angle * 125) / 90; // Interpolación lineal
 118:	2d e7       	ldi	r18, 0x7D	; 125
 11a:	82 9f       	mul	r24, r18
 11c:	c0 01       	movw	r24, r0
 11e:	11 24       	eor	r1, r1
 120:	6a e5       	ldi	r22, 0x5A	; 90
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	0e 94 92 02 	call	0x524	; 0x524 <__divmodhi4>
 128:	67 50       	subi	r22, 0x07	; 7
 12a:	7f 4f       	sbci	r23, 0xFF	; 255
	OCR1A = pulse_width;
 12c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 130:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 134:	08 95       	ret

00000136 <tcs3200_init>:
}

// Función para inicializar TCS3200
void tcs3200_init(void) {
	// Configurar pines de control como salidas
	DDRD |= (1 << S0_PIN) | (1 << S2_PIN) | (1 << S3_PIN);
 136:	8a b1       	in	r24, 0x0a	; 10
 138:	84 65       	ori	r24, 0x54	; 84
 13a:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << S1_PIN);
 13c:	84 b1       	in	r24, 0x04	; 4
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	84 b9       	out	0x04, r24	; 4
	
	// Configurar pin OUT como entrada
	DDRB &= ~(1 << OUT_PIN);
 142:	84 b1       	in	r24, 0x04	; 4
 144:	8f 7e       	andi	r24, 0xEF	; 239
 146:	84 b9       	out	0x04, r24	; 4
	
	// Configurar frecuencia de salida (S0=L, S1=L = 2%) - Menor sensibilidad
	PORTD &= ~(1 << S0_PIN);
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	8f 7b       	andi	r24, 0xBF	; 191
 14c:	8b b9       	out	0x0b, r24	; 11
	PORTB &= ~(1 << S1_PIN);
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	8e 7f       	andi	r24, 0xFE	; 254
 152:	85 b9       	out	0x05, r24	; 5
	
	// Configurar Timer2 para contar pulsos (Timer1 se usa para servo)
	TCCR2A = 0;
 154:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20); // Prescaler 1024
 158:	87 e0       	ldi	r24, 0x07	; 7
 15a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	// Habilitar Pin Change Interrupt para PB4 (OUT pin)
	PCICR |= (1 << PCIE0);  // Habilitar PCINT para PORTB
 15e:	e8 e6       	ldi	r30, 0x68	; 104
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	81 60       	ori	r24, 0x01	; 1
 166:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT4); // Habilitar PCINT4 (PB4)
 168:	eb e6       	ldi	r30, 0x6B	; 107
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 61       	ori	r24, 0x10	; 16
 170:	80 83       	st	Z, r24
 172:	08 95       	ret

00000174 <tcs3200_select_filter>:
}

// Función para seleccionar filtro de color
void tcs3200_select_filter(uint8_t filter) {
	switch(filter) {
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	69 f0       	breq	.+26     	; 0x192 <tcs3200_select_filter+0x1e>
 178:	28 f0       	brcs	.+10     	; 0x184 <tcs3200_select_filter+0x10>
 17a:	82 30       	cpi	r24, 0x02	; 2
 17c:	89 f0       	breq	.+34     	; 0x1a0 <tcs3200_select_filter+0x2c>
 17e:	83 30       	cpi	r24, 0x03	; 3
 180:	b1 f0       	breq	.+44     	; 0x1ae <tcs3200_select_filter+0x3a>
 182:	08 95       	ret
		case 0: // Sin filtro (claro)
		PORTD &= ~(1 << S2_PIN);
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	8f 7e       	andi	r24, 0xEF	; 239
 188:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << S3_PIN);
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8b 7f       	andi	r24, 0xFB	; 251
 18e:	8b b9       	out	0x0b, r24	; 11
		break;
 190:	08 95       	ret
		case 1: // Filtro rojo
		PORTD &= ~(1 << S2_PIN);
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	8f 7e       	andi	r24, 0xEF	; 239
 196:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << S3_PIN);
 198:	8b b1       	in	r24, 0x0b	; 11
 19a:	84 60       	ori	r24, 0x04	; 4
 19c:	8b b9       	out	0x0b, r24	; 11
		break;
 19e:	08 95       	ret
		case 2: // Filtro azul
		PORTD &= ~(1 << S3_PIN);
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	8b 7f       	andi	r24, 0xFB	; 251
 1a4:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << S2_PIN);
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	80 61       	ori	r24, 0x10	; 16
 1aa:	8b b9       	out	0x0b, r24	; 11
		break;
 1ac:	08 95       	ret
		case 3: // Filtro verde
		PORTD |= (1 << S2_PIN);
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	80 61       	ori	r24, 0x10	; 16
 1b2:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << S3_PIN);
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	84 60       	ori	r24, 0x04	; 4
 1b8:	8b b9       	out	0x0b, r24	; 11
 1ba:	08 95       	ret

000001bc <__vector_3>:
		break;
	}
}

// Interrupción para contar pulsos del TCS3200
ISR(PCINT0_vect) {
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
	static uint8_t last_state = 0;
	uint8_t current_state = PINB & (1 << OUT_PIN);
 1ce:	83 b1       	in	r24, 0x03	; 3
	
	// Detectar flanco ascendente
	if (current_state && !last_state) {
 1d0:	98 2f       	mov	r25, r24
 1d2:	90 71       	andi	r25, 0x10	; 16
 1d4:	84 ff       	sbrs	r24, 4
 1d6:	0e c0       	rjmp	.+28     	; 0x1f4 <__vector_3+0x38>
 1d8:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <__data_end>
 1dc:	81 11       	cpse	r24, r1
 1de:	0a c0       	rjmp	.+20     	; 0x1f4 <__vector_3+0x38>
		pulse_count++;
 1e0:	20 91 f4 01 	lds	r18, 0x01F4	; 0x8001f4 <pulse_count>
 1e4:	30 91 f5 01 	lds	r19, 0x01F5	; 0x8001f5 <pulse_count+0x1>
 1e8:	2f 5f       	subi	r18, 0xFF	; 255
 1ea:	3f 4f       	sbci	r19, 0xFF	; 255
 1ec:	30 93 f5 01 	sts	0x01F5, r19	; 0x8001f5 <pulse_count+0x1>
 1f0:	20 93 f4 01 	sts	0x01F4, r18	; 0x8001f4 <pulse_count>
	}
	last_state = current_state;
 1f4:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <__data_end>
}
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <__vector_7>:

// Timer para controlar el tiempo de medición
ISR(TIMER2_COMPA_vect) {
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	8f 93       	push	r24
	measurement_ready = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <measurement_ready>
	TCCR2B = 0; // Detener timer
 21c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
}
 220:	8f 91       	pop	r24
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <tcs3200_read_frequency>:

// Función para leer frecuencia del TCS3200 (mejorada)
uint16_t tcs3200_read_frequency(void) {
	pulse_count = 0;
 22c:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <pulse_count+0x1>
 230:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <pulse_count>
	measurement_ready = 0;
 234:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <measurement_ready>
	
	// Configurar Timer2 para ~200ms (tiempo más largo para mejor precisión)
	TCNT2 = 0;
 238:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	OCR2A = 195;
 23c:	83 ec       	ldi	r24, 0xC3	; 195
 23e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 |= (1 << OCIE2A);
 242:	e0 e7       	ldi	r30, 0x70	; 112
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	82 60       	ori	r24, 0x02	; 2
 24a:	80 83       	st	Z, r24
	TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20);
 24c:	87 e0       	ldi	r24, 0x07	; 7
 24e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	// Esperar hasta que la medición esté lista
	while (!measurement_ready);
 252:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <measurement_ready>
 256:	88 23       	and	r24, r24
 258:	e1 f3       	breq	.-8      	; 0x252 <tcs3200_read_frequency+0x26>
	
	TIMSK2 &= ~(1 << OCIE2A); // Deshabilitar interrupción
 25a:	e0 e7       	ldi	r30, 0x70	; 112
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	8d 7f       	andi	r24, 0xFD	; 253
 262:	80 83       	st	Z, r24
	
	return pulse_count * 5; // Multiplicar por 5 para obtener Hz (200ms = 1/5 segundo)
 264:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <pulse_count>
 268:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <pulse_count+0x1>
 26c:	9c 01       	movw	r18, r24
 26e:	22 0f       	add	r18, r18
 270:	33 1f       	adc	r19, r19
 272:	22 0f       	add	r18, r18
 274:	33 1f       	adc	r19, r19
}
 276:	82 0f       	add	r24, r18
 278:	93 1f       	adc	r25, r19
 27a:	08 95       	ret

0000027c <tcs3200_read_rgb>:

// Función para leer valores RGB
void tcs3200_read_rgb(rgb_values_t* rgb) {
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	ec 01       	movw	r28, r24
	// Leer rojo
	tcs3200_select_filter(1);
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 ba 00 	call	0x174	; 0x174 <tcs3200_select_filter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 288:	83 ec       	ldi	r24, 0xC3	; 195
 28a:	99 e0       	ldi	r25, 0x09	; 9
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <tcs3200_read_rgb+0x10>
 290:	00 c0       	rjmp	.+0      	; 0x292 <tcs3200_read_rgb+0x16>
 292:	00 00       	nop
	_delay_ms(10);
	rgb->red = tcs3200_read_frequency();
 294:	0e 94 16 01 	call	0x22c	; 0x22c <tcs3200_read_frequency>
 298:	99 83       	std	Y+1, r25	; 0x01
 29a:	88 83       	st	Y, r24
	
	// Leer verde
	tcs3200_select_filter(3);
 29c:	83 e0       	ldi	r24, 0x03	; 3
 29e:	0e 94 ba 00 	call	0x174	; 0x174 <tcs3200_select_filter>
 2a2:	83 ec       	ldi	r24, 0xC3	; 195
 2a4:	99 e0       	ldi	r25, 0x09	; 9
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <tcs3200_read_rgb+0x2a>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <tcs3200_read_rgb+0x30>
 2ac:	00 00       	nop
	_delay_ms(10);
	rgb->green = tcs3200_read_frequency();
 2ae:	0e 94 16 01 	call	0x22c	; 0x22c <tcs3200_read_frequency>
 2b2:	9b 83       	std	Y+3, r25	; 0x03
 2b4:	8a 83       	std	Y+2, r24	; 0x02
	
	// Leer azul
	tcs3200_select_filter(2);
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	0e 94 ba 00 	call	0x174	; 0x174 <tcs3200_select_filter>
 2bc:	83 ec       	ldi	r24, 0xC3	; 195
 2be:	99 e0       	ldi	r25, 0x09	; 9
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <tcs3200_read_rgb+0x44>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <tcs3200_read_rgb+0x4a>
 2c6:	00 00       	nop
	_delay_ms(10);
	rgb->blue = tcs3200_read_frequency();
 2c8:	0e 94 16 01 	call	0x22c	; 0x22c <tcs3200_read_frequency>
 2cc:	9d 83       	std	Y+5, r25	; 0x05
 2ce:	8c 83       	std	Y+4, r24	; 0x04
}
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

000002d6 <is_blue_color>:

// Función para detectar si el color es azul (mejorada)
uint8_t is_blue_color(rgb_values_t* rgb) {
 2d6:	3f 92       	push	r3
 2d8:	4f 92       	push	r4
 2da:	5f 92       	push	r5
 2dc:	6f 92       	push	r6
 2de:	7f 92       	push	r7
 2e0:	8f 92       	push	r8
 2e2:	9f 92       	push	r9
 2e4:	af 92       	push	r10
 2e6:	bf 92       	push	r11
 2e8:	cf 92       	push	r12
 2ea:	df 92       	push	r13
 2ec:	ef 92       	push	r14
 2ee:	ff 92       	push	r15
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	fc 01       	movw	r30, r24
	// Calcular el total para obtener porcentajes relativos
	uint32_t total = rgb->red + rgb->green + rgb->blue;
 2fa:	80 81       	ld	r24, Z
 2fc:	91 81       	ldd	r25, Z+1	; 0x01
 2fe:	02 81       	ldd	r16, Z+2	; 0x02
 300:	13 81       	ldd	r17, Z+3	; 0x03
 302:	6c 01       	movw	r12, r24
 304:	c0 0e       	add	r12, r16
 306:	d1 1e       	adc	r13, r17
 308:	c4 81       	ldd	r28, Z+4	; 0x04
 30a:	d5 81       	ldd	r29, Z+5	; 0x05
 30c:	cc 0e       	add	r12, r28
 30e:	dd 1e       	adc	r13, r29
 310:	e1 2c       	mov	r14, r1
 312:	f1 2c       	mov	r15, r1
	
	// Evitar división por cero
	if (total < 100) return 0;
 314:	24 e6       	ldi	r18, 0x64	; 100
 316:	c2 16       	cp	r12, r18
 318:	d1 04       	cpc	r13, r1
 31a:	e1 04       	cpc	r14, r1
 31c:	f1 04       	cpc	r15, r1
 31e:	d0 f1       	brcs	.+116    	; 0x394 <is_blue_color+0xbe>
	
	// Calcular porcentajes
	uint16_t red_percent = (rgb->red * 100) / total;
 320:	0f 2e       	mov	r0, r31
 322:	f4 e6       	ldi	r31, 0x64	; 100
 324:	3f 2e       	mov	r3, r31
 326:	f0 2d       	mov	r31, r0
 328:	38 9e       	mul	r3, r24
 32a:	b0 01       	movw	r22, r0
 32c:	39 9e       	mul	r3, r25
 32e:	70 0d       	add	r23, r0
 330:	11 24       	eor	r1, r1
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	a7 01       	movw	r20, r14
 338:	96 01       	movw	r18, r12
 33a:	0e 94 a6 02 	call	0x54c	; 0x54c <__udivmodsi4>
 33e:	49 01       	movw	r8, r18
 340:	5a 01       	movw	r10, r20
	uint16_t green_percent = (rgb->green * 100) / total;
 342:	30 9e       	mul	r3, r16
 344:	b0 01       	movw	r22, r0
 346:	31 9e       	mul	r3, r17
 348:	70 0d       	add	r23, r0
 34a:	11 24       	eor	r1, r1
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	a7 01       	movw	r20, r14
 352:	96 01       	movw	r18, r12
 354:	0e 94 a6 02 	call	0x54c	; 0x54c <__udivmodsi4>
 358:	29 01       	movw	r4, r18
 35a:	3a 01       	movw	r6, r20
	uint16_t blue_percent = (rgb->blue * 100) / total;
 35c:	3c 9e       	mul	r3, r28
 35e:	b0 01       	movw	r22, r0
 360:	3d 9e       	mul	r3, r29
 362:	70 0d       	add	r23, r0
 364:	11 24       	eor	r1, r1
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	a7 01       	movw	r20, r14
 36c:	96 01       	movw	r18, r12
 36e:	0e 94 a6 02 	call	0x54c	; 0x54c <__udivmodsi4>
	
	// Criterios para detectar azul:
	// 1. El azul debe ser al menos 40% del total
	// 2. El azul debe ser mayor que rojo y verde
	// 3. La diferencia debe ser significativa (al menos 10%)
	if ((blue_percent >= 40) &&
 372:	28 32       	cpi	r18, 0x28	; 40
 374:	31 05       	cpc	r19, r1
 376:	80 f0       	brcs	.+32     	; 0x398 <is_blue_color+0xc2>
	(blue_percent > red_percent + 10) &&
 378:	8a e0       	ldi	r24, 0x0A	; 10
 37a:	88 0e       	add	r8, r24
 37c:	91 1c       	adc	r9, r1
	
	// Criterios para detectar azul:
	// 1. El azul debe ser al menos 40% del total
	// 2. El azul debe ser mayor que rojo y verde
	// 3. La diferencia debe ser significativa (al menos 10%)
	if ((blue_percent >= 40) &&
 37e:	82 16       	cp	r8, r18
 380:	93 06       	cpc	r9, r19
 382:	60 f4       	brcc	.+24     	; 0x39c <is_blue_color+0xc6>
	(blue_percent > red_percent + 10) &&
	(blue_percent > green_percent + 10)) {
 384:	8a e0       	ldi	r24, 0x0A	; 10
 386:	48 0e       	add	r4, r24
 388:	51 1c       	adc	r5, r1
	// Criterios para detectar azul:
	// 1. El azul debe ser al menos 40% del total
	// 2. El azul debe ser mayor que rojo y verde
	// 3. La diferencia debe ser significativa (al menos 10%)
	if ((blue_percent >= 40) &&
	(blue_percent > red_percent + 10) &&
 38a:	42 16       	cp	r4, r18
 38c:	53 06       	cpc	r5, r19
 38e:	40 f0       	brcs	.+16     	; 0x3a0 <is_blue_color+0xca>
	(blue_percent > green_percent + 10)) {
		return 1;
	}
	return 0;
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	07 c0       	rjmp	.+14     	; 0x3a2 <is_blue_color+0xcc>
uint8_t is_blue_color(rgb_values_t* rgb) {
	// Calcular el total para obtener porcentajes relativos
	uint32_t total = rgb->red + rgb->green + rgb->blue;
	
	// Evitar división por cero
	if (total < 100) return 0;
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	05 c0       	rjmp	.+10     	; 0x3a2 <is_blue_color+0xcc>
	if ((blue_percent >= 40) &&
	(blue_percent > red_percent + 10) &&
	(blue_percent > green_percent + 10)) {
		return 1;
	}
	return 0;
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	03 c0       	rjmp	.+6      	; 0x3a2 <is_blue_color+0xcc>
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	01 c0       	rjmp	.+2      	; 0x3a2 <is_blue_color+0xcc>
	// 2. El azul debe ser mayor que rojo y verde
	// 3. La diferencia debe ser significativa (al menos 10%)
	if ((blue_percent >= 40) &&
	(blue_percent > red_percent + 10) &&
	(blue_percent > green_percent + 10)) {
		return 1;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	ff 90       	pop	r15
 3ac:	ef 90       	pop	r14
 3ae:	df 90       	pop	r13
 3b0:	cf 90       	pop	r12
 3b2:	bf 90       	pop	r11
 3b4:	af 90       	pop	r10
 3b6:	9f 90       	pop	r9
 3b8:	8f 90       	pop	r8
 3ba:	7f 90       	pop	r7
 3bc:	6f 90       	pop	r6
 3be:	5f 90       	pop	r5
 3c0:	4f 90       	pop	r4
 3c2:	3f 90       	pop	r3
 3c4:	08 95       	ret

000003c6 <main>:

int main(void) {
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	ca 56       	subi	r28, 0x6A	; 106
 3d0:	d1 09       	sbc	r29, r1
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	f8 94       	cli
 3d6:	de bf       	out	0x3e, r29	; 62
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	cd bf       	out	0x3d, r28	; 61
	rgb_values_t color_values;
	char buffer[100];
	
	// Inicializar periféricos
	uart_init();
 3dc:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_init>
	tcs3200_init();
 3e0:	0e 94 9b 00 	call	0x136	; 0x136 <tcs3200_init>
	servo_init();
 3e4:	0e 94 73 00 	call	0xe6	; 0xe6 <servo_init>
	
	// Habilitar interrupciones globales
	sei();
 3e8:	78 94       	sei
	
	uart_puts("Sistema iniciado - Detector de color azul\r\n");
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	0e 94 66 00 	call	0xcc	; 0xcc <uart_puts>
	uart_puts("Servo en posicion inicial (0 grados)\r\n");
 3f2:	8c e2       	ldi	r24, 0x2C	; 44
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	0e 94 66 00 	call	0xcc	; 0xcc <uart_puts>
	
	while(1) {
		// Leer valores RGB del sensor
		tcs3200_read_rgb(&color_values);
 3fa:	ce 01       	movw	r24, r28
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	0e 94 3e 01 	call	0x27c	; 0x27c <tcs3200_read_rgb>
		
		// Calcular porcentajes para mejor análisis
		uint32_t total = color_values.red + color_values.green + color_values.blue;
 402:	09 81       	ldd	r16, Y+1	; 0x01
 404:	1a 81       	ldd	r17, Y+2	; 0x02
 406:	ab 80       	ldd	r10, Y+3	; 0x03
 408:	bc 80       	ldd	r11, Y+4	; 0x04
 40a:	68 01       	movw	r12, r16
 40c:	ca 0c       	add	r12, r10
 40e:	db 1c       	adc	r13, r11
 410:	8d 80       	ldd	r8, Y+5	; 0x05
 412:	9e 80       	ldd	r9, Y+6	; 0x06
 414:	c8 0c       	add	r12, r8
 416:	d9 1c       	adc	r13, r9
 418:	e1 2c       	mov	r14, r1
 41a:	f1 2c       	mov	r15, r1
		uint16_t red_percent = 0, green_percent = 0, blue_percent = 0;
		
		if (total > 0) {
 41c:	c1 14       	cp	r12, r1
 41e:	d1 04       	cpc	r13, r1
 420:	e1 04       	cpc	r14, r1
 422:	f1 04       	cpc	r15, r1
 424:	51 f1       	breq	.+84     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			red_percent = (color_values.red * 100) / total;
 426:	0f 2e       	mov	r0, r31
 428:	f4 e6       	ldi	r31, 0x64	; 100
 42a:	3f 2e       	mov	r3, r31
 42c:	f0 2d       	mov	r31, r0
 42e:	30 9e       	mul	r3, r16
 430:	b0 01       	movw	r22, r0
 432:	31 9e       	mul	r3, r17
 434:	70 0d       	add	r23, r0
 436:	11 24       	eor	r1, r1
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	a7 01       	movw	r20, r14
 43e:	96 01       	movw	r18, r12
 440:	0e 94 a6 02 	call	0x54c	; 0x54c <__udivmodsi4>
 444:	72 2e       	mov	r7, r18
 446:	63 2e       	mov	r6, r19
			green_percent = (color_values.green * 100) / total;
 448:	3a 9c       	mul	r3, r10
 44a:	b0 01       	movw	r22, r0
 44c:	3b 9c       	mul	r3, r11
 44e:	70 0d       	add	r23, r0
 450:	11 24       	eor	r1, r1
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	a7 01       	movw	r20, r14
 458:	96 01       	movw	r18, r12
 45a:	0e 94 a6 02 	call	0x54c	; 0x54c <__udivmodsi4>
 45e:	52 2e       	mov	r5, r18
 460:	43 2e       	mov	r4, r19
			blue_percent = (color_values.blue * 100) / total;
 462:	38 9c       	mul	r3, r8
 464:	b0 01       	movw	r22, r0
 466:	39 9c       	mul	r3, r9
 468:	70 0d       	add	r23, r0
 46a:	11 24       	eor	r1, r1
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	a7 01       	movw	r20, r14
 472:	96 01       	movw	r18, r12
 474:	0e 94 a6 02 	call	0x54c	; 0x54c <__udivmodsi4>
 478:	06 c0       	rjmp	.+12     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		// Leer valores RGB del sensor
		tcs3200_read_rgb(&color_values);
		
		// Calcular porcentajes para mejor análisis
		uint32_t total = color_values.red + color_values.green + color_values.blue;
		uint16_t red_percent = 0, green_percent = 0, blue_percent = 0;
 47a:	20 e0       	ldi	r18, 0x00	; 0
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	51 2c       	mov	r5, r1
 480:	41 2c       	mov	r4, r1
 482:	71 2c       	mov	r7, r1
 484:	61 2c       	mov	r6, r1
			green_percent = (color_values.green * 100) / total;
			blue_percent = (color_values.blue * 100) / total;
		}
		
		// Mostrar valores por UART con porcentajes
		sprintf(buffer, "RGB: R=%u(%u%%) G=%u(%u%%) B=%u(%u%%) Total=%lu\r\n",
 486:	1f 92       	push	r1
 488:	1f 92       	push	r1
 48a:	df 92       	push	r13
 48c:	cf 92       	push	r12
 48e:	3f 93       	push	r19
 490:	2f 93       	push	r18
 492:	9f 92       	push	r9
 494:	8f 92       	push	r8
 496:	4f 92       	push	r4
 498:	5f 92       	push	r5
 49a:	bf 92       	push	r11
 49c:	af 92       	push	r10
 49e:	6f 92       	push	r6
 4a0:	7f 92       	push	r7
 4a2:	1f 93       	push	r17
 4a4:	0f 93       	push	r16
 4a6:	83 e5       	ldi	r24, 0x53	; 83
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	9f 93       	push	r25
 4ac:	8f 93       	push	r24
 4ae:	8e 01       	movw	r16, r28
 4b0:	09 5f       	subi	r16, 0xF9	; 249
 4b2:	1f 4f       	sbci	r17, 0xFF	; 255
 4b4:	1f 93       	push	r17
 4b6:	0f 93       	push	r16
 4b8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <sprintf>
		color_values.red, red_percent,
		color_values.green, green_percent,
		color_values.blue, blue_percent, total);
		uart_puts(buffer);
 4bc:	c8 01       	movw	r24, r16
 4be:	0e 94 66 00 	call	0xcc	; 0xcc <uart_puts>
		
		// Verificar si es color azul
		if (is_blue_color(&color_values)) {
 4c2:	ce 01       	movw	r24, r28
 4c4:	01 96       	adiw	r24, 0x01	; 1
 4c6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <is_blue_color>
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	f8 94       	cli
 4ce:	de bf       	out	0x3e, r29	; 62
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	cd bf       	out	0x3d, r28	; 61
 4d4:	88 23       	and	r24, r24
 4d6:	c1 f0       	breq	.+48     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
			uart_puts("¡Color AZUL detectado! Moviendo servo a 90 grados\r\n");
 4d8:	85 e8       	ldi	r24, 0x85	; 133
 4da:	91 e0       	ldi	r25, 0x01	; 1
 4dc:	0e 94 66 00 	call	0xcc	; 0xcc <uart_puts>
			servo_set_position(90);
 4e0:	8a e5       	ldi	r24, 0x5A	; 90
 4e2:	0e 94 89 00 	call	0x112	; 0x112 <servo_set_position>
 4e6:	3f e7       	ldi	r19, 0x7F	; 127
 4e8:	8a e1       	ldi	r24, 0x1A	; 26
 4ea:	96 e0       	ldi	r25, 0x06	; 6
 4ec:	31 50       	subi	r19, 0x01	; 1
 4ee:	80 40       	sbci	r24, 0x00	; 0
 4f0:	90 40       	sbci	r25, 0x00	; 0
 4f2:	e1 f7       	brne	.-8      	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4f6:	00 00       	nop
			_delay_ms(2000); // Mantener posición por 2 segundos
			
			uart_puts("Regresando servo a posicion inicial\r\n");
 4f8:	89 eb       	ldi	r24, 0xB9	; 185
 4fa:	91 e0       	ldi	r25, 0x01	; 1
 4fc:	0e 94 66 00 	call	0xcc	; 0xcc <uart_puts>
			servo_set_position(0);
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	0e 94 89 00 	call	0x112	; 0x112 <servo_set_position>
 506:	04 c0       	rjmp	.+8      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
			} else {
			uart_puts("Color no es azul\r\n");
 508:	8f ed       	ldi	r24, 0xDF	; 223
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	0e 94 66 00 	call	0xcc	; 0xcc <uart_puts>
 510:	2f e9       	ldi	r18, 0x9F	; 159
 512:	36 e8       	ldi	r19, 0x86	; 134
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	21 50       	subi	r18, 0x01	; 1
 518:	30 40       	sbci	r19, 0x00	; 0
 51a:	80 40       	sbci	r24, 0x00	; 0
 51c:	e1 f7       	brne	.-8      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 520:	00 00       	nop
 522:	6b cf       	rjmp	.-298    	; 0x3fa <main+0x34>

00000524 <__divmodhi4>:
 524:	97 fb       	bst	r25, 7
 526:	07 2e       	mov	r0, r23
 528:	16 f4       	brtc	.+4      	; 0x52e <__divmodhi4+0xa>
 52a:	00 94       	com	r0
 52c:	07 d0       	rcall	.+14     	; 0x53c <__divmodhi4_neg1>
 52e:	77 fd       	sbrc	r23, 7
 530:	09 d0       	rcall	.+18     	; 0x544 <__divmodhi4_neg2>
 532:	0e 94 c8 02 	call	0x590	; 0x590 <__udivmodhi4>
 536:	07 fc       	sbrc	r0, 7
 538:	05 d0       	rcall	.+10     	; 0x544 <__divmodhi4_neg2>
 53a:	3e f4       	brtc	.+14     	; 0x54a <__divmodhi4_exit>

0000053c <__divmodhi4_neg1>:
 53c:	90 95       	com	r25
 53e:	81 95       	neg	r24
 540:	9f 4f       	sbci	r25, 0xFF	; 255
 542:	08 95       	ret

00000544 <__divmodhi4_neg2>:
 544:	70 95       	com	r23
 546:	61 95       	neg	r22
 548:	7f 4f       	sbci	r23, 0xFF	; 255

0000054a <__divmodhi4_exit>:
 54a:	08 95       	ret

0000054c <__udivmodsi4>:
 54c:	a1 e2       	ldi	r26, 0x21	; 33
 54e:	1a 2e       	mov	r1, r26
 550:	aa 1b       	sub	r26, r26
 552:	bb 1b       	sub	r27, r27
 554:	fd 01       	movw	r30, r26
 556:	0d c0       	rjmp	.+26     	; 0x572 <__udivmodsi4_ep>

00000558 <__udivmodsi4_loop>:
 558:	aa 1f       	adc	r26, r26
 55a:	bb 1f       	adc	r27, r27
 55c:	ee 1f       	adc	r30, r30
 55e:	ff 1f       	adc	r31, r31
 560:	a2 17       	cp	r26, r18
 562:	b3 07       	cpc	r27, r19
 564:	e4 07       	cpc	r30, r20
 566:	f5 07       	cpc	r31, r21
 568:	20 f0       	brcs	.+8      	; 0x572 <__udivmodsi4_ep>
 56a:	a2 1b       	sub	r26, r18
 56c:	b3 0b       	sbc	r27, r19
 56e:	e4 0b       	sbc	r30, r20
 570:	f5 0b       	sbc	r31, r21

00000572 <__udivmodsi4_ep>:
 572:	66 1f       	adc	r22, r22
 574:	77 1f       	adc	r23, r23
 576:	88 1f       	adc	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	1a 94       	dec	r1
 57c:	69 f7       	brne	.-38     	; 0x558 <__udivmodsi4_loop>
 57e:	60 95       	com	r22
 580:	70 95       	com	r23
 582:	80 95       	com	r24
 584:	90 95       	com	r25
 586:	9b 01       	movw	r18, r22
 588:	ac 01       	movw	r20, r24
 58a:	bd 01       	movw	r22, r26
 58c:	cf 01       	movw	r24, r30
 58e:	08 95       	ret

00000590 <__udivmodhi4>:
 590:	aa 1b       	sub	r26, r26
 592:	bb 1b       	sub	r27, r27
 594:	51 e1       	ldi	r21, 0x11	; 17
 596:	07 c0       	rjmp	.+14     	; 0x5a6 <__udivmodhi4_ep>

00000598 <__udivmodhi4_loop>:
 598:	aa 1f       	adc	r26, r26
 59a:	bb 1f       	adc	r27, r27
 59c:	a6 17       	cp	r26, r22
 59e:	b7 07       	cpc	r27, r23
 5a0:	10 f0       	brcs	.+4      	; 0x5a6 <__udivmodhi4_ep>
 5a2:	a6 1b       	sub	r26, r22
 5a4:	b7 0b       	sbc	r27, r23

000005a6 <__udivmodhi4_ep>:
 5a6:	88 1f       	adc	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	5a 95       	dec	r21
 5ac:	a9 f7       	brne	.-22     	; 0x598 <__udivmodhi4_loop>
 5ae:	80 95       	com	r24
 5b0:	90 95       	com	r25
 5b2:	bc 01       	movw	r22, r24
 5b4:	cd 01       	movw	r24, r26
 5b6:	08 95       	ret

000005b8 <sprintf>:
 5b8:	ae e0       	ldi	r26, 0x0E	; 14
 5ba:	b0 e0       	ldi	r27, 0x00	; 0
 5bc:	e2 ee       	ldi	r30, 0xE2	; 226
 5be:	f2 e0       	ldi	r31, 0x02	; 2
 5c0:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__prologue_saves__+0x1c>
 5c4:	0d 89       	ldd	r16, Y+21	; 0x15
 5c6:	1e 89       	ldd	r17, Y+22	; 0x16
 5c8:	86 e0       	ldi	r24, 0x06	; 6
 5ca:	8c 83       	std	Y+4, r24	; 0x04
 5cc:	1a 83       	std	Y+2, r17	; 0x02
 5ce:	09 83       	std	Y+1, r16	; 0x01
 5d0:	8f ef       	ldi	r24, 0xFF	; 255
 5d2:	9f e7       	ldi	r25, 0x7F	; 127
 5d4:	9e 83       	std	Y+6, r25	; 0x06
 5d6:	8d 83       	std	Y+5, r24	; 0x05
 5d8:	ae 01       	movw	r20, r28
 5da:	47 5e       	subi	r20, 0xE7	; 231
 5dc:	5f 4f       	sbci	r21, 0xFF	; 255
 5de:	6f 89       	ldd	r22, Y+23	; 0x17
 5e0:	78 8d       	ldd	r23, Y+24	; 0x18
 5e2:	ce 01       	movw	r24, r28
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <vfprintf>
 5ea:	ef 81       	ldd	r30, Y+7	; 0x07
 5ec:	f8 85       	ldd	r31, Y+8	; 0x08
 5ee:	e0 0f       	add	r30, r16
 5f0:	f1 1f       	adc	r31, r17
 5f2:	10 82       	st	Z, r1
 5f4:	2e 96       	adiw	r28, 0x0e	; 14
 5f6:	e4 e0       	ldi	r30, 0x04	; 4
 5f8:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__epilogue_restores__+0x1c>

000005fc <vfprintf>:
 5fc:	ab e0       	ldi	r26, 0x0B	; 11
 5fe:	b0 e0       	ldi	r27, 0x00	; 0
 600:	e4 e0       	ldi	r30, 0x04	; 4
 602:	f3 e0       	ldi	r31, 0x03	; 3
 604:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__prologue_saves__>
 608:	6c 01       	movw	r12, r24
 60a:	7b 01       	movw	r14, r22
 60c:	8a 01       	movw	r16, r20
 60e:	fc 01       	movw	r30, r24
 610:	17 82       	std	Z+7, r1	; 0x07
 612:	16 82       	std	Z+6, r1	; 0x06
 614:	83 81       	ldd	r24, Z+3	; 0x03
 616:	81 ff       	sbrs	r24, 1
 618:	cc c1       	rjmp	.+920    	; 0x9b2 <__stack+0xb3>
 61a:	ce 01       	movw	r24, r28
 61c:	01 96       	adiw	r24, 0x01	; 1
 61e:	3c 01       	movw	r6, r24
 620:	f6 01       	movw	r30, r12
 622:	93 81       	ldd	r25, Z+3	; 0x03
 624:	f7 01       	movw	r30, r14
 626:	93 fd       	sbrc	r25, 3
 628:	85 91       	lpm	r24, Z+
 62a:	93 ff       	sbrs	r25, 3
 62c:	81 91       	ld	r24, Z+
 62e:	7f 01       	movw	r14, r30
 630:	88 23       	and	r24, r24
 632:	09 f4       	brne	.+2      	; 0x636 <vfprintf+0x3a>
 634:	ba c1       	rjmp	.+884    	; 0x9aa <__stack+0xab>
 636:	85 32       	cpi	r24, 0x25	; 37
 638:	39 f4       	brne	.+14     	; 0x648 <vfprintf+0x4c>
 63a:	93 fd       	sbrc	r25, 3
 63c:	85 91       	lpm	r24, Z+
 63e:	93 ff       	sbrs	r25, 3
 640:	81 91       	ld	r24, Z+
 642:	7f 01       	movw	r14, r30
 644:	85 32       	cpi	r24, 0x25	; 37
 646:	29 f4       	brne	.+10     	; 0x652 <vfprintf+0x56>
 648:	b6 01       	movw	r22, r12
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fputc>
 650:	e7 cf       	rjmp	.-50     	; 0x620 <vfprintf+0x24>
 652:	91 2c       	mov	r9, r1
 654:	21 2c       	mov	r2, r1
 656:	31 2c       	mov	r3, r1
 658:	ff e1       	ldi	r31, 0x1F	; 31
 65a:	f3 15       	cp	r31, r3
 65c:	d8 f0       	brcs	.+54     	; 0x694 <vfprintf+0x98>
 65e:	8b 32       	cpi	r24, 0x2B	; 43
 660:	79 f0       	breq	.+30     	; 0x680 <vfprintf+0x84>
 662:	38 f4       	brcc	.+14     	; 0x672 <vfprintf+0x76>
 664:	80 32       	cpi	r24, 0x20	; 32
 666:	79 f0       	breq	.+30     	; 0x686 <vfprintf+0x8a>
 668:	83 32       	cpi	r24, 0x23	; 35
 66a:	a1 f4       	brne	.+40     	; 0x694 <vfprintf+0x98>
 66c:	23 2d       	mov	r18, r3
 66e:	20 61       	ori	r18, 0x10	; 16
 670:	1d c0       	rjmp	.+58     	; 0x6ac <vfprintf+0xb0>
 672:	8d 32       	cpi	r24, 0x2D	; 45
 674:	61 f0       	breq	.+24     	; 0x68e <vfprintf+0x92>
 676:	80 33       	cpi	r24, 0x30	; 48
 678:	69 f4       	brne	.+26     	; 0x694 <vfprintf+0x98>
 67a:	23 2d       	mov	r18, r3
 67c:	21 60       	ori	r18, 0x01	; 1
 67e:	16 c0       	rjmp	.+44     	; 0x6ac <vfprintf+0xb0>
 680:	83 2d       	mov	r24, r3
 682:	82 60       	ori	r24, 0x02	; 2
 684:	38 2e       	mov	r3, r24
 686:	e3 2d       	mov	r30, r3
 688:	e4 60       	ori	r30, 0x04	; 4
 68a:	3e 2e       	mov	r3, r30
 68c:	2a c0       	rjmp	.+84     	; 0x6e2 <vfprintf+0xe6>
 68e:	f3 2d       	mov	r31, r3
 690:	f8 60       	ori	r31, 0x08	; 8
 692:	1d c0       	rjmp	.+58     	; 0x6ce <vfprintf+0xd2>
 694:	37 fc       	sbrc	r3, 7
 696:	2d c0       	rjmp	.+90     	; 0x6f2 <vfprintf+0xf6>
 698:	20 ed       	ldi	r18, 0xD0	; 208
 69a:	28 0f       	add	r18, r24
 69c:	2a 30       	cpi	r18, 0x0A	; 10
 69e:	40 f0       	brcs	.+16     	; 0x6b0 <vfprintf+0xb4>
 6a0:	8e 32       	cpi	r24, 0x2E	; 46
 6a2:	b9 f4       	brne	.+46     	; 0x6d2 <vfprintf+0xd6>
 6a4:	36 fc       	sbrc	r3, 6
 6a6:	81 c1       	rjmp	.+770    	; 0x9aa <__stack+0xab>
 6a8:	23 2d       	mov	r18, r3
 6aa:	20 64       	ori	r18, 0x40	; 64
 6ac:	32 2e       	mov	r3, r18
 6ae:	19 c0       	rjmp	.+50     	; 0x6e2 <vfprintf+0xe6>
 6b0:	36 fe       	sbrs	r3, 6
 6b2:	06 c0       	rjmp	.+12     	; 0x6c0 <vfprintf+0xc4>
 6b4:	8a e0       	ldi	r24, 0x0A	; 10
 6b6:	98 9e       	mul	r9, r24
 6b8:	20 0d       	add	r18, r0
 6ba:	11 24       	eor	r1, r1
 6bc:	92 2e       	mov	r9, r18
 6be:	11 c0       	rjmp	.+34     	; 0x6e2 <vfprintf+0xe6>
 6c0:	ea e0       	ldi	r30, 0x0A	; 10
 6c2:	2e 9e       	mul	r2, r30
 6c4:	20 0d       	add	r18, r0
 6c6:	11 24       	eor	r1, r1
 6c8:	22 2e       	mov	r2, r18
 6ca:	f3 2d       	mov	r31, r3
 6cc:	f0 62       	ori	r31, 0x20	; 32
 6ce:	3f 2e       	mov	r3, r31
 6d0:	08 c0       	rjmp	.+16     	; 0x6e2 <vfprintf+0xe6>
 6d2:	8c 36       	cpi	r24, 0x6C	; 108
 6d4:	21 f4       	brne	.+8      	; 0x6de <vfprintf+0xe2>
 6d6:	83 2d       	mov	r24, r3
 6d8:	80 68       	ori	r24, 0x80	; 128
 6da:	38 2e       	mov	r3, r24
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <vfprintf+0xe6>
 6de:	88 36       	cpi	r24, 0x68	; 104
 6e0:	41 f4       	brne	.+16     	; 0x6f2 <vfprintf+0xf6>
 6e2:	f7 01       	movw	r30, r14
 6e4:	93 fd       	sbrc	r25, 3
 6e6:	85 91       	lpm	r24, Z+
 6e8:	93 ff       	sbrs	r25, 3
 6ea:	81 91       	ld	r24, Z+
 6ec:	7f 01       	movw	r14, r30
 6ee:	81 11       	cpse	r24, r1
 6f0:	b3 cf       	rjmp	.-154    	; 0x658 <vfprintf+0x5c>
 6f2:	98 2f       	mov	r25, r24
 6f4:	9f 7d       	andi	r25, 0xDF	; 223
 6f6:	95 54       	subi	r25, 0x45	; 69
 6f8:	93 30       	cpi	r25, 0x03	; 3
 6fa:	28 f4       	brcc	.+10     	; 0x706 <vfprintf+0x10a>
 6fc:	0c 5f       	subi	r16, 0xFC	; 252
 6fe:	1f 4f       	sbci	r17, 0xFF	; 255
 700:	9f e3       	ldi	r25, 0x3F	; 63
 702:	99 83       	std	Y+1, r25	; 0x01
 704:	0d c0       	rjmp	.+26     	; 0x720 <vfprintf+0x124>
 706:	83 36       	cpi	r24, 0x63	; 99
 708:	31 f0       	breq	.+12     	; 0x716 <vfprintf+0x11a>
 70a:	83 37       	cpi	r24, 0x73	; 115
 70c:	71 f0       	breq	.+28     	; 0x72a <vfprintf+0x12e>
 70e:	83 35       	cpi	r24, 0x53	; 83
 710:	09 f0       	breq	.+2      	; 0x714 <vfprintf+0x118>
 712:	59 c0       	rjmp	.+178    	; 0x7c6 <vfprintf+0x1ca>
 714:	21 c0       	rjmp	.+66     	; 0x758 <vfprintf+0x15c>
 716:	f8 01       	movw	r30, r16
 718:	80 81       	ld	r24, Z
 71a:	89 83       	std	Y+1, r24	; 0x01
 71c:	0e 5f       	subi	r16, 0xFE	; 254
 71e:	1f 4f       	sbci	r17, 0xFF	; 255
 720:	88 24       	eor	r8, r8
 722:	83 94       	inc	r8
 724:	91 2c       	mov	r9, r1
 726:	53 01       	movw	r10, r6
 728:	13 c0       	rjmp	.+38     	; 0x750 <vfprintf+0x154>
 72a:	28 01       	movw	r4, r16
 72c:	f2 e0       	ldi	r31, 0x02	; 2
 72e:	4f 0e       	add	r4, r31
 730:	51 1c       	adc	r5, r1
 732:	f8 01       	movw	r30, r16
 734:	a0 80       	ld	r10, Z
 736:	b1 80       	ldd	r11, Z+1	; 0x01
 738:	36 fe       	sbrs	r3, 6
 73a:	03 c0       	rjmp	.+6      	; 0x742 <vfprintf+0x146>
 73c:	69 2d       	mov	r22, r9
 73e:	70 e0       	ldi	r23, 0x00	; 0
 740:	02 c0       	rjmp	.+4      	; 0x746 <vfprintf+0x14a>
 742:	6f ef       	ldi	r22, 0xFF	; 255
 744:	7f ef       	ldi	r23, 0xFF	; 255
 746:	c5 01       	movw	r24, r10
 748:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <strnlen>
 74c:	4c 01       	movw	r8, r24
 74e:	82 01       	movw	r16, r4
 750:	f3 2d       	mov	r31, r3
 752:	ff 77       	andi	r31, 0x7F	; 127
 754:	3f 2e       	mov	r3, r31
 756:	16 c0       	rjmp	.+44     	; 0x784 <vfprintf+0x188>
 758:	28 01       	movw	r4, r16
 75a:	22 e0       	ldi	r18, 0x02	; 2
 75c:	42 0e       	add	r4, r18
 75e:	51 1c       	adc	r5, r1
 760:	f8 01       	movw	r30, r16
 762:	a0 80       	ld	r10, Z
 764:	b1 80       	ldd	r11, Z+1	; 0x01
 766:	36 fe       	sbrs	r3, 6
 768:	03 c0       	rjmp	.+6      	; 0x770 <vfprintf+0x174>
 76a:	69 2d       	mov	r22, r9
 76c:	70 e0       	ldi	r23, 0x00	; 0
 76e:	02 c0       	rjmp	.+4      	; 0x774 <vfprintf+0x178>
 770:	6f ef       	ldi	r22, 0xFF	; 255
 772:	7f ef       	ldi	r23, 0xFF	; 255
 774:	c5 01       	movw	r24, r10
 776:	0e 94 df 04 	call	0x9be	; 0x9be <strnlen_P>
 77a:	4c 01       	movw	r8, r24
 77c:	f3 2d       	mov	r31, r3
 77e:	f0 68       	ori	r31, 0x80	; 128
 780:	3f 2e       	mov	r3, r31
 782:	82 01       	movw	r16, r4
 784:	33 fc       	sbrc	r3, 3
 786:	1b c0       	rjmp	.+54     	; 0x7be <vfprintf+0x1c2>
 788:	82 2d       	mov	r24, r2
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	88 16       	cp	r8, r24
 78e:	99 06       	cpc	r9, r25
 790:	b0 f4       	brcc	.+44     	; 0x7be <vfprintf+0x1c2>
 792:	b6 01       	movw	r22, r12
 794:	80 e2       	ldi	r24, 0x20	; 32
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fputc>
 79c:	2a 94       	dec	r2
 79e:	f4 cf       	rjmp	.-24     	; 0x788 <vfprintf+0x18c>
 7a0:	f5 01       	movw	r30, r10
 7a2:	37 fc       	sbrc	r3, 7
 7a4:	85 91       	lpm	r24, Z+
 7a6:	37 fe       	sbrs	r3, 7
 7a8:	81 91       	ld	r24, Z+
 7aa:	5f 01       	movw	r10, r30
 7ac:	b6 01       	movw	r22, r12
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fputc>
 7b4:	21 10       	cpse	r2, r1
 7b6:	2a 94       	dec	r2
 7b8:	21 e0       	ldi	r18, 0x01	; 1
 7ba:	82 1a       	sub	r8, r18
 7bc:	91 08       	sbc	r9, r1
 7be:	81 14       	cp	r8, r1
 7c0:	91 04       	cpc	r9, r1
 7c2:	71 f7       	brne	.-36     	; 0x7a0 <vfprintf+0x1a4>
 7c4:	e8 c0       	rjmp	.+464    	; 0x996 <__stack+0x97>
 7c6:	84 36       	cpi	r24, 0x64	; 100
 7c8:	11 f0       	breq	.+4      	; 0x7ce <vfprintf+0x1d2>
 7ca:	89 36       	cpi	r24, 0x69	; 105
 7cc:	41 f5       	brne	.+80     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7ce:	f8 01       	movw	r30, r16
 7d0:	37 fe       	sbrs	r3, 7
 7d2:	07 c0       	rjmp	.+14     	; 0x7e2 <vfprintf+0x1e6>
 7d4:	60 81       	ld	r22, Z
 7d6:	71 81       	ldd	r23, Z+1	; 0x01
 7d8:	82 81       	ldd	r24, Z+2	; 0x02
 7da:	93 81       	ldd	r25, Z+3	; 0x03
 7dc:	0c 5f       	subi	r16, 0xFC	; 252
 7de:	1f 4f       	sbci	r17, 0xFF	; 255
 7e0:	08 c0       	rjmp	.+16     	; 0x7f2 <vfprintf+0x1f6>
 7e2:	60 81       	ld	r22, Z
 7e4:	71 81       	ldd	r23, Z+1	; 0x01
 7e6:	07 2e       	mov	r0, r23
 7e8:	00 0c       	add	r0, r0
 7ea:	88 0b       	sbc	r24, r24
 7ec:	99 0b       	sbc	r25, r25
 7ee:	0e 5f       	subi	r16, 0xFE	; 254
 7f0:	1f 4f       	sbci	r17, 0xFF	; 255
 7f2:	f3 2d       	mov	r31, r3
 7f4:	ff 76       	andi	r31, 0x6F	; 111
 7f6:	3f 2e       	mov	r3, r31
 7f8:	97 ff       	sbrs	r25, 7
 7fa:	09 c0       	rjmp	.+18     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7fc:	90 95       	com	r25
 7fe:	80 95       	com	r24
 800:	70 95       	com	r23
 802:	61 95       	neg	r22
 804:	7f 4f       	sbci	r23, 0xFF	; 255
 806:	8f 4f       	sbci	r24, 0xFF	; 255
 808:	9f 4f       	sbci	r25, 0xFF	; 255
 80a:	f0 68       	ori	r31, 0x80	; 128
 80c:	3f 2e       	mov	r3, r31
 80e:	2a e0       	ldi	r18, 0x0A	; 10
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	a3 01       	movw	r20, r6
 814:	0e 94 31 05 	call	0xa62	; 0xa62 <__ultoa_invert>
 818:	88 2e       	mov	r8, r24
 81a:	86 18       	sub	r8, r6
 81c:	45 c0       	rjmp	.+138    	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 81e:	85 37       	cpi	r24, 0x75	; 117
 820:	31 f4       	brne	.+12     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 822:	23 2d       	mov	r18, r3
 824:	2f 7e       	andi	r18, 0xEF	; 239
 826:	b2 2e       	mov	r11, r18
 828:	2a e0       	ldi	r18, 0x0A	; 10
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	25 c0       	rjmp	.+74     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 82e:	93 2d       	mov	r25, r3
 830:	99 7f       	andi	r25, 0xF9	; 249
 832:	b9 2e       	mov	r11, r25
 834:	8f 36       	cpi	r24, 0x6F	; 111
 836:	c1 f0       	breq	.+48     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 838:	18 f4       	brcc	.+6      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 83a:	88 35       	cpi	r24, 0x58	; 88
 83c:	79 f0       	breq	.+30     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 83e:	b5 c0       	rjmp	.+362    	; 0x9aa <__stack+0xab>
 840:	80 37       	cpi	r24, 0x70	; 112
 842:	19 f0       	breq	.+6      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 844:	88 37       	cpi	r24, 0x78	; 120
 846:	21 f0       	breq	.+8      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 848:	b0 c0       	rjmp	.+352    	; 0x9aa <__stack+0xab>
 84a:	e9 2f       	mov	r30, r25
 84c:	e0 61       	ori	r30, 0x10	; 16
 84e:	be 2e       	mov	r11, r30
 850:	b4 fe       	sbrs	r11, 4
 852:	0d c0       	rjmp	.+26     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 854:	fb 2d       	mov	r31, r11
 856:	f4 60       	ori	r31, 0x04	; 4
 858:	bf 2e       	mov	r11, r31
 85a:	09 c0       	rjmp	.+18     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 85c:	34 fe       	sbrs	r3, 4
 85e:	0a c0       	rjmp	.+20     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 860:	29 2f       	mov	r18, r25
 862:	26 60       	ori	r18, 0x06	; 6
 864:	b2 2e       	mov	r11, r18
 866:	06 c0       	rjmp	.+12     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 868:	28 e0       	ldi	r18, 0x08	; 8
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	05 c0       	rjmp	.+10     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 86e:	20 e1       	ldi	r18, 0x10	; 16
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	02 c0       	rjmp	.+4      	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 874:	20 e1       	ldi	r18, 0x10	; 16
 876:	32 e0       	ldi	r19, 0x02	; 2
 878:	f8 01       	movw	r30, r16
 87a:	b7 fe       	sbrs	r11, 7
 87c:	07 c0       	rjmp	.+14     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 87e:	60 81       	ld	r22, Z
 880:	71 81       	ldd	r23, Z+1	; 0x01
 882:	82 81       	ldd	r24, Z+2	; 0x02
 884:	93 81       	ldd	r25, Z+3	; 0x03
 886:	0c 5f       	subi	r16, 0xFC	; 252
 888:	1f 4f       	sbci	r17, 0xFF	; 255
 88a:	06 c0       	rjmp	.+12     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 88c:	60 81       	ld	r22, Z
 88e:	71 81       	ldd	r23, Z+1	; 0x01
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 5f       	subi	r16, 0xFE	; 254
 896:	1f 4f       	sbci	r17, 0xFF	; 255
 898:	a3 01       	movw	r20, r6
 89a:	0e 94 31 05 	call	0xa62	; 0xa62 <__ultoa_invert>
 89e:	88 2e       	mov	r8, r24
 8a0:	86 18       	sub	r8, r6
 8a2:	fb 2d       	mov	r31, r11
 8a4:	ff 77       	andi	r31, 0x7F	; 127
 8a6:	3f 2e       	mov	r3, r31
 8a8:	36 fe       	sbrs	r3, 6
 8aa:	0d c0       	rjmp	.+26     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 8ac:	23 2d       	mov	r18, r3
 8ae:	2e 7f       	andi	r18, 0xFE	; 254
 8b0:	a2 2e       	mov	r10, r18
 8b2:	89 14       	cp	r8, r9
 8b4:	58 f4       	brcc	.+22     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
 8b6:	34 fe       	sbrs	r3, 4
 8b8:	0b c0       	rjmp	.+22     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 8ba:	32 fc       	sbrc	r3, 2
 8bc:	09 c0       	rjmp	.+18     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 8be:	83 2d       	mov	r24, r3
 8c0:	8e 7e       	andi	r24, 0xEE	; 238
 8c2:	a8 2e       	mov	r10, r24
 8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 8c6:	b8 2c       	mov	r11, r8
 8c8:	a3 2c       	mov	r10, r3
 8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8cc:	b8 2c       	mov	r11, r8
 8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8d0:	b9 2c       	mov	r11, r9
 8d2:	a4 fe       	sbrs	r10, 4
 8d4:	0f c0       	rjmp	.+30     	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
 8d6:	fe 01       	movw	r30, r28
 8d8:	e8 0d       	add	r30, r8
 8da:	f1 1d       	adc	r31, r1
 8dc:	80 81       	ld	r24, Z
 8de:	80 33       	cpi	r24, 0x30	; 48
 8e0:	21 f4       	brne	.+8      	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
 8e2:	9a 2d       	mov	r25, r10
 8e4:	99 7e       	andi	r25, 0xE9	; 233
 8e6:	a9 2e       	mov	r10, r25
 8e8:	09 c0       	rjmp	.+18     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8ea:	a2 fe       	sbrs	r10, 2
 8ec:	06 c0       	rjmp	.+12     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 8ee:	b3 94       	inc	r11
 8f0:	b3 94       	inc	r11
 8f2:	04 c0       	rjmp	.+8      	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8f4:	8a 2d       	mov	r24, r10
 8f6:	86 78       	andi	r24, 0x86	; 134
 8f8:	09 f0       	breq	.+2      	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8fa:	b3 94       	inc	r11
 8fc:	a3 fc       	sbrc	r10, 3
 8fe:	11 c0       	rjmp	.+34     	; 0x922 <__stack+0x23>
 900:	a0 fe       	sbrs	r10, 0
 902:	06 c0       	rjmp	.+12     	; 0x910 <__stack+0x11>
 904:	b2 14       	cp	r11, r2
 906:	88 f4       	brcc	.+34     	; 0x92a <__stack+0x2b>
 908:	28 0c       	add	r2, r8
 90a:	92 2c       	mov	r9, r2
 90c:	9b 18       	sub	r9, r11
 90e:	0e c0       	rjmp	.+28     	; 0x92c <__stack+0x2d>
 910:	b2 14       	cp	r11, r2
 912:	60 f4       	brcc	.+24     	; 0x92c <__stack+0x2d>
 914:	b6 01       	movw	r22, r12
 916:	80 e2       	ldi	r24, 0x20	; 32
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fputc>
 91e:	b3 94       	inc	r11
 920:	f7 cf       	rjmp	.-18     	; 0x910 <__stack+0x11>
 922:	b2 14       	cp	r11, r2
 924:	18 f4       	brcc	.+6      	; 0x92c <__stack+0x2d>
 926:	2b 18       	sub	r2, r11
 928:	02 c0       	rjmp	.+4      	; 0x92e <__stack+0x2f>
 92a:	98 2c       	mov	r9, r8
 92c:	21 2c       	mov	r2, r1
 92e:	a4 fe       	sbrs	r10, 4
 930:	10 c0       	rjmp	.+32     	; 0x952 <__stack+0x53>
 932:	b6 01       	movw	r22, r12
 934:	80 e3       	ldi	r24, 0x30	; 48
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fputc>
 93c:	a2 fe       	sbrs	r10, 2
 93e:	17 c0       	rjmp	.+46     	; 0x96e <__stack+0x6f>
 940:	a1 fc       	sbrc	r10, 1
 942:	03 c0       	rjmp	.+6      	; 0x94a <__stack+0x4b>
 944:	88 e7       	ldi	r24, 0x78	; 120
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	02 c0       	rjmp	.+4      	; 0x94e <__stack+0x4f>
 94a:	88 e5       	ldi	r24, 0x58	; 88
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	b6 01       	movw	r22, r12
 950:	0c c0       	rjmp	.+24     	; 0x96a <__stack+0x6b>
 952:	8a 2d       	mov	r24, r10
 954:	86 78       	andi	r24, 0x86	; 134
 956:	59 f0       	breq	.+22     	; 0x96e <__stack+0x6f>
 958:	a1 fe       	sbrs	r10, 1
 95a:	02 c0       	rjmp	.+4      	; 0x960 <__stack+0x61>
 95c:	8b e2       	ldi	r24, 0x2B	; 43
 95e:	01 c0       	rjmp	.+2      	; 0x962 <__stack+0x63>
 960:	80 e2       	ldi	r24, 0x20	; 32
 962:	a7 fc       	sbrc	r10, 7
 964:	8d e2       	ldi	r24, 0x2D	; 45
 966:	b6 01       	movw	r22, r12
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fputc>
 96e:	89 14       	cp	r8, r9
 970:	38 f4       	brcc	.+14     	; 0x980 <__stack+0x81>
 972:	b6 01       	movw	r22, r12
 974:	80 e3       	ldi	r24, 0x30	; 48
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fputc>
 97c:	9a 94       	dec	r9
 97e:	f7 cf       	rjmp	.-18     	; 0x96e <__stack+0x6f>
 980:	8a 94       	dec	r8
 982:	f3 01       	movw	r30, r6
 984:	e8 0d       	add	r30, r8
 986:	f1 1d       	adc	r31, r1
 988:	80 81       	ld	r24, Z
 98a:	b6 01       	movw	r22, r12
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fputc>
 992:	81 10       	cpse	r8, r1
 994:	f5 cf       	rjmp	.-22     	; 0x980 <__stack+0x81>
 996:	22 20       	and	r2, r2
 998:	09 f4       	brne	.+2      	; 0x99c <__stack+0x9d>
 99a:	42 ce       	rjmp	.-892    	; 0x620 <vfprintf+0x24>
 99c:	b6 01       	movw	r22, r12
 99e:	80 e2       	ldi	r24, 0x20	; 32
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fputc>
 9a6:	2a 94       	dec	r2
 9a8:	f6 cf       	rjmp	.-20     	; 0x996 <__stack+0x97>
 9aa:	f6 01       	movw	r30, r12
 9ac:	86 81       	ldd	r24, Z+6	; 0x06
 9ae:	97 81       	ldd	r25, Z+7	; 0x07
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <__stack+0xb7>
 9b2:	8f ef       	ldi	r24, 0xFF	; 255
 9b4:	9f ef       	ldi	r25, 0xFF	; 255
 9b6:	2b 96       	adiw	r28, 0x0b	; 11
 9b8:	e2 e1       	ldi	r30, 0x12	; 18
 9ba:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__epilogue_restores__>

000009be <strnlen_P>:
 9be:	fc 01       	movw	r30, r24
 9c0:	05 90       	lpm	r0, Z+
 9c2:	61 50       	subi	r22, 0x01	; 1
 9c4:	70 40       	sbci	r23, 0x00	; 0
 9c6:	01 10       	cpse	r0, r1
 9c8:	d8 f7       	brcc	.-10     	; 0x9c0 <strnlen_P+0x2>
 9ca:	80 95       	com	r24
 9cc:	90 95       	com	r25
 9ce:	8e 0f       	add	r24, r30
 9d0:	9f 1f       	adc	r25, r31
 9d2:	08 95       	ret

000009d4 <strnlen>:
 9d4:	fc 01       	movw	r30, r24
 9d6:	61 50       	subi	r22, 0x01	; 1
 9d8:	70 40       	sbci	r23, 0x00	; 0
 9da:	01 90       	ld	r0, Z+
 9dc:	01 10       	cpse	r0, r1
 9de:	d8 f7       	brcc	.-10     	; 0x9d6 <strnlen+0x2>
 9e0:	80 95       	com	r24
 9e2:	90 95       	com	r25
 9e4:	8e 0f       	add	r24, r30
 9e6:	9f 1f       	adc	r25, r31
 9e8:	08 95       	ret

000009ea <fputc>:
 9ea:	0f 93       	push	r16
 9ec:	1f 93       	push	r17
 9ee:	cf 93       	push	r28
 9f0:	df 93       	push	r29
 9f2:	fb 01       	movw	r30, r22
 9f4:	23 81       	ldd	r18, Z+3	; 0x03
 9f6:	21 fd       	sbrc	r18, 1
 9f8:	03 c0       	rjmp	.+6      	; 0xa00 <fputc+0x16>
 9fa:	8f ef       	ldi	r24, 0xFF	; 255
 9fc:	9f ef       	ldi	r25, 0xFF	; 255
 9fe:	2c c0       	rjmp	.+88     	; 0xa58 <fputc+0x6e>
 a00:	22 ff       	sbrs	r18, 2
 a02:	16 c0       	rjmp	.+44     	; 0xa30 <fputc+0x46>
 a04:	46 81       	ldd	r20, Z+6	; 0x06
 a06:	57 81       	ldd	r21, Z+7	; 0x07
 a08:	24 81       	ldd	r18, Z+4	; 0x04
 a0a:	35 81       	ldd	r19, Z+5	; 0x05
 a0c:	42 17       	cp	r20, r18
 a0e:	53 07       	cpc	r21, r19
 a10:	44 f4       	brge	.+16     	; 0xa22 <fputc+0x38>
 a12:	a0 81       	ld	r26, Z
 a14:	b1 81       	ldd	r27, Z+1	; 0x01
 a16:	9d 01       	movw	r18, r26
 a18:	2f 5f       	subi	r18, 0xFF	; 255
 a1a:	3f 4f       	sbci	r19, 0xFF	; 255
 a1c:	31 83       	std	Z+1, r19	; 0x01
 a1e:	20 83       	st	Z, r18
 a20:	8c 93       	st	X, r24
 a22:	26 81       	ldd	r18, Z+6	; 0x06
 a24:	37 81       	ldd	r19, Z+7	; 0x07
 a26:	2f 5f       	subi	r18, 0xFF	; 255
 a28:	3f 4f       	sbci	r19, 0xFF	; 255
 a2a:	37 83       	std	Z+7, r19	; 0x07
 a2c:	26 83       	std	Z+6, r18	; 0x06
 a2e:	14 c0       	rjmp	.+40     	; 0xa58 <fputc+0x6e>
 a30:	8b 01       	movw	r16, r22
 a32:	ec 01       	movw	r28, r24
 a34:	fb 01       	movw	r30, r22
 a36:	00 84       	ldd	r0, Z+8	; 0x08
 a38:	f1 85       	ldd	r31, Z+9	; 0x09
 a3a:	e0 2d       	mov	r30, r0
 a3c:	09 95       	icall
 a3e:	89 2b       	or	r24, r25
 a40:	e1 f6       	brne	.-72     	; 0x9fa <fputc+0x10>
 a42:	d8 01       	movw	r26, r16
 a44:	16 96       	adiw	r26, 0x06	; 6
 a46:	8d 91       	ld	r24, X+
 a48:	9c 91       	ld	r25, X
 a4a:	17 97       	sbiw	r26, 0x07	; 7
 a4c:	01 96       	adiw	r24, 0x01	; 1
 a4e:	17 96       	adiw	r26, 0x07	; 7
 a50:	9c 93       	st	X, r25
 a52:	8e 93       	st	-X, r24
 a54:	16 97       	sbiw	r26, 0x06	; 6
 a56:	ce 01       	movw	r24, r28
 a58:	df 91       	pop	r29
 a5a:	cf 91       	pop	r28
 a5c:	1f 91       	pop	r17
 a5e:	0f 91       	pop	r16
 a60:	08 95       	ret

00000a62 <__ultoa_invert>:
 a62:	fa 01       	movw	r30, r20
 a64:	aa 27       	eor	r26, r26
 a66:	28 30       	cpi	r18, 0x08	; 8
 a68:	51 f1       	breq	.+84     	; 0xabe <__ultoa_invert+0x5c>
 a6a:	20 31       	cpi	r18, 0x10	; 16
 a6c:	81 f1       	breq	.+96     	; 0xace <__ultoa_invert+0x6c>
 a6e:	e8 94       	clt
 a70:	6f 93       	push	r22
 a72:	6e 7f       	andi	r22, 0xFE	; 254
 a74:	6e 5f       	subi	r22, 0xFE	; 254
 a76:	7f 4f       	sbci	r23, 0xFF	; 255
 a78:	8f 4f       	sbci	r24, 0xFF	; 255
 a7a:	9f 4f       	sbci	r25, 0xFF	; 255
 a7c:	af 4f       	sbci	r26, 0xFF	; 255
 a7e:	b1 e0       	ldi	r27, 0x01	; 1
 a80:	3e d0       	rcall	.+124    	; 0xafe <__ultoa_invert+0x9c>
 a82:	b4 e0       	ldi	r27, 0x04	; 4
 a84:	3c d0       	rcall	.+120    	; 0xafe <__ultoa_invert+0x9c>
 a86:	67 0f       	add	r22, r23
 a88:	78 1f       	adc	r23, r24
 a8a:	89 1f       	adc	r24, r25
 a8c:	9a 1f       	adc	r25, r26
 a8e:	a1 1d       	adc	r26, r1
 a90:	68 0f       	add	r22, r24
 a92:	79 1f       	adc	r23, r25
 a94:	8a 1f       	adc	r24, r26
 a96:	91 1d       	adc	r25, r1
 a98:	a1 1d       	adc	r26, r1
 a9a:	6a 0f       	add	r22, r26
 a9c:	71 1d       	adc	r23, r1
 a9e:	81 1d       	adc	r24, r1
 aa0:	91 1d       	adc	r25, r1
 aa2:	a1 1d       	adc	r26, r1
 aa4:	20 d0       	rcall	.+64     	; 0xae6 <__ultoa_invert+0x84>
 aa6:	09 f4       	brne	.+2      	; 0xaaa <__ultoa_invert+0x48>
 aa8:	68 94       	set
 aaa:	3f 91       	pop	r19
 aac:	2a e0       	ldi	r18, 0x0A	; 10
 aae:	26 9f       	mul	r18, r22
 ab0:	11 24       	eor	r1, r1
 ab2:	30 19       	sub	r19, r0
 ab4:	30 5d       	subi	r19, 0xD0	; 208
 ab6:	31 93       	st	Z+, r19
 ab8:	de f6       	brtc	.-74     	; 0xa70 <__ultoa_invert+0xe>
 aba:	cf 01       	movw	r24, r30
 abc:	08 95       	ret
 abe:	46 2f       	mov	r20, r22
 ac0:	47 70       	andi	r20, 0x07	; 7
 ac2:	40 5d       	subi	r20, 0xD0	; 208
 ac4:	41 93       	st	Z+, r20
 ac6:	b3 e0       	ldi	r27, 0x03	; 3
 ac8:	0f d0       	rcall	.+30     	; 0xae8 <__ultoa_invert+0x86>
 aca:	c9 f7       	brne	.-14     	; 0xabe <__ultoa_invert+0x5c>
 acc:	f6 cf       	rjmp	.-20     	; 0xaba <__ultoa_invert+0x58>
 ace:	46 2f       	mov	r20, r22
 ad0:	4f 70       	andi	r20, 0x0F	; 15
 ad2:	40 5d       	subi	r20, 0xD0	; 208
 ad4:	4a 33       	cpi	r20, 0x3A	; 58
 ad6:	18 f0       	brcs	.+6      	; 0xade <__ultoa_invert+0x7c>
 ad8:	49 5d       	subi	r20, 0xD9	; 217
 ada:	31 fd       	sbrc	r19, 1
 adc:	40 52       	subi	r20, 0x20	; 32
 ade:	41 93       	st	Z+, r20
 ae0:	02 d0       	rcall	.+4      	; 0xae6 <__ultoa_invert+0x84>
 ae2:	a9 f7       	brne	.-22     	; 0xace <__ultoa_invert+0x6c>
 ae4:	ea cf       	rjmp	.-44     	; 0xaba <__ultoa_invert+0x58>
 ae6:	b4 e0       	ldi	r27, 0x04	; 4
 ae8:	a6 95       	lsr	r26
 aea:	97 95       	ror	r25
 aec:	87 95       	ror	r24
 aee:	77 95       	ror	r23
 af0:	67 95       	ror	r22
 af2:	ba 95       	dec	r27
 af4:	c9 f7       	brne	.-14     	; 0xae8 <__ultoa_invert+0x86>
 af6:	00 97       	sbiw	r24, 0x00	; 0
 af8:	61 05       	cpc	r22, r1
 afa:	71 05       	cpc	r23, r1
 afc:	08 95       	ret
 afe:	9b 01       	movw	r18, r22
 b00:	ac 01       	movw	r20, r24
 b02:	0a 2e       	mov	r0, r26
 b04:	06 94       	lsr	r0
 b06:	57 95       	ror	r21
 b08:	47 95       	ror	r20
 b0a:	37 95       	ror	r19
 b0c:	27 95       	ror	r18
 b0e:	ba 95       	dec	r27
 b10:	c9 f7       	brne	.-14     	; 0xb04 <__ultoa_invert+0xa2>
 b12:	62 0f       	add	r22, r18
 b14:	73 1f       	adc	r23, r19
 b16:	84 1f       	adc	r24, r20
 b18:	95 1f       	adc	r25, r21
 b1a:	a0 1d       	adc	r26, r0
 b1c:	08 95       	ret

00000b1e <__prologue_saves__>:
 b1e:	2f 92       	push	r2
 b20:	3f 92       	push	r3
 b22:	4f 92       	push	r4
 b24:	5f 92       	push	r5
 b26:	6f 92       	push	r6
 b28:	7f 92       	push	r7
 b2a:	8f 92       	push	r8
 b2c:	9f 92       	push	r9
 b2e:	af 92       	push	r10
 b30:	bf 92       	push	r11
 b32:	cf 92       	push	r12
 b34:	df 92       	push	r13
 b36:	ef 92       	push	r14
 b38:	ff 92       	push	r15
 b3a:	0f 93       	push	r16
 b3c:	1f 93       	push	r17
 b3e:	cf 93       	push	r28
 b40:	df 93       	push	r29
 b42:	cd b7       	in	r28, 0x3d	; 61
 b44:	de b7       	in	r29, 0x3e	; 62
 b46:	ca 1b       	sub	r28, r26
 b48:	db 0b       	sbc	r29, r27
 b4a:	0f b6       	in	r0, 0x3f	; 63
 b4c:	f8 94       	cli
 b4e:	de bf       	out	0x3e, r29	; 62
 b50:	0f be       	out	0x3f, r0	; 63
 b52:	cd bf       	out	0x3d, r28	; 61
 b54:	09 94       	ijmp

00000b56 <__epilogue_restores__>:
 b56:	2a 88       	ldd	r2, Y+18	; 0x12
 b58:	39 88       	ldd	r3, Y+17	; 0x11
 b5a:	48 88       	ldd	r4, Y+16	; 0x10
 b5c:	5f 84       	ldd	r5, Y+15	; 0x0f
 b5e:	6e 84       	ldd	r6, Y+14	; 0x0e
 b60:	7d 84       	ldd	r7, Y+13	; 0x0d
 b62:	8c 84       	ldd	r8, Y+12	; 0x0c
 b64:	9b 84       	ldd	r9, Y+11	; 0x0b
 b66:	aa 84       	ldd	r10, Y+10	; 0x0a
 b68:	b9 84       	ldd	r11, Y+9	; 0x09
 b6a:	c8 84       	ldd	r12, Y+8	; 0x08
 b6c:	df 80       	ldd	r13, Y+7	; 0x07
 b6e:	ee 80       	ldd	r14, Y+6	; 0x06
 b70:	fd 80       	ldd	r15, Y+5	; 0x05
 b72:	0c 81       	ldd	r16, Y+4	; 0x04
 b74:	1b 81       	ldd	r17, Y+3	; 0x03
 b76:	aa 81       	ldd	r26, Y+2	; 0x02
 b78:	b9 81       	ldd	r27, Y+1	; 0x01
 b7a:	ce 0f       	add	r28, r30
 b7c:	d1 1d       	adc	r29, r1
 b7e:	0f b6       	in	r0, 0x3f	; 63
 b80:	f8 94       	cli
 b82:	de bf       	out	0x3e, r29	; 62
 b84:	0f be       	out	0x3f, r0	; 63
 b86:	cd bf       	out	0x3d, r28	; 61
 b88:	ed 01       	movw	r28, r26
 b8a:	08 95       	ret

00000b8c <_exit>:
 b8c:	f8 94       	cli

00000b8e <__stop_program>:
 b8e:	ff cf       	rjmp	.-2      	; 0xb8e <__stop_program>
